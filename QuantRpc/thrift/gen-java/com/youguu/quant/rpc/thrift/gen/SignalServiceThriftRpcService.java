/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.youguu.quant.rpc.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-21")
public class SignalServiceThriftRpcService {

  public interface Iface {

    /**
     * 查询某策略下所有股票文件名称(path+filename)
     * @param strategyId 策略ID
     * @return
     * 
     * @param strategyId
     */
    public String loadStockFileName(int strategyId) throws org.apache.thrift.TException;

    /**
     * 加载交易信号
     * @param strategyId
     * @param stockCode
     * @return 每个股票一个信号List  key:股票代码,value:信号列表
     * 
     * @param strategyId
     * @param stocks
     */
    public String loadTradeSignal(int strategyId, String stocks) throws org.apache.thrift.TException;

    /**
     * 加载交易信号
     * 
     * @param strategyId
     * @param days
     * @param stocks
     */
    public String loadTradeSignalDays(int strategyId, int days, String stocks) throws org.apache.thrift.TException;

    public String loadTradeSignalSection(int strategyId, long startDate, long endDate, String stockCode) throws org.apache.thrift.TException;

    public String getLastTradeSignal(int strategyId, String stockCode) throws org.apache.thrift.TException;

    public String readOneTradeSignal(int strategyId, String stockCode) throws org.apache.thrift.TException;

    /**
     * 查询交易记录
     * @param strategyId
     * @param stockCode
     * @return 每个股票一个信号List  key:股票代码,value:信号列表
     * 
     * @param strategyId
     * @param userId
     * @param type
     * @param pageIndex
     * @param pageSize
     * @param stocks
     */
    public String queryPageStrategyTradeRecord(int strategyId, int userId, int type, int pageIndex, int pageSize, String stocks) throws org.apache.thrift.TException;

    /**
     * 查询用户购买的某策略下所有股票最新的交易信号
     * 
     * @param strategyId
     * @param userId
     */
    public String queryStockRealtimeSignalList(int strategyId, int userId) throws org.apache.thrift.TException;

    /**
     * 查询N只股票的平均盈利曲线
     * 
     * @param strategyId
     * @param days
     * @param stocks
     */
    public String queryAverageProfitCurve(int strategyId, int days, String stocks) throws org.apache.thrift.TException;

    /**
     * 查询N只股票总收益率
     * 
     * @param strategyId
     * @param days
     * @param type
     * @param stocks
     */
    public String querySumProfit(int strategyId, int days, int type, String stocks) throws org.apache.thrift.TException;

    public String querySumProfitNew(int strategyId, long startDate, long endDate, int type, String stocks) throws org.apache.thrift.TException;

    /**
     * 心态监测 *
     */
    public int heartBeat() throws org.apache.thrift.TException;

    public String deleteSignalFile(int strategyId) throws org.apache.thrift.TException;

    public String countProfit(int strategyId, long date) throws org.apache.thrift.TException;

    public String countfiveDay(int strategyId, double five) throws org.apache.thrift.TException;

    public String countNowHoldStock(int strategyId, double now) throws org.apache.thrift.TException;

    public int disReportData(int strategyId) throws org.apache.thrift.TException;

    /**
     * 根据股票代码查询持有该股票且收益最高的机器人信息
     * @param stockCode 股票代码
     * @return
     * 
     * @param stockCode
     * @param userId
     */
    public String findDnaStockHold(String stockCode, int userId) throws org.apache.thrift.TException;

    public String getLastTradeSignalByDate(int strategyId, int statDate, String stockCode) throws org.apache.thrift.TException;

    public String getLastBuyTradeSignalByDate(int strategyId, int statDate, String stockCode) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void loadStockFileName(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadTradeSignal(int strategyId, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadTradeSignalDays(int strategyId, int days, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadTradeSignalSection(int strategyId, long startDate, long endDate, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLastTradeSignal(int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void readOneTradeSignal(int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryPageStrategyTradeRecord(int strategyId, int userId, int type, int pageIndex, int pageSize, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryStockRealtimeSignalList(int strategyId, int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryAverageProfitCurve(int strategyId, int days, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySumProfit(int strategyId, int days, int type, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySumProfitNew(int strategyId, long startDate, long endDate, int type, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void heartBeat(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteSignalFile(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countProfit(int strategyId, long date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countfiveDay(int strategyId, double five, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countNowHoldStock(int strategyId, double now, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void disReportData(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findDnaStockHold(String stockCode, int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLastTradeSignalByDate(int strategyId, int statDate, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLastBuyTradeSignalByDate(int strategyId, int statDate, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String loadStockFileName(int strategyId) throws org.apache.thrift.TException
    {
      send_loadStockFileName(strategyId);
      return recv_loadStockFileName();
    }

    public void send_loadStockFileName(int strategyId) throws org.apache.thrift.TException
    {
      loadStockFileName_args args = new loadStockFileName_args();
      args.setStrategyId(strategyId);
      sendBase("loadStockFileName", args);
    }

    public String recv_loadStockFileName() throws org.apache.thrift.TException
    {
      loadStockFileName_result result = new loadStockFileName_result();
      receiveBase(result, "loadStockFileName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadStockFileName failed: unknown result");
    }

    public String loadTradeSignal(int strategyId, String stocks) throws org.apache.thrift.TException
    {
      send_loadTradeSignal(strategyId, stocks);
      return recv_loadTradeSignal();
    }

    public void send_loadTradeSignal(int strategyId, String stocks) throws org.apache.thrift.TException
    {
      loadTradeSignal_args args = new loadTradeSignal_args();
      args.setStrategyId(strategyId);
      args.setStocks(stocks);
      sendBase("loadTradeSignal", args);
    }

    public String recv_loadTradeSignal() throws org.apache.thrift.TException
    {
      loadTradeSignal_result result = new loadTradeSignal_result();
      receiveBase(result, "loadTradeSignal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadTradeSignal failed: unknown result");
    }

    public String loadTradeSignalDays(int strategyId, int days, String stocks) throws org.apache.thrift.TException
    {
      send_loadTradeSignalDays(strategyId, days, stocks);
      return recv_loadTradeSignalDays();
    }

    public void send_loadTradeSignalDays(int strategyId, int days, String stocks) throws org.apache.thrift.TException
    {
      loadTradeSignalDays_args args = new loadTradeSignalDays_args();
      args.setStrategyId(strategyId);
      args.setDays(days);
      args.setStocks(stocks);
      sendBase("loadTradeSignalDays", args);
    }

    public String recv_loadTradeSignalDays() throws org.apache.thrift.TException
    {
      loadTradeSignalDays_result result = new loadTradeSignalDays_result();
      receiveBase(result, "loadTradeSignalDays");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadTradeSignalDays failed: unknown result");
    }

    public String loadTradeSignalSection(int strategyId, long startDate, long endDate, String stockCode) throws org.apache.thrift.TException
    {
      send_loadTradeSignalSection(strategyId, startDate, endDate, stockCode);
      return recv_loadTradeSignalSection();
    }

    public void send_loadTradeSignalSection(int strategyId, long startDate, long endDate, String stockCode) throws org.apache.thrift.TException
    {
      loadTradeSignalSection_args args = new loadTradeSignalSection_args();
      args.setStrategyId(strategyId);
      args.setStartDate(startDate);
      args.setEndDate(endDate);
      args.setStockCode(stockCode);
      sendBase("loadTradeSignalSection", args);
    }

    public String recv_loadTradeSignalSection() throws org.apache.thrift.TException
    {
      loadTradeSignalSection_result result = new loadTradeSignalSection_result();
      receiveBase(result, "loadTradeSignalSection");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadTradeSignalSection failed: unknown result");
    }

    public String getLastTradeSignal(int strategyId, String stockCode) throws org.apache.thrift.TException
    {
      send_getLastTradeSignal(strategyId, stockCode);
      return recv_getLastTradeSignal();
    }

    public void send_getLastTradeSignal(int strategyId, String stockCode) throws org.apache.thrift.TException
    {
      getLastTradeSignal_args args = new getLastTradeSignal_args();
      args.setStrategyId(strategyId);
      args.setStockCode(stockCode);
      sendBase("getLastTradeSignal", args);
    }

    public String recv_getLastTradeSignal() throws org.apache.thrift.TException
    {
      getLastTradeSignal_result result = new getLastTradeSignal_result();
      receiveBase(result, "getLastTradeSignal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLastTradeSignal failed: unknown result");
    }

    public String readOneTradeSignal(int strategyId, String stockCode) throws org.apache.thrift.TException
    {
      send_readOneTradeSignal(strategyId, stockCode);
      return recv_readOneTradeSignal();
    }

    public void send_readOneTradeSignal(int strategyId, String stockCode) throws org.apache.thrift.TException
    {
      readOneTradeSignal_args args = new readOneTradeSignal_args();
      args.setStrategyId(strategyId);
      args.setStockCode(stockCode);
      sendBase("readOneTradeSignal", args);
    }

    public String recv_readOneTradeSignal() throws org.apache.thrift.TException
    {
      readOneTradeSignal_result result = new readOneTradeSignal_result();
      receiveBase(result, "readOneTradeSignal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readOneTradeSignal failed: unknown result");
    }

    public String queryPageStrategyTradeRecord(int strategyId, int userId, int type, int pageIndex, int pageSize, String stocks) throws org.apache.thrift.TException
    {
      send_queryPageStrategyTradeRecord(strategyId, userId, type, pageIndex, pageSize, stocks);
      return recv_queryPageStrategyTradeRecord();
    }

    public void send_queryPageStrategyTradeRecord(int strategyId, int userId, int type, int pageIndex, int pageSize, String stocks) throws org.apache.thrift.TException
    {
      queryPageStrategyTradeRecord_args args = new queryPageStrategyTradeRecord_args();
      args.setStrategyId(strategyId);
      args.setUserId(userId);
      args.setType(type);
      args.setPageIndex(pageIndex);
      args.setPageSize(pageSize);
      args.setStocks(stocks);
      sendBase("queryPageStrategyTradeRecord", args);
    }

    public String recv_queryPageStrategyTradeRecord() throws org.apache.thrift.TException
    {
      queryPageStrategyTradeRecord_result result = new queryPageStrategyTradeRecord_result();
      receiveBase(result, "queryPageStrategyTradeRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryPageStrategyTradeRecord failed: unknown result");
    }

    public String queryStockRealtimeSignalList(int strategyId, int userId) throws org.apache.thrift.TException
    {
      send_queryStockRealtimeSignalList(strategyId, userId);
      return recv_queryStockRealtimeSignalList();
    }

    public void send_queryStockRealtimeSignalList(int strategyId, int userId) throws org.apache.thrift.TException
    {
      queryStockRealtimeSignalList_args args = new queryStockRealtimeSignalList_args();
      args.setStrategyId(strategyId);
      args.setUserId(userId);
      sendBase("queryStockRealtimeSignalList", args);
    }

    public String recv_queryStockRealtimeSignalList() throws org.apache.thrift.TException
    {
      queryStockRealtimeSignalList_result result = new queryStockRealtimeSignalList_result();
      receiveBase(result, "queryStockRealtimeSignalList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryStockRealtimeSignalList failed: unknown result");
    }

    public String queryAverageProfitCurve(int strategyId, int days, String stocks) throws org.apache.thrift.TException
    {
      send_queryAverageProfitCurve(strategyId, days, stocks);
      return recv_queryAverageProfitCurve();
    }

    public void send_queryAverageProfitCurve(int strategyId, int days, String stocks) throws org.apache.thrift.TException
    {
      queryAverageProfitCurve_args args = new queryAverageProfitCurve_args();
      args.setStrategyId(strategyId);
      args.setDays(days);
      args.setStocks(stocks);
      sendBase("queryAverageProfitCurve", args);
    }

    public String recv_queryAverageProfitCurve() throws org.apache.thrift.TException
    {
      queryAverageProfitCurve_result result = new queryAverageProfitCurve_result();
      receiveBase(result, "queryAverageProfitCurve");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryAverageProfitCurve failed: unknown result");
    }

    public String querySumProfit(int strategyId, int days, int type, String stocks) throws org.apache.thrift.TException
    {
      send_querySumProfit(strategyId, days, type, stocks);
      return recv_querySumProfit();
    }

    public void send_querySumProfit(int strategyId, int days, int type, String stocks) throws org.apache.thrift.TException
    {
      querySumProfit_args args = new querySumProfit_args();
      args.setStrategyId(strategyId);
      args.setDays(days);
      args.setType(type);
      args.setStocks(stocks);
      sendBase("querySumProfit", args);
    }

    public String recv_querySumProfit() throws org.apache.thrift.TException
    {
      querySumProfit_result result = new querySumProfit_result();
      receiveBase(result, "querySumProfit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySumProfit failed: unknown result");
    }

    public String querySumProfitNew(int strategyId, long startDate, long endDate, int type, String stocks) throws org.apache.thrift.TException
    {
      send_querySumProfitNew(strategyId, startDate, endDate, type, stocks);
      return recv_querySumProfitNew();
    }

    public void send_querySumProfitNew(int strategyId, long startDate, long endDate, int type, String stocks) throws org.apache.thrift.TException
    {
      querySumProfitNew_args args = new querySumProfitNew_args();
      args.setStrategyId(strategyId);
      args.setStartDate(startDate);
      args.setEndDate(endDate);
      args.setType(type);
      args.setStocks(stocks);
      sendBase("querySumProfitNew", args);
    }

    public String recv_querySumProfitNew() throws org.apache.thrift.TException
    {
      querySumProfitNew_result result = new querySumProfitNew_result();
      receiveBase(result, "querySumProfitNew");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySumProfitNew failed: unknown result");
    }

    public int heartBeat() throws org.apache.thrift.TException
    {
      send_heartBeat();
      return recv_heartBeat();
    }

    public void send_heartBeat() throws org.apache.thrift.TException
    {
      heartBeat_args args = new heartBeat_args();
      sendBase("heartBeat", args);
    }

    public int recv_heartBeat() throws org.apache.thrift.TException
    {
      heartBeat_result result = new heartBeat_result();
      receiveBase(result, "heartBeat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "heartBeat failed: unknown result");
    }

    public String deleteSignalFile(int strategyId) throws org.apache.thrift.TException
    {
      send_deleteSignalFile(strategyId);
      return recv_deleteSignalFile();
    }

    public void send_deleteSignalFile(int strategyId) throws org.apache.thrift.TException
    {
      deleteSignalFile_args args = new deleteSignalFile_args();
      args.setStrategyId(strategyId);
      sendBase("deleteSignalFile", args);
    }

    public String recv_deleteSignalFile() throws org.apache.thrift.TException
    {
      deleteSignalFile_result result = new deleteSignalFile_result();
      receiveBase(result, "deleteSignalFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteSignalFile failed: unknown result");
    }

    public String countProfit(int strategyId, long date) throws org.apache.thrift.TException
    {
      send_countProfit(strategyId, date);
      return recv_countProfit();
    }

    public void send_countProfit(int strategyId, long date) throws org.apache.thrift.TException
    {
      countProfit_args args = new countProfit_args();
      args.setStrategyId(strategyId);
      args.setDate(date);
      sendBase("countProfit", args);
    }

    public String recv_countProfit() throws org.apache.thrift.TException
    {
      countProfit_result result = new countProfit_result();
      receiveBase(result, "countProfit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countProfit failed: unknown result");
    }

    public String countfiveDay(int strategyId, double five) throws org.apache.thrift.TException
    {
      send_countfiveDay(strategyId, five);
      return recv_countfiveDay();
    }

    public void send_countfiveDay(int strategyId, double five) throws org.apache.thrift.TException
    {
      countfiveDay_args args = new countfiveDay_args();
      args.setStrategyId(strategyId);
      args.setFive(five);
      sendBase("countfiveDay", args);
    }

    public String recv_countfiveDay() throws org.apache.thrift.TException
    {
      countfiveDay_result result = new countfiveDay_result();
      receiveBase(result, "countfiveDay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countfiveDay failed: unknown result");
    }

    public String countNowHoldStock(int strategyId, double now) throws org.apache.thrift.TException
    {
      send_countNowHoldStock(strategyId, now);
      return recv_countNowHoldStock();
    }

    public void send_countNowHoldStock(int strategyId, double now) throws org.apache.thrift.TException
    {
      countNowHoldStock_args args = new countNowHoldStock_args();
      args.setStrategyId(strategyId);
      args.setNow(now);
      sendBase("countNowHoldStock", args);
    }

    public String recv_countNowHoldStock() throws org.apache.thrift.TException
    {
      countNowHoldStock_result result = new countNowHoldStock_result();
      receiveBase(result, "countNowHoldStock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countNowHoldStock failed: unknown result");
    }

    public int disReportData(int strategyId) throws org.apache.thrift.TException
    {
      send_disReportData(strategyId);
      return recv_disReportData();
    }

    public void send_disReportData(int strategyId) throws org.apache.thrift.TException
    {
      disReportData_args args = new disReportData_args();
      args.setStrategyId(strategyId);
      sendBase("disReportData", args);
    }

    public int recv_disReportData() throws org.apache.thrift.TException
    {
      disReportData_result result = new disReportData_result();
      receiveBase(result, "disReportData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "disReportData failed: unknown result");
    }

    public String findDnaStockHold(String stockCode, int userId) throws org.apache.thrift.TException
    {
      send_findDnaStockHold(stockCode, userId);
      return recv_findDnaStockHold();
    }

    public void send_findDnaStockHold(String stockCode, int userId) throws org.apache.thrift.TException
    {
      findDnaStockHold_args args = new findDnaStockHold_args();
      args.setStockCode(stockCode);
      args.setUserId(userId);
      sendBase("findDnaStockHold", args);
    }

    public String recv_findDnaStockHold() throws org.apache.thrift.TException
    {
      findDnaStockHold_result result = new findDnaStockHold_result();
      receiveBase(result, "findDnaStockHold");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findDnaStockHold failed: unknown result");
    }

    public String getLastTradeSignalByDate(int strategyId, int statDate, String stockCode) throws org.apache.thrift.TException
    {
      send_getLastTradeSignalByDate(strategyId, statDate, stockCode);
      return recv_getLastTradeSignalByDate();
    }

    public void send_getLastTradeSignalByDate(int strategyId, int statDate, String stockCode) throws org.apache.thrift.TException
    {
      getLastTradeSignalByDate_args args = new getLastTradeSignalByDate_args();
      args.setStrategyId(strategyId);
      args.setStatDate(statDate);
      args.setStockCode(stockCode);
      sendBase("getLastTradeSignalByDate", args);
    }

    public String recv_getLastTradeSignalByDate() throws org.apache.thrift.TException
    {
      getLastTradeSignalByDate_result result = new getLastTradeSignalByDate_result();
      receiveBase(result, "getLastTradeSignalByDate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLastTradeSignalByDate failed: unknown result");
    }

    public String getLastBuyTradeSignalByDate(int strategyId, int statDate, String stockCode) throws org.apache.thrift.TException
    {
      send_getLastBuyTradeSignalByDate(strategyId, statDate, stockCode);
      return recv_getLastBuyTradeSignalByDate();
    }

    public void send_getLastBuyTradeSignalByDate(int strategyId, int statDate, String stockCode) throws org.apache.thrift.TException
    {
      getLastBuyTradeSignalByDate_args args = new getLastBuyTradeSignalByDate_args();
      args.setStrategyId(strategyId);
      args.setStatDate(statDate);
      args.setStockCode(stockCode);
      sendBase("getLastBuyTradeSignalByDate", args);
    }

    public String recv_getLastBuyTradeSignalByDate() throws org.apache.thrift.TException
    {
      getLastBuyTradeSignalByDate_result result = new getLastBuyTradeSignalByDate_result();
      receiveBase(result, "getLastBuyTradeSignalByDate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLastBuyTradeSignalByDate failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void loadStockFileName(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadStockFileName_call method_call = new loadStockFileName_call(strategyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadStockFileName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      public loadStockFileName_call(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadStockFileName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadStockFileName_args args = new loadStockFileName_args();
        args.setStrategyId(strategyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadStockFileName();
      }
    }

    public void loadTradeSignal(int strategyId, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadTradeSignal_call method_call = new loadTradeSignal_call(strategyId, stocks, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadTradeSignal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private String stocks;
      public loadTradeSignal_call(int strategyId, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.stocks = stocks;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadTradeSignal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadTradeSignal_args args = new loadTradeSignal_args();
        args.setStrategyId(strategyId);
        args.setStocks(stocks);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadTradeSignal();
      }
    }

    public void loadTradeSignalDays(int strategyId, int days, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadTradeSignalDays_call method_call = new loadTradeSignalDays_call(strategyId, days, stocks, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadTradeSignalDays_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private int days;
      private String stocks;
      public loadTradeSignalDays_call(int strategyId, int days, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.days = days;
        this.stocks = stocks;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadTradeSignalDays", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadTradeSignalDays_args args = new loadTradeSignalDays_args();
        args.setStrategyId(strategyId);
        args.setDays(days);
        args.setStocks(stocks);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadTradeSignalDays();
      }
    }

    public void loadTradeSignalSection(int strategyId, long startDate, long endDate, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadTradeSignalSection_call method_call = new loadTradeSignalSection_call(strategyId, startDate, endDate, stockCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadTradeSignalSection_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private long startDate;
      private long endDate;
      private String stockCode;
      public loadTradeSignalSection_call(int strategyId, long startDate, long endDate, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.startDate = startDate;
        this.endDate = endDate;
        this.stockCode = stockCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadTradeSignalSection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadTradeSignalSection_args args = new loadTradeSignalSection_args();
        args.setStrategyId(strategyId);
        args.setStartDate(startDate);
        args.setEndDate(endDate);
        args.setStockCode(stockCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadTradeSignalSection();
      }
    }

    public void getLastTradeSignal(int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLastTradeSignal_call method_call = new getLastTradeSignal_call(strategyId, stockCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLastTradeSignal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private String stockCode;
      public getLastTradeSignal_call(int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.stockCode = stockCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLastTradeSignal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLastTradeSignal_args args = new getLastTradeSignal_args();
        args.setStrategyId(strategyId);
        args.setStockCode(stockCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLastTradeSignal();
      }
    }

    public void readOneTradeSignal(int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readOneTradeSignal_call method_call = new readOneTradeSignal_call(strategyId, stockCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readOneTradeSignal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private String stockCode;
      public readOneTradeSignal_call(int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.stockCode = stockCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readOneTradeSignal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readOneTradeSignal_args args = new readOneTradeSignal_args();
        args.setStrategyId(strategyId);
        args.setStockCode(stockCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readOneTradeSignal();
      }
    }

    public void queryPageStrategyTradeRecord(int strategyId, int userId, int type, int pageIndex, int pageSize, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryPageStrategyTradeRecord_call method_call = new queryPageStrategyTradeRecord_call(strategyId, userId, type, pageIndex, pageSize, stocks, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryPageStrategyTradeRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private int userId;
      private int type;
      private int pageIndex;
      private int pageSize;
      private String stocks;
      public queryPageStrategyTradeRecord_call(int strategyId, int userId, int type, int pageIndex, int pageSize, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.userId = userId;
        this.type = type;
        this.pageIndex = pageIndex;
        this.pageSize = pageSize;
        this.stocks = stocks;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryPageStrategyTradeRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryPageStrategyTradeRecord_args args = new queryPageStrategyTradeRecord_args();
        args.setStrategyId(strategyId);
        args.setUserId(userId);
        args.setType(type);
        args.setPageIndex(pageIndex);
        args.setPageSize(pageSize);
        args.setStocks(stocks);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryPageStrategyTradeRecord();
      }
    }

    public void queryStockRealtimeSignalList(int strategyId, int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryStockRealtimeSignalList_call method_call = new queryStockRealtimeSignalList_call(strategyId, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryStockRealtimeSignalList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private int userId;
      public queryStockRealtimeSignalList_call(int strategyId, int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryStockRealtimeSignalList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryStockRealtimeSignalList_args args = new queryStockRealtimeSignalList_args();
        args.setStrategyId(strategyId);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryStockRealtimeSignalList();
      }
    }

    public void queryAverageProfitCurve(int strategyId, int days, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryAverageProfitCurve_call method_call = new queryAverageProfitCurve_call(strategyId, days, stocks, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryAverageProfitCurve_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private int days;
      private String stocks;
      public queryAverageProfitCurve_call(int strategyId, int days, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.days = days;
        this.stocks = stocks;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryAverageProfitCurve", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryAverageProfitCurve_args args = new queryAverageProfitCurve_args();
        args.setStrategyId(strategyId);
        args.setDays(days);
        args.setStocks(stocks);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryAverageProfitCurve();
      }
    }

    public void querySumProfit(int strategyId, int days, int type, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySumProfit_call method_call = new querySumProfit_call(strategyId, days, type, stocks, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySumProfit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private int days;
      private int type;
      private String stocks;
      public querySumProfit_call(int strategyId, int days, int type, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.days = days;
        this.type = type;
        this.stocks = stocks;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySumProfit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySumProfit_args args = new querySumProfit_args();
        args.setStrategyId(strategyId);
        args.setDays(days);
        args.setType(type);
        args.setStocks(stocks);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySumProfit();
      }
    }

    public void querySumProfitNew(int strategyId, long startDate, long endDate, int type, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySumProfitNew_call method_call = new querySumProfitNew_call(strategyId, startDate, endDate, type, stocks, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySumProfitNew_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private long startDate;
      private long endDate;
      private int type;
      private String stocks;
      public querySumProfitNew_call(int strategyId, long startDate, long endDate, int type, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.startDate = startDate;
        this.endDate = endDate;
        this.type = type;
        this.stocks = stocks;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySumProfitNew", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySumProfitNew_args args = new querySumProfitNew_args();
        args.setStrategyId(strategyId);
        args.setStartDate(startDate);
        args.setEndDate(endDate);
        args.setType(type);
        args.setStocks(stocks);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySumProfitNew();
      }
    }

    public void heartBeat(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      heartBeat_call method_call = new heartBeat_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class heartBeat_call extends org.apache.thrift.async.TAsyncMethodCall {
      public heartBeat_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("heartBeat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        heartBeat_args args = new heartBeat_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_heartBeat();
      }
    }

    public void deleteSignalFile(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSignalFile_call method_call = new deleteSignalFile_call(strategyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSignalFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      public deleteSignalFile_call(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSignalFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSignalFile_args args = new deleteSignalFile_args();
        args.setStrategyId(strategyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteSignalFile();
      }
    }

    public void countProfit(int strategyId, long date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countProfit_call method_call = new countProfit_call(strategyId, date, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countProfit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private long date;
      public countProfit_call(int strategyId, long date, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.date = date;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countProfit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countProfit_args args = new countProfit_args();
        args.setStrategyId(strategyId);
        args.setDate(date);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countProfit();
      }
    }

    public void countfiveDay(int strategyId, double five, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countfiveDay_call method_call = new countfiveDay_call(strategyId, five, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countfiveDay_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private double five;
      public countfiveDay_call(int strategyId, double five, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.five = five;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countfiveDay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countfiveDay_args args = new countfiveDay_args();
        args.setStrategyId(strategyId);
        args.setFive(five);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countfiveDay();
      }
    }

    public void countNowHoldStock(int strategyId, double now, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countNowHoldStock_call method_call = new countNowHoldStock_call(strategyId, now, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countNowHoldStock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private double now;
      public countNowHoldStock_call(int strategyId, double now, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.now = now;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countNowHoldStock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countNowHoldStock_args args = new countNowHoldStock_args();
        args.setStrategyId(strategyId);
        args.setNow(now);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countNowHoldStock();
      }
    }

    public void disReportData(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      disReportData_call method_call = new disReportData_call(strategyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class disReportData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      public disReportData_call(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("disReportData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        disReportData_args args = new disReportData_args();
        args.setStrategyId(strategyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_disReportData();
      }
    }

    public void findDnaStockHold(String stockCode, int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findDnaStockHold_call method_call = new findDnaStockHold_call(stockCode, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findDnaStockHold_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String stockCode;
      private int userId;
      public findDnaStockHold_call(String stockCode, int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stockCode = stockCode;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findDnaStockHold", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findDnaStockHold_args args = new findDnaStockHold_args();
        args.setStockCode(stockCode);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findDnaStockHold();
      }
    }

    public void getLastTradeSignalByDate(int strategyId, int statDate, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLastTradeSignalByDate_call method_call = new getLastTradeSignalByDate_call(strategyId, statDate, stockCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLastTradeSignalByDate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private int statDate;
      private String stockCode;
      public getLastTradeSignalByDate_call(int strategyId, int statDate, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.statDate = statDate;
        this.stockCode = stockCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLastTradeSignalByDate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLastTradeSignalByDate_args args = new getLastTradeSignalByDate_args();
        args.setStrategyId(strategyId);
        args.setStatDate(statDate);
        args.setStockCode(stockCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLastTradeSignalByDate();
      }
    }

    public void getLastBuyTradeSignalByDate(int strategyId, int statDate, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLastBuyTradeSignalByDate_call method_call = new getLastBuyTradeSignalByDate_call(strategyId, statDate, stockCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLastBuyTradeSignalByDate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private int statDate;
      private String stockCode;
      public getLastBuyTradeSignalByDate_call(int strategyId, int statDate, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.statDate = statDate;
        this.stockCode = stockCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLastBuyTradeSignalByDate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLastBuyTradeSignalByDate_args args = new getLastBuyTradeSignalByDate_args();
        args.setStrategyId(strategyId);
        args.setStatDate(statDate);
        args.setStockCode(stockCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLastBuyTradeSignalByDate();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("loadStockFileName", new loadStockFileName());
      processMap.put("loadTradeSignal", new loadTradeSignal());
      processMap.put("loadTradeSignalDays", new loadTradeSignalDays());
      processMap.put("loadTradeSignalSection", new loadTradeSignalSection());
      processMap.put("getLastTradeSignal", new getLastTradeSignal());
      processMap.put("readOneTradeSignal", new readOneTradeSignal());
      processMap.put("queryPageStrategyTradeRecord", new queryPageStrategyTradeRecord());
      processMap.put("queryStockRealtimeSignalList", new queryStockRealtimeSignalList());
      processMap.put("queryAverageProfitCurve", new queryAverageProfitCurve());
      processMap.put("querySumProfit", new querySumProfit());
      processMap.put("querySumProfitNew", new querySumProfitNew());
      processMap.put("heartBeat", new heartBeat());
      processMap.put("deleteSignalFile", new deleteSignalFile());
      processMap.put("countProfit", new countProfit());
      processMap.put("countfiveDay", new countfiveDay());
      processMap.put("countNowHoldStock", new countNowHoldStock());
      processMap.put("disReportData", new disReportData());
      processMap.put("findDnaStockHold", new findDnaStockHold());
      processMap.put("getLastTradeSignalByDate", new getLastTradeSignalByDate());
      processMap.put("getLastBuyTradeSignalByDate", new getLastBuyTradeSignalByDate());
      return processMap;
    }

    public static class loadStockFileName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadStockFileName_args> {
      public loadStockFileName() {
        super("loadStockFileName");
      }

      public loadStockFileName_args getEmptyArgsInstance() {
        return new loadStockFileName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadStockFileName_result getResult(I iface, loadStockFileName_args args) throws org.apache.thrift.TException {
        loadStockFileName_result result = new loadStockFileName_result();
        result.success = iface.loadStockFileName(args.strategyId);
        return result;
      }
    }

    public static class loadTradeSignal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadTradeSignal_args> {
      public loadTradeSignal() {
        super("loadTradeSignal");
      }

      public loadTradeSignal_args getEmptyArgsInstance() {
        return new loadTradeSignal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadTradeSignal_result getResult(I iface, loadTradeSignal_args args) throws org.apache.thrift.TException {
        loadTradeSignal_result result = new loadTradeSignal_result();
        result.success = iface.loadTradeSignal(args.strategyId, args.stocks);
        return result;
      }
    }

    public static class loadTradeSignalDays<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadTradeSignalDays_args> {
      public loadTradeSignalDays() {
        super("loadTradeSignalDays");
      }

      public loadTradeSignalDays_args getEmptyArgsInstance() {
        return new loadTradeSignalDays_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadTradeSignalDays_result getResult(I iface, loadTradeSignalDays_args args) throws org.apache.thrift.TException {
        loadTradeSignalDays_result result = new loadTradeSignalDays_result();
        result.success = iface.loadTradeSignalDays(args.strategyId, args.days, args.stocks);
        return result;
      }
    }

    public static class loadTradeSignalSection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadTradeSignalSection_args> {
      public loadTradeSignalSection() {
        super("loadTradeSignalSection");
      }

      public loadTradeSignalSection_args getEmptyArgsInstance() {
        return new loadTradeSignalSection_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadTradeSignalSection_result getResult(I iface, loadTradeSignalSection_args args) throws org.apache.thrift.TException {
        loadTradeSignalSection_result result = new loadTradeSignalSection_result();
        result.success = iface.loadTradeSignalSection(args.strategyId, args.startDate, args.endDate, args.stockCode);
        return result;
      }
    }

    public static class getLastTradeSignal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLastTradeSignal_args> {
      public getLastTradeSignal() {
        super("getLastTradeSignal");
      }

      public getLastTradeSignal_args getEmptyArgsInstance() {
        return new getLastTradeSignal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLastTradeSignal_result getResult(I iface, getLastTradeSignal_args args) throws org.apache.thrift.TException {
        getLastTradeSignal_result result = new getLastTradeSignal_result();
        result.success = iface.getLastTradeSignal(args.strategyId, args.stockCode);
        return result;
      }
    }

    public static class readOneTradeSignal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readOneTradeSignal_args> {
      public readOneTradeSignal() {
        super("readOneTradeSignal");
      }

      public readOneTradeSignal_args getEmptyArgsInstance() {
        return new readOneTradeSignal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public readOneTradeSignal_result getResult(I iface, readOneTradeSignal_args args) throws org.apache.thrift.TException {
        readOneTradeSignal_result result = new readOneTradeSignal_result();
        result.success = iface.readOneTradeSignal(args.strategyId, args.stockCode);
        return result;
      }
    }

    public static class queryPageStrategyTradeRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryPageStrategyTradeRecord_args> {
      public queryPageStrategyTradeRecord() {
        super("queryPageStrategyTradeRecord");
      }

      public queryPageStrategyTradeRecord_args getEmptyArgsInstance() {
        return new queryPageStrategyTradeRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryPageStrategyTradeRecord_result getResult(I iface, queryPageStrategyTradeRecord_args args) throws org.apache.thrift.TException {
        queryPageStrategyTradeRecord_result result = new queryPageStrategyTradeRecord_result();
        result.success = iface.queryPageStrategyTradeRecord(args.strategyId, args.userId, args.type, args.pageIndex, args.pageSize, args.stocks);
        return result;
      }
    }

    public static class queryStockRealtimeSignalList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryStockRealtimeSignalList_args> {
      public queryStockRealtimeSignalList() {
        super("queryStockRealtimeSignalList");
      }

      public queryStockRealtimeSignalList_args getEmptyArgsInstance() {
        return new queryStockRealtimeSignalList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryStockRealtimeSignalList_result getResult(I iface, queryStockRealtimeSignalList_args args) throws org.apache.thrift.TException {
        queryStockRealtimeSignalList_result result = new queryStockRealtimeSignalList_result();
        result.success = iface.queryStockRealtimeSignalList(args.strategyId, args.userId);
        return result;
      }
    }

    public static class queryAverageProfitCurve<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryAverageProfitCurve_args> {
      public queryAverageProfitCurve() {
        super("queryAverageProfitCurve");
      }

      public queryAverageProfitCurve_args getEmptyArgsInstance() {
        return new queryAverageProfitCurve_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryAverageProfitCurve_result getResult(I iface, queryAverageProfitCurve_args args) throws org.apache.thrift.TException {
        queryAverageProfitCurve_result result = new queryAverageProfitCurve_result();
        result.success = iface.queryAverageProfitCurve(args.strategyId, args.days, args.stocks);
        return result;
      }
    }

    public static class querySumProfit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySumProfit_args> {
      public querySumProfit() {
        super("querySumProfit");
      }

      public querySumProfit_args getEmptyArgsInstance() {
        return new querySumProfit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySumProfit_result getResult(I iface, querySumProfit_args args) throws org.apache.thrift.TException {
        querySumProfit_result result = new querySumProfit_result();
        result.success = iface.querySumProfit(args.strategyId, args.days, args.type, args.stocks);
        return result;
      }
    }

    public static class querySumProfitNew<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySumProfitNew_args> {
      public querySumProfitNew() {
        super("querySumProfitNew");
      }

      public querySumProfitNew_args getEmptyArgsInstance() {
        return new querySumProfitNew_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySumProfitNew_result getResult(I iface, querySumProfitNew_args args) throws org.apache.thrift.TException {
        querySumProfitNew_result result = new querySumProfitNew_result();
        result.success = iface.querySumProfitNew(args.strategyId, args.startDate, args.endDate, args.type, args.stocks);
        return result;
      }
    }

    public static class heartBeat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, heartBeat_args> {
      public heartBeat() {
        super("heartBeat");
      }

      public heartBeat_args getEmptyArgsInstance() {
        return new heartBeat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public heartBeat_result getResult(I iface, heartBeat_args args) throws org.apache.thrift.TException {
        heartBeat_result result = new heartBeat_result();
        result.success = iface.heartBeat();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteSignalFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSignalFile_args> {
      public deleteSignalFile() {
        super("deleteSignalFile");
      }

      public deleteSignalFile_args getEmptyArgsInstance() {
        return new deleteSignalFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteSignalFile_result getResult(I iface, deleteSignalFile_args args) throws org.apache.thrift.TException {
        deleteSignalFile_result result = new deleteSignalFile_result();
        result.success = iface.deleteSignalFile(args.strategyId);
        return result;
      }
    }

    public static class countProfit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countProfit_args> {
      public countProfit() {
        super("countProfit");
      }

      public countProfit_args getEmptyArgsInstance() {
        return new countProfit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countProfit_result getResult(I iface, countProfit_args args) throws org.apache.thrift.TException {
        countProfit_result result = new countProfit_result();
        result.success = iface.countProfit(args.strategyId, args.date);
        return result;
      }
    }

    public static class countfiveDay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countfiveDay_args> {
      public countfiveDay() {
        super("countfiveDay");
      }

      public countfiveDay_args getEmptyArgsInstance() {
        return new countfiveDay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countfiveDay_result getResult(I iface, countfiveDay_args args) throws org.apache.thrift.TException {
        countfiveDay_result result = new countfiveDay_result();
        result.success = iface.countfiveDay(args.strategyId, args.five);
        return result;
      }
    }

    public static class countNowHoldStock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countNowHoldStock_args> {
      public countNowHoldStock() {
        super("countNowHoldStock");
      }

      public countNowHoldStock_args getEmptyArgsInstance() {
        return new countNowHoldStock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countNowHoldStock_result getResult(I iface, countNowHoldStock_args args) throws org.apache.thrift.TException {
        countNowHoldStock_result result = new countNowHoldStock_result();
        result.success = iface.countNowHoldStock(args.strategyId, args.now);
        return result;
      }
    }

    public static class disReportData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, disReportData_args> {
      public disReportData() {
        super("disReportData");
      }

      public disReportData_args getEmptyArgsInstance() {
        return new disReportData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public disReportData_result getResult(I iface, disReportData_args args) throws org.apache.thrift.TException {
        disReportData_result result = new disReportData_result();
        result.success = iface.disReportData(args.strategyId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findDnaStockHold<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findDnaStockHold_args> {
      public findDnaStockHold() {
        super("findDnaStockHold");
      }

      public findDnaStockHold_args getEmptyArgsInstance() {
        return new findDnaStockHold_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findDnaStockHold_result getResult(I iface, findDnaStockHold_args args) throws org.apache.thrift.TException {
        findDnaStockHold_result result = new findDnaStockHold_result();
        result.success = iface.findDnaStockHold(args.stockCode, args.userId);
        return result;
      }
    }

    public static class getLastTradeSignalByDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLastTradeSignalByDate_args> {
      public getLastTradeSignalByDate() {
        super("getLastTradeSignalByDate");
      }

      public getLastTradeSignalByDate_args getEmptyArgsInstance() {
        return new getLastTradeSignalByDate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLastTradeSignalByDate_result getResult(I iface, getLastTradeSignalByDate_args args) throws org.apache.thrift.TException {
        getLastTradeSignalByDate_result result = new getLastTradeSignalByDate_result();
        result.success = iface.getLastTradeSignalByDate(args.strategyId, args.statDate, args.stockCode);
        return result;
      }
    }

    public static class getLastBuyTradeSignalByDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLastBuyTradeSignalByDate_args> {
      public getLastBuyTradeSignalByDate() {
        super("getLastBuyTradeSignalByDate");
      }

      public getLastBuyTradeSignalByDate_args getEmptyArgsInstance() {
        return new getLastBuyTradeSignalByDate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLastBuyTradeSignalByDate_result getResult(I iface, getLastBuyTradeSignalByDate_args args) throws org.apache.thrift.TException {
        getLastBuyTradeSignalByDate_result result = new getLastBuyTradeSignalByDate_result();
        result.success = iface.getLastBuyTradeSignalByDate(args.strategyId, args.statDate, args.stockCode);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("loadStockFileName", new loadStockFileName());
      processMap.put("loadTradeSignal", new loadTradeSignal());
      processMap.put("loadTradeSignalDays", new loadTradeSignalDays());
      processMap.put("loadTradeSignalSection", new loadTradeSignalSection());
      processMap.put("getLastTradeSignal", new getLastTradeSignal());
      processMap.put("readOneTradeSignal", new readOneTradeSignal());
      processMap.put("queryPageStrategyTradeRecord", new queryPageStrategyTradeRecord());
      processMap.put("queryStockRealtimeSignalList", new queryStockRealtimeSignalList());
      processMap.put("queryAverageProfitCurve", new queryAverageProfitCurve());
      processMap.put("querySumProfit", new querySumProfit());
      processMap.put("querySumProfitNew", new querySumProfitNew());
      processMap.put("heartBeat", new heartBeat());
      processMap.put("deleteSignalFile", new deleteSignalFile());
      processMap.put("countProfit", new countProfit());
      processMap.put("countfiveDay", new countfiveDay());
      processMap.put("countNowHoldStock", new countNowHoldStock());
      processMap.put("disReportData", new disReportData());
      processMap.put("findDnaStockHold", new findDnaStockHold());
      processMap.put("getLastTradeSignalByDate", new getLastTradeSignalByDate());
      processMap.put("getLastBuyTradeSignalByDate", new getLastBuyTradeSignalByDate());
      return processMap;
    }

    public static class loadStockFileName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadStockFileName_args, String> {
      public loadStockFileName() {
        super("loadStockFileName");
      }

      public loadStockFileName_args getEmptyArgsInstance() {
        return new loadStockFileName_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadStockFileName_result result = new loadStockFileName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadStockFileName_result result = new loadStockFileName_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadStockFileName_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadStockFileName(args.strategyId,resultHandler);
      }
    }

    public static class loadTradeSignal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadTradeSignal_args, String> {
      public loadTradeSignal() {
        super("loadTradeSignal");
      }

      public loadTradeSignal_args getEmptyArgsInstance() {
        return new loadTradeSignal_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadTradeSignal_result result = new loadTradeSignal_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadTradeSignal_result result = new loadTradeSignal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadTradeSignal_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadTradeSignal(args.strategyId, args.stocks,resultHandler);
      }
    }

    public static class loadTradeSignalDays<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadTradeSignalDays_args, String> {
      public loadTradeSignalDays() {
        super("loadTradeSignalDays");
      }

      public loadTradeSignalDays_args getEmptyArgsInstance() {
        return new loadTradeSignalDays_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadTradeSignalDays_result result = new loadTradeSignalDays_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadTradeSignalDays_result result = new loadTradeSignalDays_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadTradeSignalDays_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadTradeSignalDays(args.strategyId, args.days, args.stocks,resultHandler);
      }
    }

    public static class loadTradeSignalSection<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadTradeSignalSection_args, String> {
      public loadTradeSignalSection() {
        super("loadTradeSignalSection");
      }

      public loadTradeSignalSection_args getEmptyArgsInstance() {
        return new loadTradeSignalSection_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadTradeSignalSection_result result = new loadTradeSignalSection_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadTradeSignalSection_result result = new loadTradeSignalSection_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadTradeSignalSection_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadTradeSignalSection(args.strategyId, args.startDate, args.endDate, args.stockCode,resultHandler);
      }
    }

    public static class getLastTradeSignal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLastTradeSignal_args, String> {
      public getLastTradeSignal() {
        super("getLastTradeSignal");
      }

      public getLastTradeSignal_args getEmptyArgsInstance() {
        return new getLastTradeSignal_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getLastTradeSignal_result result = new getLastTradeSignal_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLastTradeSignal_result result = new getLastTradeSignal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLastTradeSignal_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getLastTradeSignal(args.strategyId, args.stockCode,resultHandler);
      }
    }

    public static class readOneTradeSignal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readOneTradeSignal_args, String> {
      public readOneTradeSignal() {
        super("readOneTradeSignal");
      }

      public readOneTradeSignal_args getEmptyArgsInstance() {
        return new readOneTradeSignal_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            readOneTradeSignal_result result = new readOneTradeSignal_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            readOneTradeSignal_result result = new readOneTradeSignal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readOneTradeSignal_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.readOneTradeSignal(args.strategyId, args.stockCode,resultHandler);
      }
    }

    public static class queryPageStrategyTradeRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryPageStrategyTradeRecord_args, String> {
      public queryPageStrategyTradeRecord() {
        super("queryPageStrategyTradeRecord");
      }

      public queryPageStrategyTradeRecord_args getEmptyArgsInstance() {
        return new queryPageStrategyTradeRecord_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryPageStrategyTradeRecord_result result = new queryPageStrategyTradeRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryPageStrategyTradeRecord_result result = new queryPageStrategyTradeRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryPageStrategyTradeRecord_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryPageStrategyTradeRecord(args.strategyId, args.userId, args.type, args.pageIndex, args.pageSize, args.stocks,resultHandler);
      }
    }

    public static class queryStockRealtimeSignalList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryStockRealtimeSignalList_args, String> {
      public queryStockRealtimeSignalList() {
        super("queryStockRealtimeSignalList");
      }

      public queryStockRealtimeSignalList_args getEmptyArgsInstance() {
        return new queryStockRealtimeSignalList_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryStockRealtimeSignalList_result result = new queryStockRealtimeSignalList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryStockRealtimeSignalList_result result = new queryStockRealtimeSignalList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryStockRealtimeSignalList_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryStockRealtimeSignalList(args.strategyId, args.userId,resultHandler);
      }
    }

    public static class queryAverageProfitCurve<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryAverageProfitCurve_args, String> {
      public queryAverageProfitCurve() {
        super("queryAverageProfitCurve");
      }

      public queryAverageProfitCurve_args getEmptyArgsInstance() {
        return new queryAverageProfitCurve_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryAverageProfitCurve_result result = new queryAverageProfitCurve_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryAverageProfitCurve_result result = new queryAverageProfitCurve_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryAverageProfitCurve_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryAverageProfitCurve(args.strategyId, args.days, args.stocks,resultHandler);
      }
    }

    public static class querySumProfit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySumProfit_args, String> {
      public querySumProfit() {
        super("querySumProfit");
      }

      public querySumProfit_args getEmptyArgsInstance() {
        return new querySumProfit_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            querySumProfit_result result = new querySumProfit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySumProfit_result result = new querySumProfit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySumProfit_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.querySumProfit(args.strategyId, args.days, args.type, args.stocks,resultHandler);
      }
    }

    public static class querySumProfitNew<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySumProfitNew_args, String> {
      public querySumProfitNew() {
        super("querySumProfitNew");
      }

      public querySumProfitNew_args getEmptyArgsInstance() {
        return new querySumProfitNew_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            querySumProfitNew_result result = new querySumProfitNew_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySumProfitNew_result result = new querySumProfitNew_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySumProfitNew_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.querySumProfitNew(args.strategyId, args.startDate, args.endDate, args.type, args.stocks,resultHandler);
      }
    }

    public static class heartBeat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, heartBeat_args, Integer> {
      public heartBeat() {
        super("heartBeat");
      }

      public heartBeat_args getEmptyArgsInstance() {
        return new heartBeat_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            heartBeat_result result = new heartBeat_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            heartBeat_result result = new heartBeat_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, heartBeat_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.heartBeat(resultHandler);
      }
    }

    public static class deleteSignalFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteSignalFile_args, String> {
      public deleteSignalFile() {
        super("deleteSignalFile");
      }

      public deleteSignalFile_args getEmptyArgsInstance() {
        return new deleteSignalFile_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            deleteSignalFile_result result = new deleteSignalFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteSignalFile_result result = new deleteSignalFile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteSignalFile_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.deleteSignalFile(args.strategyId,resultHandler);
      }
    }

    public static class countProfit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countProfit_args, String> {
      public countProfit() {
        super("countProfit");
      }

      public countProfit_args getEmptyArgsInstance() {
        return new countProfit_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            countProfit_result result = new countProfit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countProfit_result result = new countProfit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countProfit_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.countProfit(args.strategyId, args.date,resultHandler);
      }
    }

    public static class countfiveDay<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countfiveDay_args, String> {
      public countfiveDay() {
        super("countfiveDay");
      }

      public countfiveDay_args getEmptyArgsInstance() {
        return new countfiveDay_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            countfiveDay_result result = new countfiveDay_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countfiveDay_result result = new countfiveDay_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countfiveDay_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.countfiveDay(args.strategyId, args.five,resultHandler);
      }
    }

    public static class countNowHoldStock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countNowHoldStock_args, String> {
      public countNowHoldStock() {
        super("countNowHoldStock");
      }

      public countNowHoldStock_args getEmptyArgsInstance() {
        return new countNowHoldStock_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            countNowHoldStock_result result = new countNowHoldStock_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countNowHoldStock_result result = new countNowHoldStock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countNowHoldStock_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.countNowHoldStock(args.strategyId, args.now,resultHandler);
      }
    }

    public static class disReportData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, disReportData_args, Integer> {
      public disReportData() {
        super("disReportData");
      }

      public disReportData_args getEmptyArgsInstance() {
        return new disReportData_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            disReportData_result result = new disReportData_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            disReportData_result result = new disReportData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, disReportData_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.disReportData(args.strategyId,resultHandler);
      }
    }

    public static class findDnaStockHold<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findDnaStockHold_args, String> {
      public findDnaStockHold() {
        super("findDnaStockHold");
      }

      public findDnaStockHold_args getEmptyArgsInstance() {
        return new findDnaStockHold_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            findDnaStockHold_result result = new findDnaStockHold_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findDnaStockHold_result result = new findDnaStockHold_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findDnaStockHold_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.findDnaStockHold(args.stockCode, args.userId,resultHandler);
      }
    }

    public static class getLastTradeSignalByDate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLastTradeSignalByDate_args, String> {
      public getLastTradeSignalByDate() {
        super("getLastTradeSignalByDate");
      }

      public getLastTradeSignalByDate_args getEmptyArgsInstance() {
        return new getLastTradeSignalByDate_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getLastTradeSignalByDate_result result = new getLastTradeSignalByDate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLastTradeSignalByDate_result result = new getLastTradeSignalByDate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLastTradeSignalByDate_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getLastTradeSignalByDate(args.strategyId, args.statDate, args.stockCode,resultHandler);
      }
    }

    public static class getLastBuyTradeSignalByDate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLastBuyTradeSignalByDate_args, String> {
      public getLastBuyTradeSignalByDate() {
        super("getLastBuyTradeSignalByDate");
      }

      public getLastBuyTradeSignalByDate_args getEmptyArgsInstance() {
        return new getLastBuyTradeSignalByDate_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getLastBuyTradeSignalByDate_result result = new getLastBuyTradeSignalByDate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLastBuyTradeSignalByDate_result result = new getLastBuyTradeSignalByDate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLastBuyTradeSignalByDate_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getLastBuyTradeSignalByDate(args.strategyId, args.statDate, args.stockCode,resultHandler);
      }
    }

  }

  public static class loadStockFileName_args implements org.apache.thrift.TBase<loadStockFileName_args, loadStockFileName_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadStockFileName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadStockFileName_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadStockFileName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadStockFileName_argsTupleSchemeFactory());
    }

    public int strategyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadStockFileName_args.class, metaDataMap);
    }

    public loadStockFileName_args() {
    }

    public loadStockFileName_args(
      int strategyId)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadStockFileName_args(loadStockFileName_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
    }

    public loadStockFileName_args deepCopy() {
      return new loadStockFileName_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public loadStockFileName_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadStockFileName_args)
        return this.equals((loadStockFileName_args)that);
      return false;
    }

    public boolean equals(loadStockFileName_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadStockFileName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadStockFileName_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadStockFileName_argsStandardSchemeFactory implements SchemeFactory {
      public loadStockFileName_argsStandardScheme getScheme() {
        return new loadStockFileName_argsStandardScheme();
      }
    }

    private static class loadStockFileName_argsStandardScheme extends StandardScheme<loadStockFileName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadStockFileName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadStockFileName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadStockFileName_argsTupleSchemeFactory implements SchemeFactory {
      public loadStockFileName_argsTupleScheme getScheme() {
        return new loadStockFileName_argsTupleScheme();
      }
    }

    private static class loadStockFileName_argsTupleScheme extends TupleScheme<loadStockFileName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadStockFileName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadStockFileName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
      }
    }

  }

  public static class loadStockFileName_result implements org.apache.thrift.TBase<loadStockFileName_result, loadStockFileName_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadStockFileName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadStockFileName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadStockFileName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadStockFileName_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadStockFileName_result.class, metaDataMap);
    }

    public loadStockFileName_result() {
    }

    public loadStockFileName_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadStockFileName_result(loadStockFileName_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadStockFileName_result deepCopy() {
      return new loadStockFileName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadStockFileName_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadStockFileName_result)
        return this.equals((loadStockFileName_result)that);
      return false;
    }

    public boolean equals(loadStockFileName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadStockFileName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadStockFileName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadStockFileName_resultStandardSchemeFactory implements SchemeFactory {
      public loadStockFileName_resultStandardScheme getScheme() {
        return new loadStockFileName_resultStandardScheme();
      }
    }

    private static class loadStockFileName_resultStandardScheme extends StandardScheme<loadStockFileName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadStockFileName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadStockFileName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadStockFileName_resultTupleSchemeFactory implements SchemeFactory {
      public loadStockFileName_resultTupleScheme getScheme() {
        return new loadStockFileName_resultTupleScheme();
      }
    }

    private static class loadStockFileName_resultTupleScheme extends TupleScheme<loadStockFileName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadStockFileName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadStockFileName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadTradeSignal_args implements org.apache.thrift.TBase<loadTradeSignal_args, loadTradeSignal_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadTradeSignal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadTradeSignal_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("stocks", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadTradeSignal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadTradeSignal_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public String stocks; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      STOCKS((short)2, "stocks");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // STOCKS
            return STOCKS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCKS, new org.apache.thrift.meta_data.FieldMetaData("stocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadTradeSignal_args.class, metaDataMap);
    }

    public loadTradeSignal_args() {
    }

    public loadTradeSignal_args(
      int strategyId,
      String stocks)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.stocks = stocks;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadTradeSignal_args(loadTradeSignal_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      if (other.isSetStocks()) {
        this.stocks = other.stocks;
      }
    }

    public loadTradeSignal_args deepCopy() {
      return new loadTradeSignal_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      this.stocks = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public loadTradeSignal_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public String getStocks() {
      return this.stocks;
    }

    public loadTradeSignal_args setStocks(String stocks) {
      this.stocks = stocks;
      return this;
    }

    public void unsetStocks() {
      this.stocks = null;
    }

    /** Returns true if field stocks is set (has been assigned a value) and false otherwise */
    public boolean isSetStocks() {
      return this.stocks != null;
    }

    public void setStocksIsSet(boolean value) {
      if (!value) {
        this.stocks = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case STOCKS:
        if (value == null) {
          unsetStocks();
        } else {
          setStocks((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case STOCKS:
        return getStocks();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case STOCKS:
        return isSetStocks();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadTradeSignal_args)
        return this.equals((loadTradeSignal_args)that);
      return false;
    }

    public boolean equals(loadTradeSignal_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_stocks = true && this.isSetStocks();
      boolean that_present_stocks = true && that.isSetStocks();
      if (this_present_stocks || that_present_stocks) {
        if (!(this_present_stocks && that_present_stocks))
          return false;
        if (!this.stocks.equals(that.stocks))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_stocks = true && (isSetStocks());
      list.add(present_stocks);
      if (present_stocks)
        list.add(stocks);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadTradeSignal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStocks()).compareTo(other.isSetStocks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStocks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stocks, other.stocks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadTradeSignal_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stocks:");
      if (this.stocks == null) {
        sb.append("null");
      } else {
        sb.append(this.stocks);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadTradeSignal_argsStandardSchemeFactory implements SchemeFactory {
      public loadTradeSignal_argsStandardScheme getScheme() {
        return new loadTradeSignal_argsStandardScheme();
      }
    }

    private static class loadTradeSignal_argsStandardScheme extends StandardScheme<loadTradeSignal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadTradeSignal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOCKS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stocks = iprot.readString();
                struct.setStocksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadTradeSignal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        if (struct.stocks != null) {
          oprot.writeFieldBegin(STOCKS_FIELD_DESC);
          oprot.writeString(struct.stocks);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadTradeSignal_argsTupleSchemeFactory implements SchemeFactory {
      public loadTradeSignal_argsTupleScheme getScheme() {
        return new loadTradeSignal_argsTupleScheme();
      }
    }

    private static class loadTradeSignal_argsTupleScheme extends TupleScheme<loadTradeSignal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadTradeSignal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetStocks()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStocks()) {
          oprot.writeString(struct.stocks);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadTradeSignal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stocks = iprot.readString();
          struct.setStocksIsSet(true);
        }
      }
    }

  }

  public static class loadTradeSignal_result implements org.apache.thrift.TBase<loadTradeSignal_result, loadTradeSignal_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadTradeSignal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadTradeSignal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadTradeSignal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadTradeSignal_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadTradeSignal_result.class, metaDataMap);
    }

    public loadTradeSignal_result() {
    }

    public loadTradeSignal_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadTradeSignal_result(loadTradeSignal_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadTradeSignal_result deepCopy() {
      return new loadTradeSignal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadTradeSignal_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadTradeSignal_result)
        return this.equals((loadTradeSignal_result)that);
      return false;
    }

    public boolean equals(loadTradeSignal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadTradeSignal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadTradeSignal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadTradeSignal_resultStandardSchemeFactory implements SchemeFactory {
      public loadTradeSignal_resultStandardScheme getScheme() {
        return new loadTradeSignal_resultStandardScheme();
      }
    }

    private static class loadTradeSignal_resultStandardScheme extends StandardScheme<loadTradeSignal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadTradeSignal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadTradeSignal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadTradeSignal_resultTupleSchemeFactory implements SchemeFactory {
      public loadTradeSignal_resultTupleScheme getScheme() {
        return new loadTradeSignal_resultTupleScheme();
      }
    }

    private static class loadTradeSignal_resultTupleScheme extends TupleScheme<loadTradeSignal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadTradeSignal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadTradeSignal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadTradeSignalDays_args implements org.apache.thrift.TBase<loadTradeSignalDays_args, loadTradeSignalDays_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadTradeSignalDays_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadTradeSignalDays_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("days", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField STOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("stocks", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadTradeSignalDays_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadTradeSignalDays_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public int days; // required
    public String stocks; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      DAYS((short)2, "days"),
      STOCKS((short)3, "stocks");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // DAYS
            return DAYS;
          case 3: // STOCKS
            return STOCKS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private static final int __DAYS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DAYS, new org.apache.thrift.meta_data.FieldMetaData("days", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCKS, new org.apache.thrift.meta_data.FieldMetaData("stocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadTradeSignalDays_args.class, metaDataMap);
    }

    public loadTradeSignalDays_args() {
    }

    public loadTradeSignalDays_args(
      int strategyId,
      int days,
      String stocks)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.days = days;
      setDaysIsSet(true);
      this.stocks = stocks;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadTradeSignalDays_args(loadTradeSignalDays_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      this.days = other.days;
      if (other.isSetStocks()) {
        this.stocks = other.stocks;
      }
    }

    public loadTradeSignalDays_args deepCopy() {
      return new loadTradeSignalDays_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setDaysIsSet(false);
      this.days = 0;
      this.stocks = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public loadTradeSignalDays_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public int getDays() {
      return this.days;
    }

    public loadTradeSignalDays_args setDays(int days) {
      this.days = days;
      setDaysIsSet(true);
      return this;
    }

    public void unsetDays() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAYS_ISSET_ID);
    }

    /** Returns true if field days is set (has been assigned a value) and false otherwise */
    public boolean isSetDays() {
      return EncodingUtils.testBit(__isset_bitfield, __DAYS_ISSET_ID);
    }

    public void setDaysIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAYS_ISSET_ID, value);
    }

    public String getStocks() {
      return this.stocks;
    }

    public loadTradeSignalDays_args setStocks(String stocks) {
      this.stocks = stocks;
      return this;
    }

    public void unsetStocks() {
      this.stocks = null;
    }

    /** Returns true if field stocks is set (has been assigned a value) and false otherwise */
    public boolean isSetStocks() {
      return this.stocks != null;
    }

    public void setStocksIsSet(boolean value) {
      if (!value) {
        this.stocks = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case DAYS:
        if (value == null) {
          unsetDays();
        } else {
          setDays((Integer)value);
        }
        break;

      case STOCKS:
        if (value == null) {
          unsetStocks();
        } else {
          setStocks((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case DAYS:
        return getDays();

      case STOCKS:
        return getStocks();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case DAYS:
        return isSetDays();
      case STOCKS:
        return isSetStocks();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadTradeSignalDays_args)
        return this.equals((loadTradeSignalDays_args)that);
      return false;
    }

    public boolean equals(loadTradeSignalDays_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_days = true;
      boolean that_present_days = true;
      if (this_present_days || that_present_days) {
        if (!(this_present_days && that_present_days))
          return false;
        if (this.days != that.days)
          return false;
      }

      boolean this_present_stocks = true && this.isSetStocks();
      boolean that_present_stocks = true && that.isSetStocks();
      if (this_present_stocks || that_present_stocks) {
        if (!(this_present_stocks && that_present_stocks))
          return false;
        if (!this.stocks.equals(that.stocks))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_days = true;
      list.add(present_days);
      if (present_days)
        list.add(days);

      boolean present_stocks = true && (isSetStocks());
      list.add(present_stocks);
      if (present_stocks)
        list.add(stocks);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadTradeSignalDays_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDays()).compareTo(other.isSetDays());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDays()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.days, other.days);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStocks()).compareTo(other.isSetStocks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStocks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stocks, other.stocks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadTradeSignalDays_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("days:");
      sb.append(this.days);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stocks:");
      if (this.stocks == null) {
        sb.append("null");
      } else {
        sb.append(this.stocks);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadTradeSignalDays_argsStandardSchemeFactory implements SchemeFactory {
      public loadTradeSignalDays_argsStandardScheme getScheme() {
        return new loadTradeSignalDays_argsStandardScheme();
      }
    }

    private static class loadTradeSignalDays_argsStandardScheme extends StandardScheme<loadTradeSignalDays_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadTradeSignalDays_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DAYS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.days = iprot.readI32();
                struct.setDaysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STOCKS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stocks = iprot.readString();
                struct.setStocksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadTradeSignalDays_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DAYS_FIELD_DESC);
        oprot.writeI32(struct.days);
        oprot.writeFieldEnd();
        if (struct.stocks != null) {
          oprot.writeFieldBegin(STOCKS_FIELD_DESC);
          oprot.writeString(struct.stocks);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadTradeSignalDays_argsTupleSchemeFactory implements SchemeFactory {
      public loadTradeSignalDays_argsTupleScheme getScheme() {
        return new loadTradeSignalDays_argsTupleScheme();
      }
    }

    private static class loadTradeSignalDays_argsTupleScheme extends TupleScheme<loadTradeSignalDays_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadTradeSignalDays_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetDays()) {
          optionals.set(1);
        }
        if (struct.isSetStocks()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetDays()) {
          oprot.writeI32(struct.days);
        }
        if (struct.isSetStocks()) {
          oprot.writeString(struct.stocks);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadTradeSignalDays_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.days = iprot.readI32();
          struct.setDaysIsSet(true);
        }
        if (incoming.get(2)) {
          struct.stocks = iprot.readString();
          struct.setStocksIsSet(true);
        }
      }
    }

  }

  public static class loadTradeSignalDays_result implements org.apache.thrift.TBase<loadTradeSignalDays_result, loadTradeSignalDays_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadTradeSignalDays_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadTradeSignalDays_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadTradeSignalDays_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadTradeSignalDays_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadTradeSignalDays_result.class, metaDataMap);
    }

    public loadTradeSignalDays_result() {
    }

    public loadTradeSignalDays_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadTradeSignalDays_result(loadTradeSignalDays_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadTradeSignalDays_result deepCopy() {
      return new loadTradeSignalDays_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadTradeSignalDays_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadTradeSignalDays_result)
        return this.equals((loadTradeSignalDays_result)that);
      return false;
    }

    public boolean equals(loadTradeSignalDays_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadTradeSignalDays_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadTradeSignalDays_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadTradeSignalDays_resultStandardSchemeFactory implements SchemeFactory {
      public loadTradeSignalDays_resultStandardScheme getScheme() {
        return new loadTradeSignalDays_resultStandardScheme();
      }
    }

    private static class loadTradeSignalDays_resultStandardScheme extends StandardScheme<loadTradeSignalDays_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadTradeSignalDays_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadTradeSignalDays_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadTradeSignalDays_resultTupleSchemeFactory implements SchemeFactory {
      public loadTradeSignalDays_resultTupleScheme getScheme() {
        return new loadTradeSignalDays_resultTupleScheme();
      }
    }

    private static class loadTradeSignalDays_resultTupleScheme extends TupleScheme<loadTradeSignalDays_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadTradeSignalDays_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadTradeSignalDays_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadTradeSignalSection_args implements org.apache.thrift.TBase<loadTradeSignalSection_args, loadTradeSignalSection_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadTradeSignalSection_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadTradeSignalSection_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField STOCK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stockCode", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadTradeSignalSection_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadTradeSignalSection_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public long startDate; // required
    public long endDate; // required
    public String stockCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      START_DATE((short)2, "startDate"),
      END_DATE((short)3, "endDate"),
      STOCK_CODE((short)4, "stockCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // START_DATE
            return START_DATE;
          case 3: // END_DATE
            return END_DATE;
          case 4: // STOCK_CODE
            return STOCK_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private static final int __STARTDATE_ISSET_ID = 1;
    private static final int __ENDDATE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.STOCK_CODE, new org.apache.thrift.meta_data.FieldMetaData("stockCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadTradeSignalSection_args.class, metaDataMap);
    }

    public loadTradeSignalSection_args() {
    }

    public loadTradeSignalSection_args(
      int strategyId,
      long startDate,
      long endDate,
      String stockCode)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.startDate = startDate;
      setStartDateIsSet(true);
      this.endDate = endDate;
      setEndDateIsSet(true);
      this.stockCode = stockCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadTradeSignalSection_args(loadTradeSignalSection_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      this.startDate = other.startDate;
      this.endDate = other.endDate;
      if (other.isSetStockCode()) {
        this.stockCode = other.stockCode;
      }
    }

    public loadTradeSignalSection_args deepCopy() {
      return new loadTradeSignalSection_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setStartDateIsSet(false);
      this.startDate = 0;
      setEndDateIsSet(false);
      this.endDate = 0;
      this.stockCode = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public loadTradeSignalSection_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public long getStartDate() {
      return this.startDate;
    }

    public loadTradeSignalSection_args setStartDate(long startDate) {
      this.startDate = startDate;
      setStartDateIsSet(true);
      return this;
    }

    public void unsetStartDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTDATE_ISSET_ID);
    }

    /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
    public boolean isSetStartDate() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTDATE_ISSET_ID);
    }

    public void setStartDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTDATE_ISSET_ID, value);
    }

    public long getEndDate() {
      return this.endDate;
    }

    public loadTradeSignalSection_args setEndDate(long endDate) {
      this.endDate = endDate;
      setEndDateIsSet(true);
      return this;
    }

    public void unsetEndDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
    public boolean isSetEndDate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEndDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public String getStockCode() {
      return this.stockCode;
    }

    public loadTradeSignalSection_args setStockCode(String stockCode) {
      this.stockCode = stockCode;
      return this;
    }

    public void unsetStockCode() {
      this.stockCode = null;
    }

    /** Returns true if field stockCode is set (has been assigned a value) and false otherwise */
    public boolean isSetStockCode() {
      return this.stockCode != null;
    }

    public void setStockCodeIsSet(boolean value) {
      if (!value) {
        this.stockCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case START_DATE:
        if (value == null) {
          unsetStartDate();
        } else {
          setStartDate((Long)value);
        }
        break;

      case END_DATE:
        if (value == null) {
          unsetEndDate();
        } else {
          setEndDate((Long)value);
        }
        break;

      case STOCK_CODE:
        if (value == null) {
          unsetStockCode();
        } else {
          setStockCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case START_DATE:
        return getStartDate();

      case END_DATE:
        return getEndDate();

      case STOCK_CODE:
        return getStockCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case START_DATE:
        return isSetStartDate();
      case END_DATE:
        return isSetEndDate();
      case STOCK_CODE:
        return isSetStockCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadTradeSignalSection_args)
        return this.equals((loadTradeSignalSection_args)that);
      return false;
    }

    public boolean equals(loadTradeSignalSection_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_startDate = true;
      boolean that_present_startDate = true;
      if (this_present_startDate || that_present_startDate) {
        if (!(this_present_startDate && that_present_startDate))
          return false;
        if (this.startDate != that.startDate)
          return false;
      }

      boolean this_present_endDate = true;
      boolean that_present_endDate = true;
      if (this_present_endDate || that_present_endDate) {
        if (!(this_present_endDate && that_present_endDate))
          return false;
        if (this.endDate != that.endDate)
          return false;
      }

      boolean this_present_stockCode = true && this.isSetStockCode();
      boolean that_present_stockCode = true && that.isSetStockCode();
      if (this_present_stockCode || that_present_stockCode) {
        if (!(this_present_stockCode && that_present_stockCode))
          return false;
        if (!this.stockCode.equals(that.stockCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_startDate = true;
      list.add(present_startDate);
      if (present_startDate)
        list.add(startDate);

      boolean present_endDate = true;
      list.add(present_endDate);
      if (present_endDate)
        list.add(endDate);

      boolean present_stockCode = true && (isSetStockCode());
      list.add(present_stockCode);
      if (present_stockCode)
        list.add(stockCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadTradeSignalSection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStockCode()).compareTo(other.isSetStockCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStockCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockCode, other.stockCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadTradeSignalSection_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startDate:");
      sb.append(this.startDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endDate:");
      sb.append(this.endDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stockCode:");
      if (this.stockCode == null) {
        sb.append("null");
      } else {
        sb.append(this.stockCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadTradeSignalSection_argsStandardSchemeFactory implements SchemeFactory {
      public loadTradeSignalSection_argsStandardScheme getScheme() {
        return new loadTradeSignalSection_argsStandardScheme();
      }
    }

    private static class loadTradeSignalSection_argsStandardScheme extends StandardScheme<loadTradeSignalSection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadTradeSignalSection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startDate = iprot.readI64();
                struct.setStartDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // END_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endDate = iprot.readI64();
                struct.setEndDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // STOCK_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stockCode = iprot.readString();
                struct.setStockCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadTradeSignalSection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeI64(struct.startDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeI64(struct.endDate);
        oprot.writeFieldEnd();
        if (struct.stockCode != null) {
          oprot.writeFieldBegin(STOCK_CODE_FIELD_DESC);
          oprot.writeString(struct.stockCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadTradeSignalSection_argsTupleSchemeFactory implements SchemeFactory {
      public loadTradeSignalSection_argsTupleScheme getScheme() {
        return new loadTradeSignalSection_argsTupleScheme();
      }
    }

    private static class loadTradeSignalSection_argsTupleScheme extends TupleScheme<loadTradeSignalSection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadTradeSignalSection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetStartDate()) {
          optionals.set(1);
        }
        if (struct.isSetEndDate()) {
          optionals.set(2);
        }
        if (struct.isSetStockCode()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStartDate()) {
          oprot.writeI64(struct.startDate);
        }
        if (struct.isSetEndDate()) {
          oprot.writeI64(struct.endDate);
        }
        if (struct.isSetStockCode()) {
          oprot.writeString(struct.stockCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadTradeSignalSection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.startDate = iprot.readI64();
          struct.setStartDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.endDate = iprot.readI64();
          struct.setEndDateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.stockCode = iprot.readString();
          struct.setStockCodeIsSet(true);
        }
      }
    }

  }

  public static class loadTradeSignalSection_result implements org.apache.thrift.TBase<loadTradeSignalSection_result, loadTradeSignalSection_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadTradeSignalSection_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadTradeSignalSection_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadTradeSignalSection_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadTradeSignalSection_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadTradeSignalSection_result.class, metaDataMap);
    }

    public loadTradeSignalSection_result() {
    }

    public loadTradeSignalSection_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadTradeSignalSection_result(loadTradeSignalSection_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadTradeSignalSection_result deepCopy() {
      return new loadTradeSignalSection_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadTradeSignalSection_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadTradeSignalSection_result)
        return this.equals((loadTradeSignalSection_result)that);
      return false;
    }

    public boolean equals(loadTradeSignalSection_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadTradeSignalSection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadTradeSignalSection_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadTradeSignalSection_resultStandardSchemeFactory implements SchemeFactory {
      public loadTradeSignalSection_resultStandardScheme getScheme() {
        return new loadTradeSignalSection_resultStandardScheme();
      }
    }

    private static class loadTradeSignalSection_resultStandardScheme extends StandardScheme<loadTradeSignalSection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadTradeSignalSection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadTradeSignalSection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadTradeSignalSection_resultTupleSchemeFactory implements SchemeFactory {
      public loadTradeSignalSection_resultTupleScheme getScheme() {
        return new loadTradeSignalSection_resultTupleScheme();
      }
    }

    private static class loadTradeSignalSection_resultTupleScheme extends TupleScheme<loadTradeSignalSection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadTradeSignalSection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadTradeSignalSection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLastTradeSignal_args implements org.apache.thrift.TBase<getLastTradeSignal_args, getLastTradeSignal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLastTradeSignal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLastTradeSignal_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STOCK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stockCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLastTradeSignal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLastTradeSignal_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public String stockCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      STOCK_CODE((short)2, "stockCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // STOCK_CODE
            return STOCK_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCK_CODE, new org.apache.thrift.meta_data.FieldMetaData("stockCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLastTradeSignal_args.class, metaDataMap);
    }

    public getLastTradeSignal_args() {
    }

    public getLastTradeSignal_args(
      int strategyId,
      String stockCode)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.stockCode = stockCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastTradeSignal_args(getLastTradeSignal_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      if (other.isSetStockCode()) {
        this.stockCode = other.stockCode;
      }
    }

    public getLastTradeSignal_args deepCopy() {
      return new getLastTradeSignal_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      this.stockCode = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public getLastTradeSignal_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public String getStockCode() {
      return this.stockCode;
    }

    public getLastTradeSignal_args setStockCode(String stockCode) {
      this.stockCode = stockCode;
      return this;
    }

    public void unsetStockCode() {
      this.stockCode = null;
    }

    /** Returns true if field stockCode is set (has been assigned a value) and false otherwise */
    public boolean isSetStockCode() {
      return this.stockCode != null;
    }

    public void setStockCodeIsSet(boolean value) {
      if (!value) {
        this.stockCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case STOCK_CODE:
        if (value == null) {
          unsetStockCode();
        } else {
          setStockCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case STOCK_CODE:
        return getStockCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case STOCK_CODE:
        return isSetStockCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastTradeSignal_args)
        return this.equals((getLastTradeSignal_args)that);
      return false;
    }

    public boolean equals(getLastTradeSignal_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_stockCode = true && this.isSetStockCode();
      boolean that_present_stockCode = true && that.isSetStockCode();
      if (this_present_stockCode || that_present_stockCode) {
        if (!(this_present_stockCode && that_present_stockCode))
          return false;
        if (!this.stockCode.equals(that.stockCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_stockCode = true && (isSetStockCode());
      list.add(present_stockCode);
      if (present_stockCode)
        list.add(stockCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLastTradeSignal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStockCode()).compareTo(other.isSetStockCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStockCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockCode, other.stockCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLastTradeSignal_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stockCode:");
      if (this.stockCode == null) {
        sb.append("null");
      } else {
        sb.append(this.stockCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLastTradeSignal_argsStandardSchemeFactory implements SchemeFactory {
      public getLastTradeSignal_argsStandardScheme getScheme() {
        return new getLastTradeSignal_argsStandardScheme();
      }
    }

    private static class getLastTradeSignal_argsStandardScheme extends StandardScheme<getLastTradeSignal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLastTradeSignal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOCK_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stockCode = iprot.readString();
                struct.setStockCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLastTradeSignal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        if (struct.stockCode != null) {
          oprot.writeFieldBegin(STOCK_CODE_FIELD_DESC);
          oprot.writeString(struct.stockCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLastTradeSignal_argsTupleSchemeFactory implements SchemeFactory {
      public getLastTradeSignal_argsTupleScheme getScheme() {
        return new getLastTradeSignal_argsTupleScheme();
      }
    }

    private static class getLastTradeSignal_argsTupleScheme extends TupleScheme<getLastTradeSignal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLastTradeSignal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetStockCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStockCode()) {
          oprot.writeString(struct.stockCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLastTradeSignal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stockCode = iprot.readString();
          struct.setStockCodeIsSet(true);
        }
      }
    }

  }

  public static class getLastTradeSignal_result implements org.apache.thrift.TBase<getLastTradeSignal_result, getLastTradeSignal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLastTradeSignal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLastTradeSignal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLastTradeSignal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLastTradeSignal_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLastTradeSignal_result.class, metaDataMap);
    }

    public getLastTradeSignal_result() {
    }

    public getLastTradeSignal_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastTradeSignal_result(getLastTradeSignal_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getLastTradeSignal_result deepCopy() {
      return new getLastTradeSignal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getLastTradeSignal_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastTradeSignal_result)
        return this.equals((getLastTradeSignal_result)that);
      return false;
    }

    public boolean equals(getLastTradeSignal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLastTradeSignal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLastTradeSignal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLastTradeSignal_resultStandardSchemeFactory implements SchemeFactory {
      public getLastTradeSignal_resultStandardScheme getScheme() {
        return new getLastTradeSignal_resultStandardScheme();
      }
    }

    private static class getLastTradeSignal_resultStandardScheme extends StandardScheme<getLastTradeSignal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLastTradeSignal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLastTradeSignal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLastTradeSignal_resultTupleSchemeFactory implements SchemeFactory {
      public getLastTradeSignal_resultTupleScheme getScheme() {
        return new getLastTradeSignal_resultTupleScheme();
      }
    }

    private static class getLastTradeSignal_resultTupleScheme extends TupleScheme<getLastTradeSignal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLastTradeSignal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLastTradeSignal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class readOneTradeSignal_args implements org.apache.thrift.TBase<readOneTradeSignal_args, readOneTradeSignal_args._Fields>, java.io.Serializable, Cloneable, Comparable<readOneTradeSignal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readOneTradeSignal_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STOCK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stockCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readOneTradeSignal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readOneTradeSignal_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public String stockCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      STOCK_CODE((short)2, "stockCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // STOCK_CODE
            return STOCK_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCK_CODE, new org.apache.thrift.meta_data.FieldMetaData("stockCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readOneTradeSignal_args.class, metaDataMap);
    }

    public readOneTradeSignal_args() {
    }

    public readOneTradeSignal_args(
      int strategyId,
      String stockCode)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.stockCode = stockCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readOneTradeSignal_args(readOneTradeSignal_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      if (other.isSetStockCode()) {
        this.stockCode = other.stockCode;
      }
    }

    public readOneTradeSignal_args deepCopy() {
      return new readOneTradeSignal_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      this.stockCode = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public readOneTradeSignal_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public String getStockCode() {
      return this.stockCode;
    }

    public readOneTradeSignal_args setStockCode(String stockCode) {
      this.stockCode = stockCode;
      return this;
    }

    public void unsetStockCode() {
      this.stockCode = null;
    }

    /** Returns true if field stockCode is set (has been assigned a value) and false otherwise */
    public boolean isSetStockCode() {
      return this.stockCode != null;
    }

    public void setStockCodeIsSet(boolean value) {
      if (!value) {
        this.stockCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case STOCK_CODE:
        if (value == null) {
          unsetStockCode();
        } else {
          setStockCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case STOCK_CODE:
        return getStockCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case STOCK_CODE:
        return isSetStockCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readOneTradeSignal_args)
        return this.equals((readOneTradeSignal_args)that);
      return false;
    }

    public boolean equals(readOneTradeSignal_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_stockCode = true && this.isSetStockCode();
      boolean that_present_stockCode = true && that.isSetStockCode();
      if (this_present_stockCode || that_present_stockCode) {
        if (!(this_present_stockCode && that_present_stockCode))
          return false;
        if (!this.stockCode.equals(that.stockCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_stockCode = true && (isSetStockCode());
      list.add(present_stockCode);
      if (present_stockCode)
        list.add(stockCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(readOneTradeSignal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStockCode()).compareTo(other.isSetStockCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStockCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockCode, other.stockCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readOneTradeSignal_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stockCode:");
      if (this.stockCode == null) {
        sb.append("null");
      } else {
        sb.append(this.stockCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readOneTradeSignal_argsStandardSchemeFactory implements SchemeFactory {
      public readOneTradeSignal_argsStandardScheme getScheme() {
        return new readOneTradeSignal_argsStandardScheme();
      }
    }

    private static class readOneTradeSignal_argsStandardScheme extends StandardScheme<readOneTradeSignal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readOneTradeSignal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOCK_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stockCode = iprot.readString();
                struct.setStockCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readOneTradeSignal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        if (struct.stockCode != null) {
          oprot.writeFieldBegin(STOCK_CODE_FIELD_DESC);
          oprot.writeString(struct.stockCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readOneTradeSignal_argsTupleSchemeFactory implements SchemeFactory {
      public readOneTradeSignal_argsTupleScheme getScheme() {
        return new readOneTradeSignal_argsTupleScheme();
      }
    }

    private static class readOneTradeSignal_argsTupleScheme extends TupleScheme<readOneTradeSignal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readOneTradeSignal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetStockCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStockCode()) {
          oprot.writeString(struct.stockCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readOneTradeSignal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stockCode = iprot.readString();
          struct.setStockCodeIsSet(true);
        }
      }
    }

  }

  public static class readOneTradeSignal_result implements org.apache.thrift.TBase<readOneTradeSignal_result, readOneTradeSignal_result._Fields>, java.io.Serializable, Cloneable, Comparable<readOneTradeSignal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readOneTradeSignal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readOneTradeSignal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readOneTradeSignal_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readOneTradeSignal_result.class, metaDataMap);
    }

    public readOneTradeSignal_result() {
    }

    public readOneTradeSignal_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readOneTradeSignal_result(readOneTradeSignal_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public readOneTradeSignal_result deepCopy() {
      return new readOneTradeSignal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public readOneTradeSignal_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readOneTradeSignal_result)
        return this.equals((readOneTradeSignal_result)that);
      return false;
    }

    public boolean equals(readOneTradeSignal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(readOneTradeSignal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readOneTradeSignal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readOneTradeSignal_resultStandardSchemeFactory implements SchemeFactory {
      public readOneTradeSignal_resultStandardScheme getScheme() {
        return new readOneTradeSignal_resultStandardScheme();
      }
    }

    private static class readOneTradeSignal_resultStandardScheme extends StandardScheme<readOneTradeSignal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readOneTradeSignal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readOneTradeSignal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readOneTradeSignal_resultTupleSchemeFactory implements SchemeFactory {
      public readOneTradeSignal_resultTupleScheme getScheme() {
        return new readOneTradeSignal_resultTupleScheme();
      }
    }

    private static class readOneTradeSignal_resultTupleScheme extends TupleScheme<readOneTradeSignal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readOneTradeSignal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readOneTradeSignal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryPageStrategyTradeRecord_args implements org.apache.thrift.TBase<queryPageStrategyTradeRecord_args, queryPageStrategyTradeRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryPageStrategyTradeRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPageStrategyTradeRecord_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("pageIndex", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField STOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("stocks", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPageStrategyTradeRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPageStrategyTradeRecord_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public int userId; // required
    public int type; // required
    public int pageIndex; // required
    public int pageSize; // required
    public String stocks; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      USER_ID((short)2, "userId"),
      TYPE((short)3, "type"),
      PAGE_INDEX((short)4, "pageIndex"),
      PAGE_SIZE((short)5, "pageSize"),
      STOCKS((short)6, "stocks");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // TYPE
            return TYPE;
          case 4: // PAGE_INDEX
            return PAGE_INDEX;
          case 5: // PAGE_SIZE
            return PAGE_SIZE;
          case 6: // STOCKS
            return STOCKS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private static final int __USERID_ISSET_ID = 1;
    private static final int __TYPE_ISSET_ID = 2;
    private static final int __PAGEINDEX_ISSET_ID = 3;
    private static final int __PAGESIZE_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("pageIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCKS, new org.apache.thrift.meta_data.FieldMetaData("stocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPageStrategyTradeRecord_args.class, metaDataMap);
    }

    public queryPageStrategyTradeRecord_args() {
    }

    public queryPageStrategyTradeRecord_args(
      int strategyId,
      int userId,
      int type,
      int pageIndex,
      int pageSize,
      String stocks)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.userId = userId;
      setUserIdIsSet(true);
      this.type = type;
      setTypeIsSet(true);
      this.pageIndex = pageIndex;
      setPageIndexIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.stocks = stocks;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPageStrategyTradeRecord_args(queryPageStrategyTradeRecord_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      this.userId = other.userId;
      this.type = other.type;
      this.pageIndex = other.pageIndex;
      this.pageSize = other.pageSize;
      if (other.isSetStocks()) {
        this.stocks = other.stocks;
      }
    }

    public queryPageStrategyTradeRecord_args deepCopy() {
      return new queryPageStrategyTradeRecord_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setUserIdIsSet(false);
      this.userId = 0;
      setTypeIsSet(false);
      this.type = 0;
      setPageIndexIsSet(false);
      this.pageIndex = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      this.stocks = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public queryPageStrategyTradeRecord_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public int getUserId() {
      return this.userId;
    }

    public queryPageStrategyTradeRecord_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getType() {
      return this.type;
    }

    public queryPageStrategyTradeRecord_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public int getPageIndex() {
      return this.pageIndex;
    }

    public queryPageStrategyTradeRecord_args setPageIndex(int pageIndex) {
      this.pageIndex = pageIndex;
      setPageIndexIsSet(true);
      return this;
    }

    public void unsetPageIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
    }

    /** Returns true if field pageIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetPageIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
    }

    public void setPageIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGEINDEX_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public queryPageStrategyTradeRecord_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public String getStocks() {
      return this.stocks;
    }

    public queryPageStrategyTradeRecord_args setStocks(String stocks) {
      this.stocks = stocks;
      return this;
    }

    public void unsetStocks() {
      this.stocks = null;
    }

    /** Returns true if field stocks is set (has been assigned a value) and false otherwise */
    public boolean isSetStocks() {
      return this.stocks != null;
    }

    public void setStocksIsSet(boolean value) {
      if (!value) {
        this.stocks = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case PAGE_INDEX:
        if (value == null) {
          unsetPageIndex();
        } else {
          setPageIndex((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      case STOCKS:
        if (value == null) {
          unsetStocks();
        } else {
          setStocks((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case USER_ID:
        return getUserId();

      case TYPE:
        return getType();

      case PAGE_INDEX:
        return getPageIndex();

      case PAGE_SIZE:
        return getPageSize();

      case STOCKS:
        return getStocks();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case USER_ID:
        return isSetUserId();
      case TYPE:
        return isSetType();
      case PAGE_INDEX:
        return isSetPageIndex();
      case PAGE_SIZE:
        return isSetPageSize();
      case STOCKS:
        return isSetStocks();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPageStrategyTradeRecord_args)
        return this.equals((queryPageStrategyTradeRecord_args)that);
      return false;
    }

    public boolean equals(queryPageStrategyTradeRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_pageIndex = true;
      boolean that_present_pageIndex = true;
      if (this_present_pageIndex || that_present_pageIndex) {
        if (!(this_present_pageIndex && that_present_pageIndex))
          return false;
        if (this.pageIndex != that.pageIndex)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_stocks = true && this.isSetStocks();
      boolean that_present_stocks = true && that.isSetStocks();
      if (this_present_stocks || that_present_stocks) {
        if (!(this_present_stocks && that_present_stocks))
          return false;
        if (!this.stocks.equals(that.stocks))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_pageIndex = true;
      list.add(present_pageIndex);
      if (present_pageIndex)
        list.add(pageIndex);

      boolean present_pageSize = true;
      list.add(present_pageSize);
      if (present_pageSize)
        list.add(pageSize);

      boolean present_stocks = true && (isSetStocks());
      list.add(present_stocks);
      if (present_stocks)
        list.add(stocks);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPageStrategyTradeRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageIndex()).compareTo(other.isSetPageIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageIndex, other.pageIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStocks()).compareTo(other.isSetStocks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStocks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stocks, other.stocks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPageStrategyTradeRecord_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageIndex:");
      sb.append(this.pageIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stocks:");
      if (this.stocks == null) {
        sb.append("null");
      } else {
        sb.append(this.stocks);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPageStrategyTradeRecord_argsStandardSchemeFactory implements SchemeFactory {
      public queryPageStrategyTradeRecord_argsStandardScheme getScheme() {
        return new queryPageStrategyTradeRecord_argsStandardScheme();
      }
    }

    private static class queryPageStrategyTradeRecord_argsStandardScheme extends StandardScheme<queryPageStrategyTradeRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPageStrategyTradeRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageIndex = iprot.readI32();
                struct.setPageIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // STOCKS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stocks = iprot.readString();
                struct.setStocksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPageStrategyTradeRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_INDEX_FIELD_DESC);
        oprot.writeI32(struct.pageIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        if (struct.stocks != null) {
          oprot.writeFieldBegin(STOCKS_FIELD_DESC);
          oprot.writeString(struct.stocks);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPageStrategyTradeRecord_argsTupleSchemeFactory implements SchemeFactory {
      public queryPageStrategyTradeRecord_argsTupleScheme getScheme() {
        return new queryPageStrategyTradeRecord_argsTupleScheme();
      }
    }

    private static class queryPageStrategyTradeRecord_argsTupleScheme extends TupleScheme<queryPageStrategyTradeRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPageStrategyTradeRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        if (struct.isSetPageIndex()) {
          optionals.set(3);
        }
        if (struct.isSetPageSize()) {
          optionals.set(4);
        }
        if (struct.isSetStocks()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetPageIndex()) {
          oprot.writeI32(struct.pageIndex);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
        if (struct.isSetStocks()) {
          oprot.writeString(struct.stocks);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPageStrategyTradeRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageIndex = iprot.readI32();
          struct.setPageIndexIsSet(true);
        }
        if (incoming.get(4)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.stocks = iprot.readString();
          struct.setStocksIsSet(true);
        }
      }
    }

  }

  public static class queryPageStrategyTradeRecord_result implements org.apache.thrift.TBase<queryPageStrategyTradeRecord_result, queryPageStrategyTradeRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryPageStrategyTradeRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPageStrategyTradeRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPageStrategyTradeRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPageStrategyTradeRecord_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPageStrategyTradeRecord_result.class, metaDataMap);
    }

    public queryPageStrategyTradeRecord_result() {
    }

    public queryPageStrategyTradeRecord_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPageStrategyTradeRecord_result(queryPageStrategyTradeRecord_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryPageStrategyTradeRecord_result deepCopy() {
      return new queryPageStrategyTradeRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryPageStrategyTradeRecord_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPageStrategyTradeRecord_result)
        return this.equals((queryPageStrategyTradeRecord_result)that);
      return false;
    }

    public boolean equals(queryPageStrategyTradeRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPageStrategyTradeRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPageStrategyTradeRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPageStrategyTradeRecord_resultStandardSchemeFactory implements SchemeFactory {
      public queryPageStrategyTradeRecord_resultStandardScheme getScheme() {
        return new queryPageStrategyTradeRecord_resultStandardScheme();
      }
    }

    private static class queryPageStrategyTradeRecord_resultStandardScheme extends StandardScheme<queryPageStrategyTradeRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPageStrategyTradeRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPageStrategyTradeRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPageStrategyTradeRecord_resultTupleSchemeFactory implements SchemeFactory {
      public queryPageStrategyTradeRecord_resultTupleScheme getScheme() {
        return new queryPageStrategyTradeRecord_resultTupleScheme();
      }
    }

    private static class queryPageStrategyTradeRecord_resultTupleScheme extends TupleScheme<queryPageStrategyTradeRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPageStrategyTradeRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPageStrategyTradeRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryStockRealtimeSignalList_args implements org.apache.thrift.TBase<queryStockRealtimeSignalList_args, queryStockRealtimeSignalList_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryStockRealtimeSignalList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStockRealtimeSignalList_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStockRealtimeSignalList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStockRealtimeSignalList_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      USER_ID((short)2, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private static final int __USERID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStockRealtimeSignalList_args.class, metaDataMap);
    }

    public queryStockRealtimeSignalList_args() {
    }

    public queryStockRealtimeSignalList_args(
      int strategyId,
      int userId)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStockRealtimeSignalList_args(queryStockRealtimeSignalList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      this.userId = other.userId;
    }

    public queryStockRealtimeSignalList_args deepCopy() {
      return new queryStockRealtimeSignalList_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public queryStockRealtimeSignalList_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public int getUserId() {
      return this.userId;
    }

    public queryStockRealtimeSignalList_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStockRealtimeSignalList_args)
        return this.equals((queryStockRealtimeSignalList_args)that);
      return false;
    }

    public boolean equals(queryStockRealtimeSignalList_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryStockRealtimeSignalList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStockRealtimeSignalList_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStockRealtimeSignalList_argsStandardSchemeFactory implements SchemeFactory {
      public queryStockRealtimeSignalList_argsStandardScheme getScheme() {
        return new queryStockRealtimeSignalList_argsStandardScheme();
      }
    }

    private static class queryStockRealtimeSignalList_argsStandardScheme extends StandardScheme<queryStockRealtimeSignalList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStockRealtimeSignalList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStockRealtimeSignalList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStockRealtimeSignalList_argsTupleSchemeFactory implements SchemeFactory {
      public queryStockRealtimeSignalList_argsTupleScheme getScheme() {
        return new queryStockRealtimeSignalList_argsTupleScheme();
      }
    }

    private static class queryStockRealtimeSignalList_argsTupleScheme extends TupleScheme<queryStockRealtimeSignalList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStockRealtimeSignalList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStockRealtimeSignalList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class queryStockRealtimeSignalList_result implements org.apache.thrift.TBase<queryStockRealtimeSignalList_result, queryStockRealtimeSignalList_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryStockRealtimeSignalList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStockRealtimeSignalList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStockRealtimeSignalList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStockRealtimeSignalList_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStockRealtimeSignalList_result.class, metaDataMap);
    }

    public queryStockRealtimeSignalList_result() {
    }

    public queryStockRealtimeSignalList_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStockRealtimeSignalList_result(queryStockRealtimeSignalList_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryStockRealtimeSignalList_result deepCopy() {
      return new queryStockRealtimeSignalList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryStockRealtimeSignalList_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStockRealtimeSignalList_result)
        return this.equals((queryStockRealtimeSignalList_result)that);
      return false;
    }

    public boolean equals(queryStockRealtimeSignalList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryStockRealtimeSignalList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStockRealtimeSignalList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStockRealtimeSignalList_resultStandardSchemeFactory implements SchemeFactory {
      public queryStockRealtimeSignalList_resultStandardScheme getScheme() {
        return new queryStockRealtimeSignalList_resultStandardScheme();
      }
    }

    private static class queryStockRealtimeSignalList_resultStandardScheme extends StandardScheme<queryStockRealtimeSignalList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStockRealtimeSignalList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStockRealtimeSignalList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStockRealtimeSignalList_resultTupleSchemeFactory implements SchemeFactory {
      public queryStockRealtimeSignalList_resultTupleScheme getScheme() {
        return new queryStockRealtimeSignalList_resultTupleScheme();
      }
    }

    private static class queryStockRealtimeSignalList_resultTupleScheme extends TupleScheme<queryStockRealtimeSignalList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStockRealtimeSignalList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStockRealtimeSignalList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryAverageProfitCurve_args implements org.apache.thrift.TBase<queryAverageProfitCurve_args, queryAverageProfitCurve_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryAverageProfitCurve_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAverageProfitCurve_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("days", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField STOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("stocks", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryAverageProfitCurve_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryAverageProfitCurve_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public int days; // required
    public String stocks; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      DAYS((short)2, "days"),
      STOCKS((short)3, "stocks");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // DAYS
            return DAYS;
          case 3: // STOCKS
            return STOCKS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private static final int __DAYS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DAYS, new org.apache.thrift.meta_data.FieldMetaData("days", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCKS, new org.apache.thrift.meta_data.FieldMetaData("stocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAverageProfitCurve_args.class, metaDataMap);
    }

    public queryAverageProfitCurve_args() {
    }

    public queryAverageProfitCurve_args(
      int strategyId,
      int days,
      String stocks)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.days = days;
      setDaysIsSet(true);
      this.stocks = stocks;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryAverageProfitCurve_args(queryAverageProfitCurve_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      this.days = other.days;
      if (other.isSetStocks()) {
        this.stocks = other.stocks;
      }
    }

    public queryAverageProfitCurve_args deepCopy() {
      return new queryAverageProfitCurve_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setDaysIsSet(false);
      this.days = 0;
      this.stocks = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public queryAverageProfitCurve_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public int getDays() {
      return this.days;
    }

    public queryAverageProfitCurve_args setDays(int days) {
      this.days = days;
      setDaysIsSet(true);
      return this;
    }

    public void unsetDays() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAYS_ISSET_ID);
    }

    /** Returns true if field days is set (has been assigned a value) and false otherwise */
    public boolean isSetDays() {
      return EncodingUtils.testBit(__isset_bitfield, __DAYS_ISSET_ID);
    }

    public void setDaysIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAYS_ISSET_ID, value);
    }

    public String getStocks() {
      return this.stocks;
    }

    public queryAverageProfitCurve_args setStocks(String stocks) {
      this.stocks = stocks;
      return this;
    }

    public void unsetStocks() {
      this.stocks = null;
    }

    /** Returns true if field stocks is set (has been assigned a value) and false otherwise */
    public boolean isSetStocks() {
      return this.stocks != null;
    }

    public void setStocksIsSet(boolean value) {
      if (!value) {
        this.stocks = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case DAYS:
        if (value == null) {
          unsetDays();
        } else {
          setDays((Integer)value);
        }
        break;

      case STOCKS:
        if (value == null) {
          unsetStocks();
        } else {
          setStocks((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case DAYS:
        return getDays();

      case STOCKS:
        return getStocks();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case DAYS:
        return isSetDays();
      case STOCKS:
        return isSetStocks();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryAverageProfitCurve_args)
        return this.equals((queryAverageProfitCurve_args)that);
      return false;
    }

    public boolean equals(queryAverageProfitCurve_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_days = true;
      boolean that_present_days = true;
      if (this_present_days || that_present_days) {
        if (!(this_present_days && that_present_days))
          return false;
        if (this.days != that.days)
          return false;
      }

      boolean this_present_stocks = true && this.isSetStocks();
      boolean that_present_stocks = true && that.isSetStocks();
      if (this_present_stocks || that_present_stocks) {
        if (!(this_present_stocks && that_present_stocks))
          return false;
        if (!this.stocks.equals(that.stocks))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_days = true;
      list.add(present_days);
      if (present_days)
        list.add(days);

      boolean present_stocks = true && (isSetStocks());
      list.add(present_stocks);
      if (present_stocks)
        list.add(stocks);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryAverageProfitCurve_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDays()).compareTo(other.isSetDays());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDays()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.days, other.days);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStocks()).compareTo(other.isSetStocks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStocks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stocks, other.stocks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryAverageProfitCurve_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("days:");
      sb.append(this.days);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stocks:");
      if (this.stocks == null) {
        sb.append("null");
      } else {
        sb.append(this.stocks);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryAverageProfitCurve_argsStandardSchemeFactory implements SchemeFactory {
      public queryAverageProfitCurve_argsStandardScheme getScheme() {
        return new queryAverageProfitCurve_argsStandardScheme();
      }
    }

    private static class queryAverageProfitCurve_argsStandardScheme extends StandardScheme<queryAverageProfitCurve_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryAverageProfitCurve_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DAYS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.days = iprot.readI32();
                struct.setDaysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STOCKS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stocks = iprot.readString();
                struct.setStocksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryAverageProfitCurve_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DAYS_FIELD_DESC);
        oprot.writeI32(struct.days);
        oprot.writeFieldEnd();
        if (struct.stocks != null) {
          oprot.writeFieldBegin(STOCKS_FIELD_DESC);
          oprot.writeString(struct.stocks);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryAverageProfitCurve_argsTupleSchemeFactory implements SchemeFactory {
      public queryAverageProfitCurve_argsTupleScheme getScheme() {
        return new queryAverageProfitCurve_argsTupleScheme();
      }
    }

    private static class queryAverageProfitCurve_argsTupleScheme extends TupleScheme<queryAverageProfitCurve_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryAverageProfitCurve_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetDays()) {
          optionals.set(1);
        }
        if (struct.isSetStocks()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetDays()) {
          oprot.writeI32(struct.days);
        }
        if (struct.isSetStocks()) {
          oprot.writeString(struct.stocks);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryAverageProfitCurve_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.days = iprot.readI32();
          struct.setDaysIsSet(true);
        }
        if (incoming.get(2)) {
          struct.stocks = iprot.readString();
          struct.setStocksIsSet(true);
        }
      }
    }

  }

  public static class queryAverageProfitCurve_result implements org.apache.thrift.TBase<queryAverageProfitCurve_result, queryAverageProfitCurve_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryAverageProfitCurve_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAverageProfitCurve_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryAverageProfitCurve_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryAverageProfitCurve_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAverageProfitCurve_result.class, metaDataMap);
    }

    public queryAverageProfitCurve_result() {
    }

    public queryAverageProfitCurve_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryAverageProfitCurve_result(queryAverageProfitCurve_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryAverageProfitCurve_result deepCopy() {
      return new queryAverageProfitCurve_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryAverageProfitCurve_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryAverageProfitCurve_result)
        return this.equals((queryAverageProfitCurve_result)that);
      return false;
    }

    public boolean equals(queryAverageProfitCurve_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryAverageProfitCurve_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryAverageProfitCurve_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryAverageProfitCurve_resultStandardSchemeFactory implements SchemeFactory {
      public queryAverageProfitCurve_resultStandardScheme getScheme() {
        return new queryAverageProfitCurve_resultStandardScheme();
      }
    }

    private static class queryAverageProfitCurve_resultStandardScheme extends StandardScheme<queryAverageProfitCurve_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryAverageProfitCurve_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryAverageProfitCurve_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryAverageProfitCurve_resultTupleSchemeFactory implements SchemeFactory {
      public queryAverageProfitCurve_resultTupleScheme getScheme() {
        return new queryAverageProfitCurve_resultTupleScheme();
      }
    }

    private static class queryAverageProfitCurve_resultTupleScheme extends TupleScheme<queryAverageProfitCurve_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryAverageProfitCurve_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryAverageProfitCurve_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySumProfit_args implements org.apache.thrift.TBase<querySumProfit_args, querySumProfit_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySumProfit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySumProfit_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("days", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField STOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("stocks", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySumProfit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySumProfit_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public int days; // required
    public int type; // required
    public String stocks; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      DAYS((short)2, "days"),
      TYPE((short)3, "type"),
      STOCKS((short)4, "stocks");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // DAYS
            return DAYS;
          case 3: // TYPE
            return TYPE;
          case 4: // STOCKS
            return STOCKS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private static final int __DAYS_ISSET_ID = 1;
    private static final int __TYPE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DAYS, new org.apache.thrift.meta_data.FieldMetaData("days", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCKS, new org.apache.thrift.meta_data.FieldMetaData("stocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySumProfit_args.class, metaDataMap);
    }

    public querySumProfit_args() {
    }

    public querySumProfit_args(
      int strategyId,
      int days,
      int type,
      String stocks)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.days = days;
      setDaysIsSet(true);
      this.type = type;
      setTypeIsSet(true);
      this.stocks = stocks;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySumProfit_args(querySumProfit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      this.days = other.days;
      this.type = other.type;
      if (other.isSetStocks()) {
        this.stocks = other.stocks;
      }
    }

    public querySumProfit_args deepCopy() {
      return new querySumProfit_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setDaysIsSet(false);
      this.days = 0;
      setTypeIsSet(false);
      this.type = 0;
      this.stocks = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public querySumProfit_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public int getDays() {
      return this.days;
    }

    public querySumProfit_args setDays(int days) {
      this.days = days;
      setDaysIsSet(true);
      return this;
    }

    public void unsetDays() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAYS_ISSET_ID);
    }

    /** Returns true if field days is set (has been assigned a value) and false otherwise */
    public boolean isSetDays() {
      return EncodingUtils.testBit(__isset_bitfield, __DAYS_ISSET_ID);
    }

    public void setDaysIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAYS_ISSET_ID, value);
    }

    public int getType() {
      return this.type;
    }

    public querySumProfit_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public String getStocks() {
      return this.stocks;
    }

    public querySumProfit_args setStocks(String stocks) {
      this.stocks = stocks;
      return this;
    }

    public void unsetStocks() {
      this.stocks = null;
    }

    /** Returns true if field stocks is set (has been assigned a value) and false otherwise */
    public boolean isSetStocks() {
      return this.stocks != null;
    }

    public void setStocksIsSet(boolean value) {
      if (!value) {
        this.stocks = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case DAYS:
        if (value == null) {
          unsetDays();
        } else {
          setDays((Integer)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case STOCKS:
        if (value == null) {
          unsetStocks();
        } else {
          setStocks((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case DAYS:
        return getDays();

      case TYPE:
        return getType();

      case STOCKS:
        return getStocks();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case DAYS:
        return isSetDays();
      case TYPE:
        return isSetType();
      case STOCKS:
        return isSetStocks();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySumProfit_args)
        return this.equals((querySumProfit_args)that);
      return false;
    }

    public boolean equals(querySumProfit_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_days = true;
      boolean that_present_days = true;
      if (this_present_days || that_present_days) {
        if (!(this_present_days && that_present_days))
          return false;
        if (this.days != that.days)
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_stocks = true && this.isSetStocks();
      boolean that_present_stocks = true && that.isSetStocks();
      if (this_present_stocks || that_present_stocks) {
        if (!(this_present_stocks && that_present_stocks))
          return false;
        if (!this.stocks.equals(that.stocks))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_days = true;
      list.add(present_days);
      if (present_days)
        list.add(days);

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_stocks = true && (isSetStocks());
      list.add(present_stocks);
      if (present_stocks)
        list.add(stocks);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySumProfit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDays()).compareTo(other.isSetDays());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDays()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.days, other.days);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStocks()).compareTo(other.isSetStocks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStocks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stocks, other.stocks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySumProfit_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("days:");
      sb.append(this.days);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stocks:");
      if (this.stocks == null) {
        sb.append("null");
      } else {
        sb.append(this.stocks);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySumProfit_argsStandardSchemeFactory implements SchemeFactory {
      public querySumProfit_argsStandardScheme getScheme() {
        return new querySumProfit_argsStandardScheme();
      }
    }

    private static class querySumProfit_argsStandardScheme extends StandardScheme<querySumProfit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySumProfit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DAYS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.days = iprot.readI32();
                struct.setDaysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // STOCKS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stocks = iprot.readString();
                struct.setStocksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySumProfit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DAYS_FIELD_DESC);
        oprot.writeI32(struct.days);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        if (struct.stocks != null) {
          oprot.writeFieldBegin(STOCKS_FIELD_DESC);
          oprot.writeString(struct.stocks);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySumProfit_argsTupleSchemeFactory implements SchemeFactory {
      public querySumProfit_argsTupleScheme getScheme() {
        return new querySumProfit_argsTupleScheme();
      }
    }

    private static class querySumProfit_argsTupleScheme extends TupleScheme<querySumProfit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySumProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetDays()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        if (struct.isSetStocks()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetDays()) {
          oprot.writeI32(struct.days);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetStocks()) {
          oprot.writeString(struct.stocks);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySumProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.days = iprot.readI32();
          struct.setDaysIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.stocks = iprot.readString();
          struct.setStocksIsSet(true);
        }
      }
    }

  }

  public static class querySumProfit_result implements org.apache.thrift.TBase<querySumProfit_result, querySumProfit_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySumProfit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySumProfit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySumProfit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySumProfit_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySumProfit_result.class, metaDataMap);
    }

    public querySumProfit_result() {
    }

    public querySumProfit_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySumProfit_result(querySumProfit_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public querySumProfit_result deepCopy() {
      return new querySumProfit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public querySumProfit_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySumProfit_result)
        return this.equals((querySumProfit_result)that);
      return false;
    }

    public boolean equals(querySumProfit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySumProfit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySumProfit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySumProfit_resultStandardSchemeFactory implements SchemeFactory {
      public querySumProfit_resultStandardScheme getScheme() {
        return new querySumProfit_resultStandardScheme();
      }
    }

    private static class querySumProfit_resultStandardScheme extends StandardScheme<querySumProfit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySumProfit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySumProfit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySumProfit_resultTupleSchemeFactory implements SchemeFactory {
      public querySumProfit_resultTupleScheme getScheme() {
        return new querySumProfit_resultTupleScheme();
      }
    }

    private static class querySumProfit_resultTupleScheme extends TupleScheme<querySumProfit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySumProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySumProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySumProfitNew_args implements org.apache.thrift.TBase<querySumProfitNew_args, querySumProfitNew_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySumProfitNew_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySumProfitNew_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField STOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("stocks", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySumProfitNew_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySumProfitNew_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public long startDate; // required
    public long endDate; // required
    public int type; // required
    public String stocks; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      START_DATE((short)2, "startDate"),
      END_DATE((short)3, "endDate"),
      TYPE((short)4, "type"),
      STOCKS((short)5, "stocks");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // START_DATE
            return START_DATE;
          case 3: // END_DATE
            return END_DATE;
          case 4: // TYPE
            return TYPE;
          case 5: // STOCKS
            return STOCKS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private static final int __STARTDATE_ISSET_ID = 1;
    private static final int __ENDDATE_ISSET_ID = 2;
    private static final int __TYPE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCKS, new org.apache.thrift.meta_data.FieldMetaData("stocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySumProfitNew_args.class, metaDataMap);
    }

    public querySumProfitNew_args() {
    }

    public querySumProfitNew_args(
      int strategyId,
      long startDate,
      long endDate,
      int type,
      String stocks)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.startDate = startDate;
      setStartDateIsSet(true);
      this.endDate = endDate;
      setEndDateIsSet(true);
      this.type = type;
      setTypeIsSet(true);
      this.stocks = stocks;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySumProfitNew_args(querySumProfitNew_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      this.startDate = other.startDate;
      this.endDate = other.endDate;
      this.type = other.type;
      if (other.isSetStocks()) {
        this.stocks = other.stocks;
      }
    }

    public querySumProfitNew_args deepCopy() {
      return new querySumProfitNew_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setStartDateIsSet(false);
      this.startDate = 0;
      setEndDateIsSet(false);
      this.endDate = 0;
      setTypeIsSet(false);
      this.type = 0;
      this.stocks = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public querySumProfitNew_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public long getStartDate() {
      return this.startDate;
    }

    public querySumProfitNew_args setStartDate(long startDate) {
      this.startDate = startDate;
      setStartDateIsSet(true);
      return this;
    }

    public void unsetStartDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTDATE_ISSET_ID);
    }

    /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
    public boolean isSetStartDate() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTDATE_ISSET_ID);
    }

    public void setStartDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTDATE_ISSET_ID, value);
    }

    public long getEndDate() {
      return this.endDate;
    }

    public querySumProfitNew_args setEndDate(long endDate) {
      this.endDate = endDate;
      setEndDateIsSet(true);
      return this;
    }

    public void unsetEndDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
    public boolean isSetEndDate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEndDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public int getType() {
      return this.type;
    }

    public querySumProfitNew_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public String getStocks() {
      return this.stocks;
    }

    public querySumProfitNew_args setStocks(String stocks) {
      this.stocks = stocks;
      return this;
    }

    public void unsetStocks() {
      this.stocks = null;
    }

    /** Returns true if field stocks is set (has been assigned a value) and false otherwise */
    public boolean isSetStocks() {
      return this.stocks != null;
    }

    public void setStocksIsSet(boolean value) {
      if (!value) {
        this.stocks = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case START_DATE:
        if (value == null) {
          unsetStartDate();
        } else {
          setStartDate((Long)value);
        }
        break;

      case END_DATE:
        if (value == null) {
          unsetEndDate();
        } else {
          setEndDate((Long)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case STOCKS:
        if (value == null) {
          unsetStocks();
        } else {
          setStocks((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case START_DATE:
        return getStartDate();

      case END_DATE:
        return getEndDate();

      case TYPE:
        return getType();

      case STOCKS:
        return getStocks();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case START_DATE:
        return isSetStartDate();
      case END_DATE:
        return isSetEndDate();
      case TYPE:
        return isSetType();
      case STOCKS:
        return isSetStocks();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySumProfitNew_args)
        return this.equals((querySumProfitNew_args)that);
      return false;
    }

    public boolean equals(querySumProfitNew_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_startDate = true;
      boolean that_present_startDate = true;
      if (this_present_startDate || that_present_startDate) {
        if (!(this_present_startDate && that_present_startDate))
          return false;
        if (this.startDate != that.startDate)
          return false;
      }

      boolean this_present_endDate = true;
      boolean that_present_endDate = true;
      if (this_present_endDate || that_present_endDate) {
        if (!(this_present_endDate && that_present_endDate))
          return false;
        if (this.endDate != that.endDate)
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_stocks = true && this.isSetStocks();
      boolean that_present_stocks = true && that.isSetStocks();
      if (this_present_stocks || that_present_stocks) {
        if (!(this_present_stocks && that_present_stocks))
          return false;
        if (!this.stocks.equals(that.stocks))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_startDate = true;
      list.add(present_startDate);
      if (present_startDate)
        list.add(startDate);

      boolean present_endDate = true;
      list.add(present_endDate);
      if (present_endDate)
        list.add(endDate);

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_stocks = true && (isSetStocks());
      list.add(present_stocks);
      if (present_stocks)
        list.add(stocks);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySumProfitNew_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStocks()).compareTo(other.isSetStocks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStocks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stocks, other.stocks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySumProfitNew_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startDate:");
      sb.append(this.startDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endDate:");
      sb.append(this.endDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stocks:");
      if (this.stocks == null) {
        sb.append("null");
      } else {
        sb.append(this.stocks);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySumProfitNew_argsStandardSchemeFactory implements SchemeFactory {
      public querySumProfitNew_argsStandardScheme getScheme() {
        return new querySumProfitNew_argsStandardScheme();
      }
    }

    private static class querySumProfitNew_argsStandardScheme extends StandardScheme<querySumProfitNew_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySumProfitNew_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startDate = iprot.readI64();
                struct.setStartDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // END_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endDate = iprot.readI64();
                struct.setEndDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // STOCKS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stocks = iprot.readString();
                struct.setStocksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySumProfitNew_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeI64(struct.startDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeI64(struct.endDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        if (struct.stocks != null) {
          oprot.writeFieldBegin(STOCKS_FIELD_DESC);
          oprot.writeString(struct.stocks);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySumProfitNew_argsTupleSchemeFactory implements SchemeFactory {
      public querySumProfitNew_argsTupleScheme getScheme() {
        return new querySumProfitNew_argsTupleScheme();
      }
    }

    private static class querySumProfitNew_argsTupleScheme extends TupleScheme<querySumProfitNew_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySumProfitNew_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetStartDate()) {
          optionals.set(1);
        }
        if (struct.isSetEndDate()) {
          optionals.set(2);
        }
        if (struct.isSetType()) {
          optionals.set(3);
        }
        if (struct.isSetStocks()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStartDate()) {
          oprot.writeI64(struct.startDate);
        }
        if (struct.isSetEndDate()) {
          oprot.writeI64(struct.endDate);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetStocks()) {
          oprot.writeString(struct.stocks);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySumProfitNew_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.startDate = iprot.readI64();
          struct.setStartDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.endDate = iprot.readI64();
          struct.setEndDateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.stocks = iprot.readString();
          struct.setStocksIsSet(true);
        }
      }
    }

  }

  public static class querySumProfitNew_result implements org.apache.thrift.TBase<querySumProfitNew_result, querySumProfitNew_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySumProfitNew_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySumProfitNew_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySumProfitNew_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySumProfitNew_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySumProfitNew_result.class, metaDataMap);
    }

    public querySumProfitNew_result() {
    }

    public querySumProfitNew_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySumProfitNew_result(querySumProfitNew_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public querySumProfitNew_result deepCopy() {
      return new querySumProfitNew_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public querySumProfitNew_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySumProfitNew_result)
        return this.equals((querySumProfitNew_result)that);
      return false;
    }

    public boolean equals(querySumProfitNew_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySumProfitNew_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySumProfitNew_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySumProfitNew_resultStandardSchemeFactory implements SchemeFactory {
      public querySumProfitNew_resultStandardScheme getScheme() {
        return new querySumProfitNew_resultStandardScheme();
      }
    }

    private static class querySumProfitNew_resultStandardScheme extends StandardScheme<querySumProfitNew_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySumProfitNew_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySumProfitNew_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySumProfitNew_resultTupleSchemeFactory implements SchemeFactory {
      public querySumProfitNew_resultTupleScheme getScheme() {
        return new querySumProfitNew_resultTupleScheme();
      }
    }

    private static class querySumProfitNew_resultTupleScheme extends TupleScheme<querySumProfitNew_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySumProfitNew_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySumProfitNew_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class heartBeat_args implements org.apache.thrift.TBase<heartBeat_args, heartBeat_args._Fields>, java.io.Serializable, Cloneable, Comparable<heartBeat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("heartBeat_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new heartBeat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new heartBeat_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(heartBeat_args.class, metaDataMap);
    }

    public heartBeat_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public heartBeat_args(heartBeat_args other) {
    }

    public heartBeat_args deepCopy() {
      return new heartBeat_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof heartBeat_args)
        return this.equals((heartBeat_args)that);
      return false;
    }

    public boolean equals(heartBeat_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(heartBeat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("heartBeat_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class heartBeat_argsStandardSchemeFactory implements SchemeFactory {
      public heartBeat_argsStandardScheme getScheme() {
        return new heartBeat_argsStandardScheme();
      }
    }

    private static class heartBeat_argsStandardScheme extends StandardScheme<heartBeat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, heartBeat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, heartBeat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class heartBeat_argsTupleSchemeFactory implements SchemeFactory {
      public heartBeat_argsTupleScheme getScheme() {
        return new heartBeat_argsTupleScheme();
      }
    }

    private static class heartBeat_argsTupleScheme extends TupleScheme<heartBeat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, heartBeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, heartBeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class heartBeat_result implements org.apache.thrift.TBase<heartBeat_result, heartBeat_result._Fields>, java.io.Serializable, Cloneable, Comparable<heartBeat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("heartBeat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new heartBeat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new heartBeat_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(heartBeat_result.class, metaDataMap);
    }

    public heartBeat_result() {
    }

    public heartBeat_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public heartBeat_result(heartBeat_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public heartBeat_result deepCopy() {
      return new heartBeat_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public heartBeat_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof heartBeat_result)
        return this.equals((heartBeat_result)that);
      return false;
    }

    public boolean equals(heartBeat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(heartBeat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("heartBeat_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class heartBeat_resultStandardSchemeFactory implements SchemeFactory {
      public heartBeat_resultStandardScheme getScheme() {
        return new heartBeat_resultStandardScheme();
      }
    }

    private static class heartBeat_resultStandardScheme extends StandardScheme<heartBeat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, heartBeat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, heartBeat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class heartBeat_resultTupleSchemeFactory implements SchemeFactory {
      public heartBeat_resultTupleScheme getScheme() {
        return new heartBeat_resultTupleScheme();
      }
    }

    private static class heartBeat_resultTupleScheme extends TupleScheme<heartBeat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, heartBeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, heartBeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteSignalFile_args implements org.apache.thrift.TBase<deleteSignalFile_args, deleteSignalFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSignalFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSignalFile_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSignalFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSignalFile_argsTupleSchemeFactory());
    }

    public int strategyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSignalFile_args.class, metaDataMap);
    }

    public deleteSignalFile_args() {
    }

    public deleteSignalFile_args(
      int strategyId)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSignalFile_args(deleteSignalFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
    }

    public deleteSignalFile_args deepCopy() {
      return new deleteSignalFile_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public deleteSignalFile_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSignalFile_args)
        return this.equals((deleteSignalFile_args)that);
      return false;
    }

    public boolean equals(deleteSignalFile_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSignalFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSignalFile_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSignalFile_argsStandardSchemeFactory implements SchemeFactory {
      public deleteSignalFile_argsStandardScheme getScheme() {
        return new deleteSignalFile_argsStandardScheme();
      }
    }

    private static class deleteSignalFile_argsStandardScheme extends StandardScheme<deleteSignalFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSignalFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSignalFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSignalFile_argsTupleSchemeFactory implements SchemeFactory {
      public deleteSignalFile_argsTupleScheme getScheme() {
        return new deleteSignalFile_argsTupleScheme();
      }
    }

    private static class deleteSignalFile_argsTupleScheme extends TupleScheme<deleteSignalFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSignalFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSignalFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
      }
    }

  }

  public static class deleteSignalFile_result implements org.apache.thrift.TBase<deleteSignalFile_result, deleteSignalFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSignalFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSignalFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSignalFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSignalFile_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSignalFile_result.class, metaDataMap);
    }

    public deleteSignalFile_result() {
    }

    public deleteSignalFile_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSignalFile_result(deleteSignalFile_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public deleteSignalFile_result deepCopy() {
      return new deleteSignalFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public deleteSignalFile_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSignalFile_result)
        return this.equals((deleteSignalFile_result)that);
      return false;
    }

    public boolean equals(deleteSignalFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSignalFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSignalFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSignalFile_resultStandardSchemeFactory implements SchemeFactory {
      public deleteSignalFile_resultStandardScheme getScheme() {
        return new deleteSignalFile_resultStandardScheme();
      }
    }

    private static class deleteSignalFile_resultStandardScheme extends StandardScheme<deleteSignalFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSignalFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSignalFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSignalFile_resultTupleSchemeFactory implements SchemeFactory {
      public deleteSignalFile_resultTupleScheme getScheme() {
        return new deleteSignalFile_resultTupleScheme();
      }
    }

    private static class deleteSignalFile_resultTupleScheme extends TupleScheme<deleteSignalFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSignalFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSignalFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class countProfit_args implements org.apache.thrift.TBase<countProfit_args, countProfit_args._Fields>, java.io.Serializable, Cloneable, Comparable<countProfit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countProfit_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countProfit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countProfit_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public long date; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      DATE((short)2, "date");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // DATE
            return DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private static final int __DATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countProfit_args.class, metaDataMap);
    }

    public countProfit_args() {
    }

    public countProfit_args(
      int strategyId,
      long date)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.date = date;
      setDateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countProfit_args(countProfit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      this.date = other.date;
    }

    public countProfit_args deepCopy() {
      return new countProfit_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setDateIsSet(false);
      this.date = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public countProfit_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public long getDate() {
      return this.date;
    }

    public countProfit_args setDate(long date) {
      this.date = date;
      setDateIsSet(true);
      return this;
    }

    public void unsetDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    public void setDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case DATE:
        return getDate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case DATE:
        return isSetDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countProfit_args)
        return this.equals((countProfit_args)that);
      return false;
    }

    public boolean equals(countProfit_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_date = true;
      boolean that_present_date = true;
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (this.date != that.date)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_date = true;
      list.add(present_date);
      if (present_date)
        list.add(date);

      return list.hashCode();
    }

    @Override
    public int compareTo(countProfit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countProfit_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("date:");
      sb.append(this.date);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countProfit_argsStandardSchemeFactory implements SchemeFactory {
      public countProfit_argsStandardScheme getScheme() {
        return new countProfit_argsStandardScheme();
      }
    }

    private static class countProfit_argsStandardScheme extends StandardScheme<countProfit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countProfit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.date = iprot.readI64();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countProfit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeI64(struct.date);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countProfit_argsTupleSchemeFactory implements SchemeFactory {
      public countProfit_argsTupleScheme getScheme() {
        return new countProfit_argsTupleScheme();
      }
    }

    private static class countProfit_argsTupleScheme extends TupleScheme<countProfit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetDate()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetDate()) {
          oprot.writeI64(struct.date);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.date = iprot.readI64();
          struct.setDateIsSet(true);
        }
      }
    }

  }

  public static class countProfit_result implements org.apache.thrift.TBase<countProfit_result, countProfit_result._Fields>, java.io.Serializable, Cloneable, Comparable<countProfit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countProfit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countProfit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countProfit_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countProfit_result.class, metaDataMap);
    }

    public countProfit_result() {
    }

    public countProfit_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countProfit_result(countProfit_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public countProfit_result deepCopy() {
      return new countProfit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public countProfit_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countProfit_result)
        return this.equals((countProfit_result)that);
      return false;
    }

    public boolean equals(countProfit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(countProfit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countProfit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countProfit_resultStandardSchemeFactory implements SchemeFactory {
      public countProfit_resultStandardScheme getScheme() {
        return new countProfit_resultStandardScheme();
      }
    }

    private static class countProfit_resultStandardScheme extends StandardScheme<countProfit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countProfit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countProfit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countProfit_resultTupleSchemeFactory implements SchemeFactory {
      public countProfit_resultTupleScheme getScheme() {
        return new countProfit_resultTupleScheme();
      }
    }

    private static class countProfit_resultTupleScheme extends TupleScheme<countProfit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class countfiveDay_args implements org.apache.thrift.TBase<countfiveDay_args, countfiveDay_args._Fields>, java.io.Serializable, Cloneable, Comparable<countfiveDay_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countfiveDay_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("five", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countfiveDay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countfiveDay_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public double five; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      FIVE((short)2, "five");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // FIVE
            return FIVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private static final int __FIVE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FIVE, new org.apache.thrift.meta_data.FieldMetaData("five", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countfiveDay_args.class, metaDataMap);
    }

    public countfiveDay_args() {
    }

    public countfiveDay_args(
      int strategyId,
      double five)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.five = five;
      setFiveIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countfiveDay_args(countfiveDay_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      this.five = other.five;
    }

    public countfiveDay_args deepCopy() {
      return new countfiveDay_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setFiveIsSet(false);
      this.five = 0.0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public countfiveDay_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public double getFive() {
      return this.five;
    }

    public countfiveDay_args setFive(double five) {
      this.five = five;
      setFiveIsSet(true);
      return this;
    }

    public void unsetFive() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIVE_ISSET_ID);
    }

    /** Returns true if field five is set (has been assigned a value) and false otherwise */
    public boolean isSetFive() {
      return EncodingUtils.testBit(__isset_bitfield, __FIVE_ISSET_ID);
    }

    public void setFiveIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIVE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case FIVE:
        if (value == null) {
          unsetFive();
        } else {
          setFive((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case FIVE:
        return getFive();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case FIVE:
        return isSetFive();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countfiveDay_args)
        return this.equals((countfiveDay_args)that);
      return false;
    }

    public boolean equals(countfiveDay_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_five = true;
      boolean that_present_five = true;
      if (this_present_five || that_present_five) {
        if (!(this_present_five && that_present_five))
          return false;
        if (this.five != that.five)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_five = true;
      list.add(present_five);
      if (present_five)
        list.add(five);

      return list.hashCode();
    }

    @Override
    public int compareTo(countfiveDay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFive()).compareTo(other.isSetFive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.five, other.five);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countfiveDay_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("five:");
      sb.append(this.five);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countfiveDay_argsStandardSchemeFactory implements SchemeFactory {
      public countfiveDay_argsStandardScheme getScheme() {
        return new countfiveDay_argsStandardScheme();
      }
    }

    private static class countfiveDay_argsStandardScheme extends StandardScheme<countfiveDay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countfiveDay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.five = iprot.readDouble();
                struct.setFiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countfiveDay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FIVE_FIELD_DESC);
        oprot.writeDouble(struct.five);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countfiveDay_argsTupleSchemeFactory implements SchemeFactory {
      public countfiveDay_argsTupleScheme getScheme() {
        return new countfiveDay_argsTupleScheme();
      }
    }

    private static class countfiveDay_argsTupleScheme extends TupleScheme<countfiveDay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countfiveDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetFive()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetFive()) {
          oprot.writeDouble(struct.five);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countfiveDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.five = iprot.readDouble();
          struct.setFiveIsSet(true);
        }
      }
    }

  }

  public static class countfiveDay_result implements org.apache.thrift.TBase<countfiveDay_result, countfiveDay_result._Fields>, java.io.Serializable, Cloneable, Comparable<countfiveDay_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countfiveDay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countfiveDay_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countfiveDay_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countfiveDay_result.class, metaDataMap);
    }

    public countfiveDay_result() {
    }

    public countfiveDay_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countfiveDay_result(countfiveDay_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public countfiveDay_result deepCopy() {
      return new countfiveDay_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public countfiveDay_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countfiveDay_result)
        return this.equals((countfiveDay_result)that);
      return false;
    }

    public boolean equals(countfiveDay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(countfiveDay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countfiveDay_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countfiveDay_resultStandardSchemeFactory implements SchemeFactory {
      public countfiveDay_resultStandardScheme getScheme() {
        return new countfiveDay_resultStandardScheme();
      }
    }

    private static class countfiveDay_resultStandardScheme extends StandardScheme<countfiveDay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countfiveDay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countfiveDay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countfiveDay_resultTupleSchemeFactory implements SchemeFactory {
      public countfiveDay_resultTupleScheme getScheme() {
        return new countfiveDay_resultTupleScheme();
      }
    }

    private static class countfiveDay_resultTupleScheme extends TupleScheme<countfiveDay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countfiveDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countfiveDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class countNowHoldStock_args implements org.apache.thrift.TBase<countNowHoldStock_args, countNowHoldStock_args._Fields>, java.io.Serializable, Cloneable, Comparable<countNowHoldStock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countNowHoldStock_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NOW_FIELD_DESC = new org.apache.thrift.protocol.TField("now", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countNowHoldStock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countNowHoldStock_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public double now; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      NOW((short)2, "now");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // NOW
            return NOW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private static final int __NOW_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NOW, new org.apache.thrift.meta_data.FieldMetaData("now", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countNowHoldStock_args.class, metaDataMap);
    }

    public countNowHoldStock_args() {
    }

    public countNowHoldStock_args(
      int strategyId,
      double now)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.now = now;
      setNowIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countNowHoldStock_args(countNowHoldStock_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      this.now = other.now;
    }

    public countNowHoldStock_args deepCopy() {
      return new countNowHoldStock_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setNowIsSet(false);
      this.now = 0.0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public countNowHoldStock_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public double getNow() {
      return this.now;
    }

    public countNowHoldStock_args setNow(double now) {
      this.now = now;
      setNowIsSet(true);
      return this;
    }

    public void unsetNow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOW_ISSET_ID);
    }

    /** Returns true if field now is set (has been assigned a value) and false otherwise */
    public boolean isSetNow() {
      return EncodingUtils.testBit(__isset_bitfield, __NOW_ISSET_ID);
    }

    public void setNowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOW_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case NOW:
        if (value == null) {
          unsetNow();
        } else {
          setNow((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case NOW:
        return getNow();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case NOW:
        return isSetNow();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countNowHoldStock_args)
        return this.equals((countNowHoldStock_args)that);
      return false;
    }

    public boolean equals(countNowHoldStock_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_now = true;
      boolean that_present_now = true;
      if (this_present_now || that_present_now) {
        if (!(this_present_now && that_present_now))
          return false;
        if (this.now != that.now)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_now = true;
      list.add(present_now);
      if (present_now)
        list.add(now);

      return list.hashCode();
    }

    @Override
    public int compareTo(countNowHoldStock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNow()).compareTo(other.isSetNow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.now, other.now);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countNowHoldStock_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("now:");
      sb.append(this.now);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countNowHoldStock_argsStandardSchemeFactory implements SchemeFactory {
      public countNowHoldStock_argsStandardScheme getScheme() {
        return new countNowHoldStock_argsStandardScheme();
      }
    }

    private static class countNowHoldStock_argsStandardScheme extends StandardScheme<countNowHoldStock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countNowHoldStock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOW
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.now = iprot.readDouble();
                struct.setNowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countNowHoldStock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NOW_FIELD_DESC);
        oprot.writeDouble(struct.now);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countNowHoldStock_argsTupleSchemeFactory implements SchemeFactory {
      public countNowHoldStock_argsTupleScheme getScheme() {
        return new countNowHoldStock_argsTupleScheme();
      }
    }

    private static class countNowHoldStock_argsTupleScheme extends TupleScheme<countNowHoldStock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countNowHoldStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetNow()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetNow()) {
          oprot.writeDouble(struct.now);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countNowHoldStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.now = iprot.readDouble();
          struct.setNowIsSet(true);
        }
      }
    }

  }

  public static class countNowHoldStock_result implements org.apache.thrift.TBase<countNowHoldStock_result, countNowHoldStock_result._Fields>, java.io.Serializable, Cloneable, Comparable<countNowHoldStock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countNowHoldStock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countNowHoldStock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countNowHoldStock_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countNowHoldStock_result.class, metaDataMap);
    }

    public countNowHoldStock_result() {
    }

    public countNowHoldStock_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countNowHoldStock_result(countNowHoldStock_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public countNowHoldStock_result deepCopy() {
      return new countNowHoldStock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public countNowHoldStock_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countNowHoldStock_result)
        return this.equals((countNowHoldStock_result)that);
      return false;
    }

    public boolean equals(countNowHoldStock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(countNowHoldStock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countNowHoldStock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countNowHoldStock_resultStandardSchemeFactory implements SchemeFactory {
      public countNowHoldStock_resultStandardScheme getScheme() {
        return new countNowHoldStock_resultStandardScheme();
      }
    }

    private static class countNowHoldStock_resultStandardScheme extends StandardScheme<countNowHoldStock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countNowHoldStock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countNowHoldStock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countNowHoldStock_resultTupleSchemeFactory implements SchemeFactory {
      public countNowHoldStock_resultTupleScheme getScheme() {
        return new countNowHoldStock_resultTupleScheme();
      }
    }

    private static class countNowHoldStock_resultTupleScheme extends TupleScheme<countNowHoldStock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countNowHoldStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countNowHoldStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class disReportData_args implements org.apache.thrift.TBase<disReportData_args, disReportData_args._Fields>, java.io.Serializable, Cloneable, Comparable<disReportData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disReportData_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disReportData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disReportData_argsTupleSchemeFactory());
    }

    public int strategyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disReportData_args.class, metaDataMap);
    }

    public disReportData_args() {
    }

    public disReportData_args(
      int strategyId)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disReportData_args(disReportData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
    }

    public disReportData_args deepCopy() {
      return new disReportData_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public disReportData_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disReportData_args)
        return this.equals((disReportData_args)that);
      return false;
    }

    public boolean equals(disReportData_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(disReportData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disReportData_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disReportData_argsStandardSchemeFactory implements SchemeFactory {
      public disReportData_argsStandardScheme getScheme() {
        return new disReportData_argsStandardScheme();
      }
    }

    private static class disReportData_argsStandardScheme extends StandardScheme<disReportData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disReportData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disReportData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disReportData_argsTupleSchemeFactory implements SchemeFactory {
      public disReportData_argsTupleScheme getScheme() {
        return new disReportData_argsTupleScheme();
      }
    }

    private static class disReportData_argsTupleScheme extends TupleScheme<disReportData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disReportData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disReportData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
      }
    }

  }

  public static class disReportData_result implements org.apache.thrift.TBase<disReportData_result, disReportData_result._Fields>, java.io.Serializable, Cloneable, Comparable<disReportData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disReportData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disReportData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disReportData_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disReportData_result.class, metaDataMap);
    }

    public disReportData_result() {
    }

    public disReportData_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disReportData_result(disReportData_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public disReportData_result deepCopy() {
      return new disReportData_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public disReportData_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disReportData_result)
        return this.equals((disReportData_result)that);
      return false;
    }

    public boolean equals(disReportData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(disReportData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disReportData_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disReportData_resultStandardSchemeFactory implements SchemeFactory {
      public disReportData_resultStandardScheme getScheme() {
        return new disReportData_resultStandardScheme();
      }
    }

    private static class disReportData_resultStandardScheme extends StandardScheme<disReportData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disReportData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disReportData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disReportData_resultTupleSchemeFactory implements SchemeFactory {
      public disReportData_resultTupleScheme getScheme() {
        return new disReportData_resultTupleScheme();
      }
    }

    private static class disReportData_resultTupleScheme extends TupleScheme<disReportData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disReportData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disReportData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findDnaStockHold_args implements org.apache.thrift.TBase<findDnaStockHold_args, findDnaStockHold_args._Fields>, java.io.Serializable, Cloneable, Comparable<findDnaStockHold_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findDnaStockHold_args");

    private static final org.apache.thrift.protocol.TField STOCK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stockCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findDnaStockHold_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findDnaStockHold_argsTupleSchemeFactory());
    }

    public String stockCode; // required
    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STOCK_CODE((short)1, "stockCode"),
      USER_ID((short)2, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STOCK_CODE
            return STOCK_CODE;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STOCK_CODE, new org.apache.thrift.meta_data.FieldMetaData("stockCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findDnaStockHold_args.class, metaDataMap);
    }

    public findDnaStockHold_args() {
    }

    public findDnaStockHold_args(
      String stockCode,
      int userId)
    {
      this();
      this.stockCode = stockCode;
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findDnaStockHold_args(findDnaStockHold_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetStockCode()) {
        this.stockCode = other.stockCode;
      }
      this.userId = other.userId;
    }

    public findDnaStockHold_args deepCopy() {
      return new findDnaStockHold_args(this);
    }

    @Override
    public void clear() {
      this.stockCode = null;
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public String getStockCode() {
      return this.stockCode;
    }

    public findDnaStockHold_args setStockCode(String stockCode) {
      this.stockCode = stockCode;
      return this;
    }

    public void unsetStockCode() {
      this.stockCode = null;
    }

    /** Returns true if field stockCode is set (has been assigned a value) and false otherwise */
    public boolean isSetStockCode() {
      return this.stockCode != null;
    }

    public void setStockCodeIsSet(boolean value) {
      if (!value) {
        this.stockCode = null;
      }
    }

    public int getUserId() {
      return this.userId;
    }

    public findDnaStockHold_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STOCK_CODE:
        if (value == null) {
          unsetStockCode();
        } else {
          setStockCode((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STOCK_CODE:
        return getStockCode();

      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STOCK_CODE:
        return isSetStockCode();
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findDnaStockHold_args)
        return this.equals((findDnaStockHold_args)that);
      return false;
    }

    public boolean equals(findDnaStockHold_args that) {
      if (that == null)
        return false;

      boolean this_present_stockCode = true && this.isSetStockCode();
      boolean that_present_stockCode = true && that.isSetStockCode();
      if (this_present_stockCode || that_present_stockCode) {
        if (!(this_present_stockCode && that_present_stockCode))
          return false;
        if (!this.stockCode.equals(that.stockCode))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stockCode = true && (isSetStockCode());
      list.add(present_stockCode);
      if (present_stockCode)
        list.add(stockCode);

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findDnaStockHold_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStockCode()).compareTo(other.isSetStockCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStockCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockCode, other.stockCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findDnaStockHold_args(");
      boolean first = true;

      sb.append("stockCode:");
      if (this.stockCode == null) {
        sb.append("null");
      } else {
        sb.append(this.stockCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findDnaStockHold_argsStandardSchemeFactory implements SchemeFactory {
      public findDnaStockHold_argsStandardScheme getScheme() {
        return new findDnaStockHold_argsStandardScheme();
      }
    }

    private static class findDnaStockHold_argsStandardScheme extends StandardScheme<findDnaStockHold_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findDnaStockHold_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STOCK_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stockCode = iprot.readString();
                struct.setStockCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findDnaStockHold_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stockCode != null) {
          oprot.writeFieldBegin(STOCK_CODE_FIELD_DESC);
          oprot.writeString(struct.stockCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findDnaStockHold_argsTupleSchemeFactory implements SchemeFactory {
      public findDnaStockHold_argsTupleScheme getScheme() {
        return new findDnaStockHold_argsTupleScheme();
      }
    }

    private static class findDnaStockHold_argsTupleScheme extends TupleScheme<findDnaStockHold_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findDnaStockHold_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStockCode()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStockCode()) {
          oprot.writeString(struct.stockCode);
        }
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findDnaStockHold_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.stockCode = iprot.readString();
          struct.setStockCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class findDnaStockHold_result implements org.apache.thrift.TBase<findDnaStockHold_result, findDnaStockHold_result._Fields>, java.io.Serializable, Cloneable, Comparable<findDnaStockHold_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findDnaStockHold_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findDnaStockHold_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findDnaStockHold_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findDnaStockHold_result.class, metaDataMap);
    }

    public findDnaStockHold_result() {
    }

    public findDnaStockHold_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findDnaStockHold_result(findDnaStockHold_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public findDnaStockHold_result deepCopy() {
      return new findDnaStockHold_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findDnaStockHold_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findDnaStockHold_result)
        return this.equals((findDnaStockHold_result)that);
      return false;
    }

    public boolean equals(findDnaStockHold_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findDnaStockHold_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findDnaStockHold_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findDnaStockHold_resultStandardSchemeFactory implements SchemeFactory {
      public findDnaStockHold_resultStandardScheme getScheme() {
        return new findDnaStockHold_resultStandardScheme();
      }
    }

    private static class findDnaStockHold_resultStandardScheme extends StandardScheme<findDnaStockHold_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findDnaStockHold_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findDnaStockHold_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findDnaStockHold_resultTupleSchemeFactory implements SchemeFactory {
      public findDnaStockHold_resultTupleScheme getScheme() {
        return new findDnaStockHold_resultTupleScheme();
      }
    }

    private static class findDnaStockHold_resultTupleScheme extends TupleScheme<findDnaStockHold_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findDnaStockHold_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findDnaStockHold_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLastTradeSignalByDate_args implements org.apache.thrift.TBase<getLastTradeSignalByDate_args, getLastTradeSignalByDate_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLastTradeSignalByDate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLastTradeSignalByDate_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STAT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("statDate", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField STOCK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stockCode", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLastTradeSignalByDate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLastTradeSignalByDate_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public int statDate; // required
    public String stockCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      STAT_DATE((short)2, "statDate"),
      STOCK_CODE((short)3, "stockCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // STAT_DATE
            return STAT_DATE;
          case 3: // STOCK_CODE
            return STOCK_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private static final int __STATDATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STAT_DATE, new org.apache.thrift.meta_data.FieldMetaData("statDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCK_CODE, new org.apache.thrift.meta_data.FieldMetaData("stockCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLastTradeSignalByDate_args.class, metaDataMap);
    }

    public getLastTradeSignalByDate_args() {
    }

    public getLastTradeSignalByDate_args(
      int strategyId,
      int statDate,
      String stockCode)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.statDate = statDate;
      setStatDateIsSet(true);
      this.stockCode = stockCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastTradeSignalByDate_args(getLastTradeSignalByDate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      this.statDate = other.statDate;
      if (other.isSetStockCode()) {
        this.stockCode = other.stockCode;
      }
    }

    public getLastTradeSignalByDate_args deepCopy() {
      return new getLastTradeSignalByDate_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setStatDateIsSet(false);
      this.statDate = 0;
      this.stockCode = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public getLastTradeSignalByDate_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public int getStatDate() {
      return this.statDate;
    }

    public getLastTradeSignalByDate_args setStatDate(int statDate) {
      this.statDate = statDate;
      setStatDateIsSet(true);
      return this;
    }

    public void unsetStatDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATDATE_ISSET_ID);
    }

    /** Returns true if field statDate is set (has been assigned a value) and false otherwise */
    public boolean isSetStatDate() {
      return EncodingUtils.testBit(__isset_bitfield, __STATDATE_ISSET_ID);
    }

    public void setStatDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATDATE_ISSET_ID, value);
    }

    public String getStockCode() {
      return this.stockCode;
    }

    public getLastTradeSignalByDate_args setStockCode(String stockCode) {
      this.stockCode = stockCode;
      return this;
    }

    public void unsetStockCode() {
      this.stockCode = null;
    }

    /** Returns true if field stockCode is set (has been assigned a value) and false otherwise */
    public boolean isSetStockCode() {
      return this.stockCode != null;
    }

    public void setStockCodeIsSet(boolean value) {
      if (!value) {
        this.stockCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case STAT_DATE:
        if (value == null) {
          unsetStatDate();
        } else {
          setStatDate((Integer)value);
        }
        break;

      case STOCK_CODE:
        if (value == null) {
          unsetStockCode();
        } else {
          setStockCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case STAT_DATE:
        return getStatDate();

      case STOCK_CODE:
        return getStockCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case STAT_DATE:
        return isSetStatDate();
      case STOCK_CODE:
        return isSetStockCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastTradeSignalByDate_args)
        return this.equals((getLastTradeSignalByDate_args)that);
      return false;
    }

    public boolean equals(getLastTradeSignalByDate_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_statDate = true;
      boolean that_present_statDate = true;
      if (this_present_statDate || that_present_statDate) {
        if (!(this_present_statDate && that_present_statDate))
          return false;
        if (this.statDate != that.statDate)
          return false;
      }

      boolean this_present_stockCode = true && this.isSetStockCode();
      boolean that_present_stockCode = true && that.isSetStockCode();
      if (this_present_stockCode || that_present_stockCode) {
        if (!(this_present_stockCode && that_present_stockCode))
          return false;
        if (!this.stockCode.equals(that.stockCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_statDate = true;
      list.add(present_statDate);
      if (present_statDate)
        list.add(statDate);

      boolean present_stockCode = true && (isSetStockCode());
      list.add(present_stockCode);
      if (present_stockCode)
        list.add(stockCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLastTradeSignalByDate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatDate()).compareTo(other.isSetStatDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statDate, other.statDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStockCode()).compareTo(other.isSetStockCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStockCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockCode, other.stockCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLastTradeSignalByDate_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("statDate:");
      sb.append(this.statDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stockCode:");
      if (this.stockCode == null) {
        sb.append("null");
      } else {
        sb.append(this.stockCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLastTradeSignalByDate_argsStandardSchemeFactory implements SchemeFactory {
      public getLastTradeSignalByDate_argsStandardScheme getScheme() {
        return new getLastTradeSignalByDate_argsStandardScheme();
      }
    }

    private static class getLastTradeSignalByDate_argsStandardScheme extends StandardScheme<getLastTradeSignalByDate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLastTradeSignalByDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STAT_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.statDate = iprot.readI32();
                struct.setStatDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STOCK_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stockCode = iprot.readString();
                struct.setStockCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLastTradeSignalByDate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STAT_DATE_FIELD_DESC);
        oprot.writeI32(struct.statDate);
        oprot.writeFieldEnd();
        if (struct.stockCode != null) {
          oprot.writeFieldBegin(STOCK_CODE_FIELD_DESC);
          oprot.writeString(struct.stockCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLastTradeSignalByDate_argsTupleSchemeFactory implements SchemeFactory {
      public getLastTradeSignalByDate_argsTupleScheme getScheme() {
        return new getLastTradeSignalByDate_argsTupleScheme();
      }
    }

    private static class getLastTradeSignalByDate_argsTupleScheme extends TupleScheme<getLastTradeSignalByDate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLastTradeSignalByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetStatDate()) {
          optionals.set(1);
        }
        if (struct.isSetStockCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStatDate()) {
          oprot.writeI32(struct.statDate);
        }
        if (struct.isSetStockCode()) {
          oprot.writeString(struct.stockCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLastTradeSignalByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.statDate = iprot.readI32();
          struct.setStatDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.stockCode = iprot.readString();
          struct.setStockCodeIsSet(true);
        }
      }
    }

  }

  public static class getLastTradeSignalByDate_result implements org.apache.thrift.TBase<getLastTradeSignalByDate_result, getLastTradeSignalByDate_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLastTradeSignalByDate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLastTradeSignalByDate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLastTradeSignalByDate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLastTradeSignalByDate_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLastTradeSignalByDate_result.class, metaDataMap);
    }

    public getLastTradeSignalByDate_result() {
    }

    public getLastTradeSignalByDate_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastTradeSignalByDate_result(getLastTradeSignalByDate_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getLastTradeSignalByDate_result deepCopy() {
      return new getLastTradeSignalByDate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getLastTradeSignalByDate_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastTradeSignalByDate_result)
        return this.equals((getLastTradeSignalByDate_result)that);
      return false;
    }

    public boolean equals(getLastTradeSignalByDate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLastTradeSignalByDate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLastTradeSignalByDate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLastTradeSignalByDate_resultStandardSchemeFactory implements SchemeFactory {
      public getLastTradeSignalByDate_resultStandardScheme getScheme() {
        return new getLastTradeSignalByDate_resultStandardScheme();
      }
    }

    private static class getLastTradeSignalByDate_resultStandardScheme extends StandardScheme<getLastTradeSignalByDate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLastTradeSignalByDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLastTradeSignalByDate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLastTradeSignalByDate_resultTupleSchemeFactory implements SchemeFactory {
      public getLastTradeSignalByDate_resultTupleScheme getScheme() {
        return new getLastTradeSignalByDate_resultTupleScheme();
      }
    }

    private static class getLastTradeSignalByDate_resultTupleScheme extends TupleScheme<getLastTradeSignalByDate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLastTradeSignalByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLastTradeSignalByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLastBuyTradeSignalByDate_args implements org.apache.thrift.TBase<getLastBuyTradeSignalByDate_args, getLastBuyTradeSignalByDate_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLastBuyTradeSignalByDate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLastBuyTradeSignalByDate_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STAT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("statDate", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField STOCK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stockCode", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLastBuyTradeSignalByDate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLastBuyTradeSignalByDate_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public int statDate; // required
    public String stockCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      STAT_DATE((short)2, "statDate"),
      STOCK_CODE((short)3, "stockCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // STAT_DATE
            return STAT_DATE;
          case 3: // STOCK_CODE
            return STOCK_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private static final int __STATDATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STAT_DATE, new org.apache.thrift.meta_data.FieldMetaData("statDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCK_CODE, new org.apache.thrift.meta_data.FieldMetaData("stockCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLastBuyTradeSignalByDate_args.class, metaDataMap);
    }

    public getLastBuyTradeSignalByDate_args() {
    }

    public getLastBuyTradeSignalByDate_args(
      int strategyId,
      int statDate,
      String stockCode)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.statDate = statDate;
      setStatDateIsSet(true);
      this.stockCode = stockCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastBuyTradeSignalByDate_args(getLastBuyTradeSignalByDate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      this.statDate = other.statDate;
      if (other.isSetStockCode()) {
        this.stockCode = other.stockCode;
      }
    }

    public getLastBuyTradeSignalByDate_args deepCopy() {
      return new getLastBuyTradeSignalByDate_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setStatDateIsSet(false);
      this.statDate = 0;
      this.stockCode = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public getLastBuyTradeSignalByDate_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public int getStatDate() {
      return this.statDate;
    }

    public getLastBuyTradeSignalByDate_args setStatDate(int statDate) {
      this.statDate = statDate;
      setStatDateIsSet(true);
      return this;
    }

    public void unsetStatDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATDATE_ISSET_ID);
    }

    /** Returns true if field statDate is set (has been assigned a value) and false otherwise */
    public boolean isSetStatDate() {
      return EncodingUtils.testBit(__isset_bitfield, __STATDATE_ISSET_ID);
    }

    public void setStatDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATDATE_ISSET_ID, value);
    }

    public String getStockCode() {
      return this.stockCode;
    }

    public getLastBuyTradeSignalByDate_args setStockCode(String stockCode) {
      this.stockCode = stockCode;
      return this;
    }

    public void unsetStockCode() {
      this.stockCode = null;
    }

    /** Returns true if field stockCode is set (has been assigned a value) and false otherwise */
    public boolean isSetStockCode() {
      return this.stockCode != null;
    }

    public void setStockCodeIsSet(boolean value) {
      if (!value) {
        this.stockCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case STAT_DATE:
        if (value == null) {
          unsetStatDate();
        } else {
          setStatDate((Integer)value);
        }
        break;

      case STOCK_CODE:
        if (value == null) {
          unsetStockCode();
        } else {
          setStockCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case STAT_DATE:
        return getStatDate();

      case STOCK_CODE:
        return getStockCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case STAT_DATE:
        return isSetStatDate();
      case STOCK_CODE:
        return isSetStockCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastBuyTradeSignalByDate_args)
        return this.equals((getLastBuyTradeSignalByDate_args)that);
      return false;
    }

    public boolean equals(getLastBuyTradeSignalByDate_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_statDate = true;
      boolean that_present_statDate = true;
      if (this_present_statDate || that_present_statDate) {
        if (!(this_present_statDate && that_present_statDate))
          return false;
        if (this.statDate != that.statDate)
          return false;
      }

      boolean this_present_stockCode = true && this.isSetStockCode();
      boolean that_present_stockCode = true && that.isSetStockCode();
      if (this_present_stockCode || that_present_stockCode) {
        if (!(this_present_stockCode && that_present_stockCode))
          return false;
        if (!this.stockCode.equals(that.stockCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_statDate = true;
      list.add(present_statDate);
      if (present_statDate)
        list.add(statDate);

      boolean present_stockCode = true && (isSetStockCode());
      list.add(present_stockCode);
      if (present_stockCode)
        list.add(stockCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLastBuyTradeSignalByDate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatDate()).compareTo(other.isSetStatDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statDate, other.statDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStockCode()).compareTo(other.isSetStockCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStockCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockCode, other.stockCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLastBuyTradeSignalByDate_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("statDate:");
      sb.append(this.statDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stockCode:");
      if (this.stockCode == null) {
        sb.append("null");
      } else {
        sb.append(this.stockCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLastBuyTradeSignalByDate_argsStandardSchemeFactory implements SchemeFactory {
      public getLastBuyTradeSignalByDate_argsStandardScheme getScheme() {
        return new getLastBuyTradeSignalByDate_argsStandardScheme();
      }
    }

    private static class getLastBuyTradeSignalByDate_argsStandardScheme extends StandardScheme<getLastBuyTradeSignalByDate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLastBuyTradeSignalByDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STAT_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.statDate = iprot.readI32();
                struct.setStatDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STOCK_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stockCode = iprot.readString();
                struct.setStockCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLastBuyTradeSignalByDate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STAT_DATE_FIELD_DESC);
        oprot.writeI32(struct.statDate);
        oprot.writeFieldEnd();
        if (struct.stockCode != null) {
          oprot.writeFieldBegin(STOCK_CODE_FIELD_DESC);
          oprot.writeString(struct.stockCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLastBuyTradeSignalByDate_argsTupleSchemeFactory implements SchemeFactory {
      public getLastBuyTradeSignalByDate_argsTupleScheme getScheme() {
        return new getLastBuyTradeSignalByDate_argsTupleScheme();
      }
    }

    private static class getLastBuyTradeSignalByDate_argsTupleScheme extends TupleScheme<getLastBuyTradeSignalByDate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLastBuyTradeSignalByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetStatDate()) {
          optionals.set(1);
        }
        if (struct.isSetStockCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStatDate()) {
          oprot.writeI32(struct.statDate);
        }
        if (struct.isSetStockCode()) {
          oprot.writeString(struct.stockCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLastBuyTradeSignalByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.statDate = iprot.readI32();
          struct.setStatDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.stockCode = iprot.readString();
          struct.setStockCodeIsSet(true);
        }
      }
    }

  }

  public static class getLastBuyTradeSignalByDate_result implements org.apache.thrift.TBase<getLastBuyTradeSignalByDate_result, getLastBuyTradeSignalByDate_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLastBuyTradeSignalByDate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLastBuyTradeSignalByDate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLastBuyTradeSignalByDate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLastBuyTradeSignalByDate_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLastBuyTradeSignalByDate_result.class, metaDataMap);
    }

    public getLastBuyTradeSignalByDate_result() {
    }

    public getLastBuyTradeSignalByDate_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastBuyTradeSignalByDate_result(getLastBuyTradeSignalByDate_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getLastBuyTradeSignalByDate_result deepCopy() {
      return new getLastBuyTradeSignalByDate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getLastBuyTradeSignalByDate_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastBuyTradeSignalByDate_result)
        return this.equals((getLastBuyTradeSignalByDate_result)that);
      return false;
    }

    public boolean equals(getLastBuyTradeSignalByDate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLastBuyTradeSignalByDate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLastBuyTradeSignalByDate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLastBuyTradeSignalByDate_resultStandardSchemeFactory implements SchemeFactory {
      public getLastBuyTradeSignalByDate_resultStandardScheme getScheme() {
        return new getLastBuyTradeSignalByDate_resultStandardScheme();
      }
    }

    private static class getLastBuyTradeSignalByDate_resultStandardScheme extends StandardScheme<getLastBuyTradeSignalByDate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLastBuyTradeSignalByDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLastBuyTradeSignalByDate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLastBuyTradeSignalByDate_resultTupleSchemeFactory implements SchemeFactory {
      public getLastBuyTradeSignalByDate_resultTupleScheme getScheme() {
        return new getLastBuyTradeSignalByDate_resultTupleScheme();
      }
    }

    private static class getLastBuyTradeSignalByDate_resultTupleScheme extends TupleScheme<getLastBuyTradeSignalByDate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLastBuyTradeSignalByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLastBuyTradeSignalByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
