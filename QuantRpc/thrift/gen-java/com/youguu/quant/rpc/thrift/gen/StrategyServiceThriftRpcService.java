/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.youguu.quant.rpc.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-21")
public class StrategyServiceThriftRpcService {

  public interface Iface {

    public int saveStrategyBestStock(String stockList) throws org.apache.thrift.TException;

    public int updateStrategyBestStock(String stockList) throws org.apache.thrift.TException;

    public String queryStrategyBestStock(int num) throws org.apache.thrift.TException;

    public String queryAllStrategyBestStock(int strategyId) throws org.apache.thrift.TException;

    public String queryAllStrategy(int userId) throws org.apache.thrift.TException;

    public int saveStrategyComment(String strategy) throws org.apache.thrift.TException;

    public int deleteStrategyComment(int id) throws org.apache.thrift.TException;

    public int updateStrategyComment(String strategy) throws org.apache.thrift.TException;

    public String getStrategyComment(int id) throws org.apache.thrift.TException;

    public String queryStrategyCommentByPage(int strategyId, int userId, int pageIndex, int pageSize) throws org.apache.thrift.TException;

    public String findStrategyCommentList(int strategyId, int pageIndex, int pageSize) throws org.apache.thrift.TException;

    public int updateCommentStatus(int id, int status) throws org.apache.thrift.TException;

    public int saveStrategyScore(String strategyScore) throws org.apache.thrift.TException;

    public String getStrategyScore(int strategyId) throws org.apache.thrift.TException;

    public int saveStrategy(String strategy) throws org.apache.thrift.TException;

    public int deleteStrategy(int id) throws org.apache.thrift.TException;

    public int updateStrategy(String strategy) throws org.apache.thrift.TException;

    public String getStrategy(int id) throws org.apache.thrift.TException;

    public String queryStrategyByPage(int id, int type, int displayStatus, int runStatus, int pageIndex, int pageSize) throws org.apache.thrift.TException;

    public int updateStrategyStatus(int id, int status) throws org.apache.thrift.TException;

    public int saveStrategyUser(String strategy) throws org.apache.thrift.TException;

    public int expandExpireTime(int userId, int strategyId, int days, String payType, double price) throws org.apache.thrift.TException;

    public String getStrategyUser(int id) throws org.apache.thrift.TException;

    public String findStrategyByUserId(int userId, int expire) throws org.apache.thrift.TException;

    public String queryStrategyUserByPage(int userId, int strategyId, int pageIndex, int pageSize) throws org.apache.thrift.TException;

    public int batchSaveStrategyUserStock(int userId, int strategyId, String relationList) throws org.apache.thrift.TException;

    public String findStockByStrategyAndUser(int userId, int strategyId) throws org.apache.thrift.TException;

    public int saveUserLoop(int userId) throws org.apache.thrift.TException;

    public int deleteAllUserLoop() throws org.apache.thrift.TException;

    public int incrLoopNum(int userId) throws org.apache.thrift.TException;

    public int incrFinishNum(int userId, int strategyId, String stocks) throws org.apache.thrift.TException;

    public String findUserLoopByUserId(int userId) throws org.apache.thrift.TException;

    public int batchInsertStrategyStockOneProfit(List<StrategyStockOneProfitThrift> thriftList) throws org.apache.thrift.TException;

    public int truncateStrategyStockOneProfit(int strategyId) throws org.apache.thrift.TException;

    public String queryStrategyStockOneProfit(int strategyId, String stocks) throws org.apache.thrift.TException;

    public int batchInsertStrategyStockThreeProfit(List<StrategyStockThreeProfitThrift> thriftList) throws org.apache.thrift.TException;

    public int truncateStrategyStockThreeProfit(int strategyId) throws org.apache.thrift.TException;

    public String queryStrategyStockThreeProfit(int strategyId, String stocks) throws org.apache.thrift.TException;

    public String findStrategyStockOneProfit(int strategyId, String stockCode) throws org.apache.thrift.TException;

    public String getOneYearAverageProfit(int strategyId, String stocks) throws org.apache.thrift.TException;

    public String getThreeYearAverageProfit(int strategyId, String stocks) throws org.apache.thrift.TException;

    public int saveStrategyStockBlacklist(String ssb) throws org.apache.thrift.TException;

    public String getStrategyStockBlacklist(int strategyId) throws org.apache.thrift.TException;

    public int updateStockBlack(int id, String stockCodes) throws org.apache.thrift.TException;

    public int sendTradeMq(int type, String json) throws org.apache.thrift.TException;

    public String getPermissionNum(int userId, int strategyId) throws org.apache.thrift.TException;

    /**
     * 添加推荐、热门股票
     * 
     * @param recommendHotStock
     */
    public int addRecommendHotStock(String recommendHotStock) throws org.apache.thrift.TException;

    /**
     * 批量添加推荐、热门股票
     * 
     * @param recommendHotStockList
     */
    public int batchAddRecommendHotStock(String recommendHotStockList) throws org.apache.thrift.TException;

    /**
     * 根据策略ID删除推荐、热门股票
     * 
     * @param strategyId
     */
    public int delRecommendHotStock(int strategyId) throws org.apache.thrift.TException;

    /**
     * 获取推荐、热门股票
     * 
     * @param strategyId
     * @param type
     */
    public String getRecommendHotStockList(int strategyId, int type) throws org.apache.thrift.TException;

    public String queryStrategyReport(int strategyId, String stocks, int userId) throws org.apache.thrift.TException;

    public String findStockByStrategyAndStock(int strategyId, String stockCode) throws org.apache.thrift.TException;

    public int delRecommendHotStockByType(int type, int strategyId) throws org.apache.thrift.TException;

    /**
     * 开通策略权限
     * 
     * @param userId
     * @param strategyId
     * @param day
     * @param payType
     * @param price
     */
    public int dredgeStrategyAuthByMq(int userId, int strategyId, int day, String payType, double price) throws org.apache.thrift.TException;

    public String findStrategyByCategoryId(String categoryId) throws org.apache.thrift.TException;

    public String findAllRunStrategyId() throws org.apache.thrift.TException;

    public String getStrategyUserByUidSid(int userId, int strategyId) throws org.apache.thrift.TException;

    /**
     * 心态监测 *
     */
    public int heartBeat() throws org.apache.thrift.TException;

    public String disposeQuantStk(int strategyId, String time) throws org.apache.thrift.TException;

    /**
     * 判断策略是否有数据文件 *
     * 
     * @param strategyId
     */
    public boolean isExitsFile(int strategyId) throws org.apache.thrift.TException;

    /**
     * 清理策略数据 *
     * 
     * @param strategyId
     */
    public boolean clearStrategyData(int strategyId) throws org.apache.thrift.TException;

    public String findAllValidRelation() throws org.apache.thrift.TException;

    public String findStrategyBuyUserCount(String time) throws org.apache.thrift.TException;

    public String findStrategyUserLoopCount(String time) throws org.apache.thrift.TException;

    public String queryStrategyBestStockListBySid(int sid, int limit) throws org.apache.thrift.TException;

    /**
     * 关注股票
     * 
     * @param userId
     * @param strategyId
     * @param stockCode
     */
    public int saveStrategyUserStock(int userId, int strategyId, String stockCode) throws org.apache.thrift.TException;

    /**
     * 取消关注股票
     * 
     * @param userId
     * @param strategyId
     * @param stockCode
     */
    public int deleteStrategyUserStock(int userId, int strategyId, String stockCode) throws org.apache.thrift.TException;

    /**
     * 查询关注股票数量
     * 
     * @param userId
     * @param strategyId
     */
    public int selectFollowNum(int userId, int strategyId) throws org.apache.thrift.TException;

    /**
     * 查询今日买入和卖出
     * @param strategyId 策略id
     * @param type 1-当日买入；2-当日卖出
     * @param seq 序号（使用最后一条的rank值）
     * @param num 请求的记录数
     * 
     * 
     * @param strategyId
     * @param type
     * @param seq
     * @param num
     */
    public String queryTodayTrade(int strategyId, int type, long seq, int num) throws org.apache.thrift.TException;

    /**
     * 添加今日买入和卖出的数据 -- 同步操作当日买入卖出数量
     * @param strategyId 策略id
     * @param stockTradeToday 完整的json对象
     * 
     * 
     * @param strategyId
     * @param stockTradeToday
     */
    public int addTodayTrade(int strategyId, String stockTradeToday) throws org.apache.thrift.TException;

    /**
     * 凌晨清理今天的数据 清空买入卖出 ， 清0买入卖出数量 重新计算持仓数量
     * @param strategyId策略id
     * @param positionNum当前持仓数量
     * 
     * 
     * @param strategyId
     * @param positionNum
     */
    public int clearTodayTrade(int strategyId, int positionNum) throws org.apache.thrift.TException;

    /**
     * 修改当日买入的盈利率 *
     * 
     * @param strategyId
     * @param stockTradeTodayList
     */
    public int updateTodayBuy(int strategyId, String stockTradeTodayList) throws org.apache.thrift.TException;

    /**
     * 增加近五日买入的股票 *
     * 
     * @param strategyId
     * @param stockTradeNear5DaysList
     */
    public int addStockTradeNear5Days(int strategyId, String stockTradeNear5DaysList) throws org.apache.thrift.TException;

    /**
     * 清空近五日买入 *
     * 
     * @param strategyId
     */
    public int clearNear5DaysTrade(int strategyId) throws org.apache.thrift.TException;

    /**
     * 查询近五日买入
     * @param strategyId 策略id
     * @param seq 序号（使用最后一条的rank值）
     * @param num 请求的记录数
     * 
     * 
     * @param strategyId
     * @param seq
     * @param num
     */
    public String queryDays5Trade(int strategyId, long seq, int num) throws org.apache.thrift.TException;

    /**
     * 搜索股票结果页面
     * 
     * @param userId
     * @param strategyId
     * @param stockCode
     */
    public String searchStockResult(int userId, int strategyId, String stockCode) throws org.apache.thrift.TException;

    public String getStrategyExtend(int strategyId) throws org.apache.thrift.TException;

    public String findUserFollowStock(int userId, int strategyId) throws org.apache.thrift.TException;

    public String searchStrategyBestStock() throws org.apache.thrift.TException;

    public String findReportData(int day, double lt, double rt, int num) throws org.apache.thrift.TException;

    public String findAllStrategyUser(String time) throws org.apache.thrift.TException;

    public int incrDNALoopNum(int userId) throws org.apache.thrift.TException;

    public String findDNALoopByUserId(int userId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void saveStrategyBestStock(String stockList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateStrategyBestStock(String stockList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryStrategyBestStock(int num, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryAllStrategyBestStock(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryAllStrategy(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveStrategyComment(String strategy, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteStrategyComment(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateStrategyComment(String strategy, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStrategyComment(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryStrategyCommentByPage(int strategyId, int userId, int pageIndex, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findStrategyCommentList(int strategyId, int pageIndex, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateCommentStatus(int id, int status, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveStrategyScore(String strategyScore, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStrategyScore(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveStrategy(String strategy, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteStrategy(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateStrategy(String strategy, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStrategy(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryStrategyByPage(int id, int type, int displayStatus, int runStatus, int pageIndex, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateStrategyStatus(int id, int status, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveStrategyUser(String strategy, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void expandExpireTime(int userId, int strategyId, int days, String payType, double price, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStrategyUser(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findStrategyByUserId(int userId, int expire, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryStrategyUserByPage(int userId, int strategyId, int pageIndex, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchSaveStrategyUserStock(int userId, int strategyId, String relationList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findStockByStrategyAndUser(int userId, int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveUserLoop(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteAllUserLoop(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void incrLoopNum(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void incrFinishNum(int userId, int strategyId, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findUserLoopByUserId(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchInsertStrategyStockOneProfit(List<StrategyStockOneProfitThrift> thriftList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void truncateStrategyStockOneProfit(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryStrategyStockOneProfit(int strategyId, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchInsertStrategyStockThreeProfit(List<StrategyStockThreeProfitThrift> thriftList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void truncateStrategyStockThreeProfit(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryStrategyStockThreeProfit(int strategyId, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findStrategyStockOneProfit(int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOneYearAverageProfit(int strategyId, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getThreeYearAverageProfit(int strategyId, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveStrategyStockBlacklist(String ssb, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStrategyStockBlacklist(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateStockBlack(int id, String stockCodes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendTradeMq(int type, String json, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPermissionNum(int userId, int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addRecommendHotStock(String recommendHotStock, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchAddRecommendHotStock(String recommendHotStockList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delRecommendHotStock(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRecommendHotStockList(int strategyId, int type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryStrategyReport(int strategyId, String stocks, int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findStockByStrategyAndStock(int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delRecommendHotStockByType(int type, int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dredgeStrategyAuthByMq(int userId, int strategyId, int day, String payType, double price, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findStrategyByCategoryId(String categoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAllRunStrategyId(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStrategyUserByUidSid(int userId, int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void heartBeat(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void disposeQuantStk(int strategyId, String time, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isExitsFile(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void clearStrategyData(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAllValidRelation(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findStrategyBuyUserCount(String time, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findStrategyUserLoopCount(String time, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryStrategyBestStockListBySid(int sid, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveStrategyUserStock(int userId, int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteStrategyUserStock(int userId, int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void selectFollowNum(int userId, int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryTodayTrade(int strategyId, int type, long seq, int num, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addTodayTrade(int strategyId, String stockTradeToday, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void clearTodayTrade(int strategyId, int positionNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateTodayBuy(int strategyId, String stockTradeTodayList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addStockTradeNear5Days(int strategyId, String stockTradeNear5DaysList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void clearNear5DaysTrade(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryDays5Trade(int strategyId, long seq, int num, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void searchStockResult(int userId, int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStrategyExtend(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findUserFollowStock(int userId, int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void searchStrategyBestStock(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findReportData(int day, double lt, double rt, int num, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAllStrategyUser(String time, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void incrDNALoopNum(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findDNALoopByUserId(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int saveStrategyBestStock(String stockList) throws org.apache.thrift.TException
    {
      send_saveStrategyBestStock(stockList);
      return recv_saveStrategyBestStock();
    }

    public void send_saveStrategyBestStock(String stockList) throws org.apache.thrift.TException
    {
      saveStrategyBestStock_args args = new saveStrategyBestStock_args();
      args.setStockList(stockList);
      sendBase("saveStrategyBestStock", args);
    }

    public int recv_saveStrategyBestStock() throws org.apache.thrift.TException
    {
      saveStrategyBestStock_result result = new saveStrategyBestStock_result();
      receiveBase(result, "saveStrategyBestStock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveStrategyBestStock failed: unknown result");
    }

    public int updateStrategyBestStock(String stockList) throws org.apache.thrift.TException
    {
      send_updateStrategyBestStock(stockList);
      return recv_updateStrategyBestStock();
    }

    public void send_updateStrategyBestStock(String stockList) throws org.apache.thrift.TException
    {
      updateStrategyBestStock_args args = new updateStrategyBestStock_args();
      args.setStockList(stockList);
      sendBase("updateStrategyBestStock", args);
    }

    public int recv_updateStrategyBestStock() throws org.apache.thrift.TException
    {
      updateStrategyBestStock_result result = new updateStrategyBestStock_result();
      receiveBase(result, "updateStrategyBestStock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateStrategyBestStock failed: unknown result");
    }

    public String queryStrategyBestStock(int num) throws org.apache.thrift.TException
    {
      send_queryStrategyBestStock(num);
      return recv_queryStrategyBestStock();
    }

    public void send_queryStrategyBestStock(int num) throws org.apache.thrift.TException
    {
      queryStrategyBestStock_args args = new queryStrategyBestStock_args();
      args.setNum(num);
      sendBase("queryStrategyBestStock", args);
    }

    public String recv_queryStrategyBestStock() throws org.apache.thrift.TException
    {
      queryStrategyBestStock_result result = new queryStrategyBestStock_result();
      receiveBase(result, "queryStrategyBestStock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryStrategyBestStock failed: unknown result");
    }

    public String queryAllStrategyBestStock(int strategyId) throws org.apache.thrift.TException
    {
      send_queryAllStrategyBestStock(strategyId);
      return recv_queryAllStrategyBestStock();
    }

    public void send_queryAllStrategyBestStock(int strategyId) throws org.apache.thrift.TException
    {
      queryAllStrategyBestStock_args args = new queryAllStrategyBestStock_args();
      args.setStrategyId(strategyId);
      sendBase("queryAllStrategyBestStock", args);
    }

    public String recv_queryAllStrategyBestStock() throws org.apache.thrift.TException
    {
      queryAllStrategyBestStock_result result = new queryAllStrategyBestStock_result();
      receiveBase(result, "queryAllStrategyBestStock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryAllStrategyBestStock failed: unknown result");
    }

    public String queryAllStrategy(int userId) throws org.apache.thrift.TException
    {
      send_queryAllStrategy(userId);
      return recv_queryAllStrategy();
    }

    public void send_queryAllStrategy(int userId) throws org.apache.thrift.TException
    {
      queryAllStrategy_args args = new queryAllStrategy_args();
      args.setUserId(userId);
      sendBase("queryAllStrategy", args);
    }

    public String recv_queryAllStrategy() throws org.apache.thrift.TException
    {
      queryAllStrategy_result result = new queryAllStrategy_result();
      receiveBase(result, "queryAllStrategy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryAllStrategy failed: unknown result");
    }

    public int saveStrategyComment(String strategy) throws org.apache.thrift.TException
    {
      send_saveStrategyComment(strategy);
      return recv_saveStrategyComment();
    }

    public void send_saveStrategyComment(String strategy) throws org.apache.thrift.TException
    {
      saveStrategyComment_args args = new saveStrategyComment_args();
      args.setStrategy(strategy);
      sendBase("saveStrategyComment", args);
    }

    public int recv_saveStrategyComment() throws org.apache.thrift.TException
    {
      saveStrategyComment_result result = new saveStrategyComment_result();
      receiveBase(result, "saveStrategyComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveStrategyComment failed: unknown result");
    }

    public int deleteStrategyComment(int id) throws org.apache.thrift.TException
    {
      send_deleteStrategyComment(id);
      return recv_deleteStrategyComment();
    }

    public void send_deleteStrategyComment(int id) throws org.apache.thrift.TException
    {
      deleteStrategyComment_args args = new deleteStrategyComment_args();
      args.setId(id);
      sendBase("deleteStrategyComment", args);
    }

    public int recv_deleteStrategyComment() throws org.apache.thrift.TException
    {
      deleteStrategyComment_result result = new deleteStrategyComment_result();
      receiveBase(result, "deleteStrategyComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteStrategyComment failed: unknown result");
    }

    public int updateStrategyComment(String strategy) throws org.apache.thrift.TException
    {
      send_updateStrategyComment(strategy);
      return recv_updateStrategyComment();
    }

    public void send_updateStrategyComment(String strategy) throws org.apache.thrift.TException
    {
      updateStrategyComment_args args = new updateStrategyComment_args();
      args.setStrategy(strategy);
      sendBase("updateStrategyComment", args);
    }

    public int recv_updateStrategyComment() throws org.apache.thrift.TException
    {
      updateStrategyComment_result result = new updateStrategyComment_result();
      receiveBase(result, "updateStrategyComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateStrategyComment failed: unknown result");
    }

    public String getStrategyComment(int id) throws org.apache.thrift.TException
    {
      send_getStrategyComment(id);
      return recv_getStrategyComment();
    }

    public void send_getStrategyComment(int id) throws org.apache.thrift.TException
    {
      getStrategyComment_args args = new getStrategyComment_args();
      args.setId(id);
      sendBase("getStrategyComment", args);
    }

    public String recv_getStrategyComment() throws org.apache.thrift.TException
    {
      getStrategyComment_result result = new getStrategyComment_result();
      receiveBase(result, "getStrategyComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStrategyComment failed: unknown result");
    }

    public String queryStrategyCommentByPage(int strategyId, int userId, int pageIndex, int pageSize) throws org.apache.thrift.TException
    {
      send_queryStrategyCommentByPage(strategyId, userId, pageIndex, pageSize);
      return recv_queryStrategyCommentByPage();
    }

    public void send_queryStrategyCommentByPage(int strategyId, int userId, int pageIndex, int pageSize) throws org.apache.thrift.TException
    {
      queryStrategyCommentByPage_args args = new queryStrategyCommentByPage_args();
      args.setStrategyId(strategyId);
      args.setUserId(userId);
      args.setPageIndex(pageIndex);
      args.setPageSize(pageSize);
      sendBase("queryStrategyCommentByPage", args);
    }

    public String recv_queryStrategyCommentByPage() throws org.apache.thrift.TException
    {
      queryStrategyCommentByPage_result result = new queryStrategyCommentByPage_result();
      receiveBase(result, "queryStrategyCommentByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryStrategyCommentByPage failed: unknown result");
    }

    public String findStrategyCommentList(int strategyId, int pageIndex, int pageSize) throws org.apache.thrift.TException
    {
      send_findStrategyCommentList(strategyId, pageIndex, pageSize);
      return recv_findStrategyCommentList();
    }

    public void send_findStrategyCommentList(int strategyId, int pageIndex, int pageSize) throws org.apache.thrift.TException
    {
      findStrategyCommentList_args args = new findStrategyCommentList_args();
      args.setStrategyId(strategyId);
      args.setPageIndex(pageIndex);
      args.setPageSize(pageSize);
      sendBase("findStrategyCommentList", args);
    }

    public String recv_findStrategyCommentList() throws org.apache.thrift.TException
    {
      findStrategyCommentList_result result = new findStrategyCommentList_result();
      receiveBase(result, "findStrategyCommentList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findStrategyCommentList failed: unknown result");
    }

    public int updateCommentStatus(int id, int status) throws org.apache.thrift.TException
    {
      send_updateCommentStatus(id, status);
      return recv_updateCommentStatus();
    }

    public void send_updateCommentStatus(int id, int status) throws org.apache.thrift.TException
    {
      updateCommentStatus_args args = new updateCommentStatus_args();
      args.setId(id);
      args.setStatus(status);
      sendBase("updateCommentStatus", args);
    }

    public int recv_updateCommentStatus() throws org.apache.thrift.TException
    {
      updateCommentStatus_result result = new updateCommentStatus_result();
      receiveBase(result, "updateCommentStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCommentStatus failed: unknown result");
    }

    public int saveStrategyScore(String strategyScore) throws org.apache.thrift.TException
    {
      send_saveStrategyScore(strategyScore);
      return recv_saveStrategyScore();
    }

    public void send_saveStrategyScore(String strategyScore) throws org.apache.thrift.TException
    {
      saveStrategyScore_args args = new saveStrategyScore_args();
      args.setStrategyScore(strategyScore);
      sendBase("saveStrategyScore", args);
    }

    public int recv_saveStrategyScore() throws org.apache.thrift.TException
    {
      saveStrategyScore_result result = new saveStrategyScore_result();
      receiveBase(result, "saveStrategyScore");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveStrategyScore failed: unknown result");
    }

    public String getStrategyScore(int strategyId) throws org.apache.thrift.TException
    {
      send_getStrategyScore(strategyId);
      return recv_getStrategyScore();
    }

    public void send_getStrategyScore(int strategyId) throws org.apache.thrift.TException
    {
      getStrategyScore_args args = new getStrategyScore_args();
      args.setStrategyId(strategyId);
      sendBase("getStrategyScore", args);
    }

    public String recv_getStrategyScore() throws org.apache.thrift.TException
    {
      getStrategyScore_result result = new getStrategyScore_result();
      receiveBase(result, "getStrategyScore");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStrategyScore failed: unknown result");
    }

    public int saveStrategy(String strategy) throws org.apache.thrift.TException
    {
      send_saveStrategy(strategy);
      return recv_saveStrategy();
    }

    public void send_saveStrategy(String strategy) throws org.apache.thrift.TException
    {
      saveStrategy_args args = new saveStrategy_args();
      args.setStrategy(strategy);
      sendBase("saveStrategy", args);
    }

    public int recv_saveStrategy() throws org.apache.thrift.TException
    {
      saveStrategy_result result = new saveStrategy_result();
      receiveBase(result, "saveStrategy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveStrategy failed: unknown result");
    }

    public int deleteStrategy(int id) throws org.apache.thrift.TException
    {
      send_deleteStrategy(id);
      return recv_deleteStrategy();
    }

    public void send_deleteStrategy(int id) throws org.apache.thrift.TException
    {
      deleteStrategy_args args = new deleteStrategy_args();
      args.setId(id);
      sendBase("deleteStrategy", args);
    }

    public int recv_deleteStrategy() throws org.apache.thrift.TException
    {
      deleteStrategy_result result = new deleteStrategy_result();
      receiveBase(result, "deleteStrategy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteStrategy failed: unknown result");
    }

    public int updateStrategy(String strategy) throws org.apache.thrift.TException
    {
      send_updateStrategy(strategy);
      return recv_updateStrategy();
    }

    public void send_updateStrategy(String strategy) throws org.apache.thrift.TException
    {
      updateStrategy_args args = new updateStrategy_args();
      args.setStrategy(strategy);
      sendBase("updateStrategy", args);
    }

    public int recv_updateStrategy() throws org.apache.thrift.TException
    {
      updateStrategy_result result = new updateStrategy_result();
      receiveBase(result, "updateStrategy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateStrategy failed: unknown result");
    }

    public String getStrategy(int id) throws org.apache.thrift.TException
    {
      send_getStrategy(id);
      return recv_getStrategy();
    }

    public void send_getStrategy(int id) throws org.apache.thrift.TException
    {
      getStrategy_args args = new getStrategy_args();
      args.setId(id);
      sendBase("getStrategy", args);
    }

    public String recv_getStrategy() throws org.apache.thrift.TException
    {
      getStrategy_result result = new getStrategy_result();
      receiveBase(result, "getStrategy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStrategy failed: unknown result");
    }

    public String queryStrategyByPage(int id, int type, int displayStatus, int runStatus, int pageIndex, int pageSize) throws org.apache.thrift.TException
    {
      send_queryStrategyByPage(id, type, displayStatus, runStatus, pageIndex, pageSize);
      return recv_queryStrategyByPage();
    }

    public void send_queryStrategyByPage(int id, int type, int displayStatus, int runStatus, int pageIndex, int pageSize) throws org.apache.thrift.TException
    {
      queryStrategyByPage_args args = new queryStrategyByPage_args();
      args.setId(id);
      args.setType(type);
      args.setDisplayStatus(displayStatus);
      args.setRunStatus(runStatus);
      args.setPageIndex(pageIndex);
      args.setPageSize(pageSize);
      sendBase("queryStrategyByPage", args);
    }

    public String recv_queryStrategyByPage() throws org.apache.thrift.TException
    {
      queryStrategyByPage_result result = new queryStrategyByPage_result();
      receiveBase(result, "queryStrategyByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryStrategyByPage failed: unknown result");
    }

    public int updateStrategyStatus(int id, int status) throws org.apache.thrift.TException
    {
      send_updateStrategyStatus(id, status);
      return recv_updateStrategyStatus();
    }

    public void send_updateStrategyStatus(int id, int status) throws org.apache.thrift.TException
    {
      updateStrategyStatus_args args = new updateStrategyStatus_args();
      args.setId(id);
      args.setStatus(status);
      sendBase("updateStrategyStatus", args);
    }

    public int recv_updateStrategyStatus() throws org.apache.thrift.TException
    {
      updateStrategyStatus_result result = new updateStrategyStatus_result();
      receiveBase(result, "updateStrategyStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateStrategyStatus failed: unknown result");
    }

    public int saveStrategyUser(String strategy) throws org.apache.thrift.TException
    {
      send_saveStrategyUser(strategy);
      return recv_saveStrategyUser();
    }

    public void send_saveStrategyUser(String strategy) throws org.apache.thrift.TException
    {
      saveStrategyUser_args args = new saveStrategyUser_args();
      args.setStrategy(strategy);
      sendBase("saveStrategyUser", args);
    }

    public int recv_saveStrategyUser() throws org.apache.thrift.TException
    {
      saveStrategyUser_result result = new saveStrategyUser_result();
      receiveBase(result, "saveStrategyUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveStrategyUser failed: unknown result");
    }

    public int expandExpireTime(int userId, int strategyId, int days, String payType, double price) throws org.apache.thrift.TException
    {
      send_expandExpireTime(userId, strategyId, days, payType, price);
      return recv_expandExpireTime();
    }

    public void send_expandExpireTime(int userId, int strategyId, int days, String payType, double price) throws org.apache.thrift.TException
    {
      expandExpireTime_args args = new expandExpireTime_args();
      args.setUserId(userId);
      args.setStrategyId(strategyId);
      args.setDays(days);
      args.setPayType(payType);
      args.setPrice(price);
      sendBase("expandExpireTime", args);
    }

    public int recv_expandExpireTime() throws org.apache.thrift.TException
    {
      expandExpireTime_result result = new expandExpireTime_result();
      receiveBase(result, "expandExpireTime");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "expandExpireTime failed: unknown result");
    }

    public String getStrategyUser(int id) throws org.apache.thrift.TException
    {
      send_getStrategyUser(id);
      return recv_getStrategyUser();
    }

    public void send_getStrategyUser(int id) throws org.apache.thrift.TException
    {
      getStrategyUser_args args = new getStrategyUser_args();
      args.setId(id);
      sendBase("getStrategyUser", args);
    }

    public String recv_getStrategyUser() throws org.apache.thrift.TException
    {
      getStrategyUser_result result = new getStrategyUser_result();
      receiveBase(result, "getStrategyUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStrategyUser failed: unknown result");
    }

    public String findStrategyByUserId(int userId, int expire) throws org.apache.thrift.TException
    {
      send_findStrategyByUserId(userId, expire);
      return recv_findStrategyByUserId();
    }

    public void send_findStrategyByUserId(int userId, int expire) throws org.apache.thrift.TException
    {
      findStrategyByUserId_args args = new findStrategyByUserId_args();
      args.setUserId(userId);
      args.setExpire(expire);
      sendBase("findStrategyByUserId", args);
    }

    public String recv_findStrategyByUserId() throws org.apache.thrift.TException
    {
      findStrategyByUserId_result result = new findStrategyByUserId_result();
      receiveBase(result, "findStrategyByUserId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findStrategyByUserId failed: unknown result");
    }

    public String queryStrategyUserByPage(int userId, int strategyId, int pageIndex, int pageSize) throws org.apache.thrift.TException
    {
      send_queryStrategyUserByPage(userId, strategyId, pageIndex, pageSize);
      return recv_queryStrategyUserByPage();
    }

    public void send_queryStrategyUserByPage(int userId, int strategyId, int pageIndex, int pageSize) throws org.apache.thrift.TException
    {
      queryStrategyUserByPage_args args = new queryStrategyUserByPage_args();
      args.setUserId(userId);
      args.setStrategyId(strategyId);
      args.setPageIndex(pageIndex);
      args.setPageSize(pageSize);
      sendBase("queryStrategyUserByPage", args);
    }

    public String recv_queryStrategyUserByPage() throws org.apache.thrift.TException
    {
      queryStrategyUserByPage_result result = new queryStrategyUserByPage_result();
      receiveBase(result, "queryStrategyUserByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryStrategyUserByPage failed: unknown result");
    }

    public int batchSaveStrategyUserStock(int userId, int strategyId, String relationList) throws org.apache.thrift.TException
    {
      send_batchSaveStrategyUserStock(userId, strategyId, relationList);
      return recv_batchSaveStrategyUserStock();
    }

    public void send_batchSaveStrategyUserStock(int userId, int strategyId, String relationList) throws org.apache.thrift.TException
    {
      batchSaveStrategyUserStock_args args = new batchSaveStrategyUserStock_args();
      args.setUserId(userId);
      args.setStrategyId(strategyId);
      args.setRelationList(relationList);
      sendBase("batchSaveStrategyUserStock", args);
    }

    public int recv_batchSaveStrategyUserStock() throws org.apache.thrift.TException
    {
      batchSaveStrategyUserStock_result result = new batchSaveStrategyUserStock_result();
      receiveBase(result, "batchSaveStrategyUserStock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchSaveStrategyUserStock failed: unknown result");
    }

    public String findStockByStrategyAndUser(int userId, int strategyId) throws org.apache.thrift.TException
    {
      send_findStockByStrategyAndUser(userId, strategyId);
      return recv_findStockByStrategyAndUser();
    }

    public void send_findStockByStrategyAndUser(int userId, int strategyId) throws org.apache.thrift.TException
    {
      findStockByStrategyAndUser_args args = new findStockByStrategyAndUser_args();
      args.setUserId(userId);
      args.setStrategyId(strategyId);
      sendBase("findStockByStrategyAndUser", args);
    }

    public String recv_findStockByStrategyAndUser() throws org.apache.thrift.TException
    {
      findStockByStrategyAndUser_result result = new findStockByStrategyAndUser_result();
      receiveBase(result, "findStockByStrategyAndUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findStockByStrategyAndUser failed: unknown result");
    }

    public int saveUserLoop(int userId) throws org.apache.thrift.TException
    {
      send_saveUserLoop(userId);
      return recv_saveUserLoop();
    }

    public void send_saveUserLoop(int userId) throws org.apache.thrift.TException
    {
      saveUserLoop_args args = new saveUserLoop_args();
      args.setUserId(userId);
      sendBase("saveUserLoop", args);
    }

    public int recv_saveUserLoop() throws org.apache.thrift.TException
    {
      saveUserLoop_result result = new saveUserLoop_result();
      receiveBase(result, "saveUserLoop");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveUserLoop failed: unknown result");
    }

    public int deleteAllUserLoop() throws org.apache.thrift.TException
    {
      send_deleteAllUserLoop();
      return recv_deleteAllUserLoop();
    }

    public void send_deleteAllUserLoop() throws org.apache.thrift.TException
    {
      deleteAllUserLoop_args args = new deleteAllUserLoop_args();
      sendBase("deleteAllUserLoop", args);
    }

    public int recv_deleteAllUserLoop() throws org.apache.thrift.TException
    {
      deleteAllUserLoop_result result = new deleteAllUserLoop_result();
      receiveBase(result, "deleteAllUserLoop");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteAllUserLoop failed: unknown result");
    }

    public int incrLoopNum(int userId) throws org.apache.thrift.TException
    {
      send_incrLoopNum(userId);
      return recv_incrLoopNum();
    }

    public void send_incrLoopNum(int userId) throws org.apache.thrift.TException
    {
      incrLoopNum_args args = new incrLoopNum_args();
      args.setUserId(userId);
      sendBase("incrLoopNum", args);
    }

    public int recv_incrLoopNum() throws org.apache.thrift.TException
    {
      incrLoopNum_result result = new incrLoopNum_result();
      receiveBase(result, "incrLoopNum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "incrLoopNum failed: unknown result");
    }

    public int incrFinishNum(int userId, int strategyId, String stocks) throws org.apache.thrift.TException
    {
      send_incrFinishNum(userId, strategyId, stocks);
      return recv_incrFinishNum();
    }

    public void send_incrFinishNum(int userId, int strategyId, String stocks) throws org.apache.thrift.TException
    {
      incrFinishNum_args args = new incrFinishNum_args();
      args.setUserId(userId);
      args.setStrategyId(strategyId);
      args.setStocks(stocks);
      sendBase("incrFinishNum", args);
    }

    public int recv_incrFinishNum() throws org.apache.thrift.TException
    {
      incrFinishNum_result result = new incrFinishNum_result();
      receiveBase(result, "incrFinishNum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "incrFinishNum failed: unknown result");
    }

    public String findUserLoopByUserId(int userId) throws org.apache.thrift.TException
    {
      send_findUserLoopByUserId(userId);
      return recv_findUserLoopByUserId();
    }

    public void send_findUserLoopByUserId(int userId) throws org.apache.thrift.TException
    {
      findUserLoopByUserId_args args = new findUserLoopByUserId_args();
      args.setUserId(userId);
      sendBase("findUserLoopByUserId", args);
    }

    public String recv_findUserLoopByUserId() throws org.apache.thrift.TException
    {
      findUserLoopByUserId_result result = new findUserLoopByUserId_result();
      receiveBase(result, "findUserLoopByUserId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserLoopByUserId failed: unknown result");
    }

    public int batchInsertStrategyStockOneProfit(List<StrategyStockOneProfitThrift> thriftList) throws org.apache.thrift.TException
    {
      send_batchInsertStrategyStockOneProfit(thriftList);
      return recv_batchInsertStrategyStockOneProfit();
    }

    public void send_batchInsertStrategyStockOneProfit(List<StrategyStockOneProfitThrift> thriftList) throws org.apache.thrift.TException
    {
      batchInsertStrategyStockOneProfit_args args = new batchInsertStrategyStockOneProfit_args();
      args.setThriftList(thriftList);
      sendBase("batchInsertStrategyStockOneProfit", args);
    }

    public int recv_batchInsertStrategyStockOneProfit() throws org.apache.thrift.TException
    {
      batchInsertStrategyStockOneProfit_result result = new batchInsertStrategyStockOneProfit_result();
      receiveBase(result, "batchInsertStrategyStockOneProfit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchInsertStrategyStockOneProfit failed: unknown result");
    }

    public int truncateStrategyStockOneProfit(int strategyId) throws org.apache.thrift.TException
    {
      send_truncateStrategyStockOneProfit(strategyId);
      return recv_truncateStrategyStockOneProfit();
    }

    public void send_truncateStrategyStockOneProfit(int strategyId) throws org.apache.thrift.TException
    {
      truncateStrategyStockOneProfit_args args = new truncateStrategyStockOneProfit_args();
      args.setStrategyId(strategyId);
      sendBase("truncateStrategyStockOneProfit", args);
    }

    public int recv_truncateStrategyStockOneProfit() throws org.apache.thrift.TException
    {
      truncateStrategyStockOneProfit_result result = new truncateStrategyStockOneProfit_result();
      receiveBase(result, "truncateStrategyStockOneProfit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "truncateStrategyStockOneProfit failed: unknown result");
    }

    public String queryStrategyStockOneProfit(int strategyId, String stocks) throws org.apache.thrift.TException
    {
      send_queryStrategyStockOneProfit(strategyId, stocks);
      return recv_queryStrategyStockOneProfit();
    }

    public void send_queryStrategyStockOneProfit(int strategyId, String stocks) throws org.apache.thrift.TException
    {
      queryStrategyStockOneProfit_args args = new queryStrategyStockOneProfit_args();
      args.setStrategyId(strategyId);
      args.setStocks(stocks);
      sendBase("queryStrategyStockOneProfit", args);
    }

    public String recv_queryStrategyStockOneProfit() throws org.apache.thrift.TException
    {
      queryStrategyStockOneProfit_result result = new queryStrategyStockOneProfit_result();
      receiveBase(result, "queryStrategyStockOneProfit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryStrategyStockOneProfit failed: unknown result");
    }

    public int batchInsertStrategyStockThreeProfit(List<StrategyStockThreeProfitThrift> thriftList) throws org.apache.thrift.TException
    {
      send_batchInsertStrategyStockThreeProfit(thriftList);
      return recv_batchInsertStrategyStockThreeProfit();
    }

    public void send_batchInsertStrategyStockThreeProfit(List<StrategyStockThreeProfitThrift> thriftList) throws org.apache.thrift.TException
    {
      batchInsertStrategyStockThreeProfit_args args = new batchInsertStrategyStockThreeProfit_args();
      args.setThriftList(thriftList);
      sendBase("batchInsertStrategyStockThreeProfit", args);
    }

    public int recv_batchInsertStrategyStockThreeProfit() throws org.apache.thrift.TException
    {
      batchInsertStrategyStockThreeProfit_result result = new batchInsertStrategyStockThreeProfit_result();
      receiveBase(result, "batchInsertStrategyStockThreeProfit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchInsertStrategyStockThreeProfit failed: unknown result");
    }

    public int truncateStrategyStockThreeProfit(int strategyId) throws org.apache.thrift.TException
    {
      send_truncateStrategyStockThreeProfit(strategyId);
      return recv_truncateStrategyStockThreeProfit();
    }

    public void send_truncateStrategyStockThreeProfit(int strategyId) throws org.apache.thrift.TException
    {
      truncateStrategyStockThreeProfit_args args = new truncateStrategyStockThreeProfit_args();
      args.setStrategyId(strategyId);
      sendBase("truncateStrategyStockThreeProfit", args);
    }

    public int recv_truncateStrategyStockThreeProfit() throws org.apache.thrift.TException
    {
      truncateStrategyStockThreeProfit_result result = new truncateStrategyStockThreeProfit_result();
      receiveBase(result, "truncateStrategyStockThreeProfit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "truncateStrategyStockThreeProfit failed: unknown result");
    }

    public String queryStrategyStockThreeProfit(int strategyId, String stocks) throws org.apache.thrift.TException
    {
      send_queryStrategyStockThreeProfit(strategyId, stocks);
      return recv_queryStrategyStockThreeProfit();
    }

    public void send_queryStrategyStockThreeProfit(int strategyId, String stocks) throws org.apache.thrift.TException
    {
      queryStrategyStockThreeProfit_args args = new queryStrategyStockThreeProfit_args();
      args.setStrategyId(strategyId);
      args.setStocks(stocks);
      sendBase("queryStrategyStockThreeProfit", args);
    }

    public String recv_queryStrategyStockThreeProfit() throws org.apache.thrift.TException
    {
      queryStrategyStockThreeProfit_result result = new queryStrategyStockThreeProfit_result();
      receiveBase(result, "queryStrategyStockThreeProfit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryStrategyStockThreeProfit failed: unknown result");
    }

    public String findStrategyStockOneProfit(int strategyId, String stockCode) throws org.apache.thrift.TException
    {
      send_findStrategyStockOneProfit(strategyId, stockCode);
      return recv_findStrategyStockOneProfit();
    }

    public void send_findStrategyStockOneProfit(int strategyId, String stockCode) throws org.apache.thrift.TException
    {
      findStrategyStockOneProfit_args args = new findStrategyStockOneProfit_args();
      args.setStrategyId(strategyId);
      args.setStockCode(stockCode);
      sendBase("findStrategyStockOneProfit", args);
    }

    public String recv_findStrategyStockOneProfit() throws org.apache.thrift.TException
    {
      findStrategyStockOneProfit_result result = new findStrategyStockOneProfit_result();
      receiveBase(result, "findStrategyStockOneProfit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findStrategyStockOneProfit failed: unknown result");
    }

    public String getOneYearAverageProfit(int strategyId, String stocks) throws org.apache.thrift.TException
    {
      send_getOneYearAverageProfit(strategyId, stocks);
      return recv_getOneYearAverageProfit();
    }

    public void send_getOneYearAverageProfit(int strategyId, String stocks) throws org.apache.thrift.TException
    {
      getOneYearAverageProfit_args args = new getOneYearAverageProfit_args();
      args.setStrategyId(strategyId);
      args.setStocks(stocks);
      sendBase("getOneYearAverageProfit", args);
    }

    public String recv_getOneYearAverageProfit() throws org.apache.thrift.TException
    {
      getOneYearAverageProfit_result result = new getOneYearAverageProfit_result();
      receiveBase(result, "getOneYearAverageProfit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOneYearAverageProfit failed: unknown result");
    }

    public String getThreeYearAverageProfit(int strategyId, String stocks) throws org.apache.thrift.TException
    {
      send_getThreeYearAverageProfit(strategyId, stocks);
      return recv_getThreeYearAverageProfit();
    }

    public void send_getThreeYearAverageProfit(int strategyId, String stocks) throws org.apache.thrift.TException
    {
      getThreeYearAverageProfit_args args = new getThreeYearAverageProfit_args();
      args.setStrategyId(strategyId);
      args.setStocks(stocks);
      sendBase("getThreeYearAverageProfit", args);
    }

    public String recv_getThreeYearAverageProfit() throws org.apache.thrift.TException
    {
      getThreeYearAverageProfit_result result = new getThreeYearAverageProfit_result();
      receiveBase(result, "getThreeYearAverageProfit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getThreeYearAverageProfit failed: unknown result");
    }

    public int saveStrategyStockBlacklist(String ssb) throws org.apache.thrift.TException
    {
      send_saveStrategyStockBlacklist(ssb);
      return recv_saveStrategyStockBlacklist();
    }

    public void send_saveStrategyStockBlacklist(String ssb) throws org.apache.thrift.TException
    {
      saveStrategyStockBlacklist_args args = new saveStrategyStockBlacklist_args();
      args.setSsb(ssb);
      sendBase("saveStrategyStockBlacklist", args);
    }

    public int recv_saveStrategyStockBlacklist() throws org.apache.thrift.TException
    {
      saveStrategyStockBlacklist_result result = new saveStrategyStockBlacklist_result();
      receiveBase(result, "saveStrategyStockBlacklist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveStrategyStockBlacklist failed: unknown result");
    }

    public String getStrategyStockBlacklist(int strategyId) throws org.apache.thrift.TException
    {
      send_getStrategyStockBlacklist(strategyId);
      return recv_getStrategyStockBlacklist();
    }

    public void send_getStrategyStockBlacklist(int strategyId) throws org.apache.thrift.TException
    {
      getStrategyStockBlacklist_args args = new getStrategyStockBlacklist_args();
      args.setStrategyId(strategyId);
      sendBase("getStrategyStockBlacklist", args);
    }

    public String recv_getStrategyStockBlacklist() throws org.apache.thrift.TException
    {
      getStrategyStockBlacklist_result result = new getStrategyStockBlacklist_result();
      receiveBase(result, "getStrategyStockBlacklist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStrategyStockBlacklist failed: unknown result");
    }

    public int updateStockBlack(int id, String stockCodes) throws org.apache.thrift.TException
    {
      send_updateStockBlack(id, stockCodes);
      return recv_updateStockBlack();
    }

    public void send_updateStockBlack(int id, String stockCodes) throws org.apache.thrift.TException
    {
      updateStockBlack_args args = new updateStockBlack_args();
      args.setId(id);
      args.setStockCodes(stockCodes);
      sendBase("updateStockBlack", args);
    }

    public int recv_updateStockBlack() throws org.apache.thrift.TException
    {
      updateStockBlack_result result = new updateStockBlack_result();
      receiveBase(result, "updateStockBlack");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateStockBlack failed: unknown result");
    }

    public int sendTradeMq(int type, String json) throws org.apache.thrift.TException
    {
      send_sendTradeMq(type, json);
      return recv_sendTradeMq();
    }

    public void send_sendTradeMq(int type, String json) throws org.apache.thrift.TException
    {
      sendTradeMq_args args = new sendTradeMq_args();
      args.setType(type);
      args.setJson(json);
      sendBase("sendTradeMq", args);
    }

    public int recv_sendTradeMq() throws org.apache.thrift.TException
    {
      sendTradeMq_result result = new sendTradeMq_result();
      receiveBase(result, "sendTradeMq");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendTradeMq failed: unknown result");
    }

    public String getPermissionNum(int userId, int strategyId) throws org.apache.thrift.TException
    {
      send_getPermissionNum(userId, strategyId);
      return recv_getPermissionNum();
    }

    public void send_getPermissionNum(int userId, int strategyId) throws org.apache.thrift.TException
    {
      getPermissionNum_args args = new getPermissionNum_args();
      args.setUserId(userId);
      args.setStrategyId(strategyId);
      sendBase("getPermissionNum", args);
    }

    public String recv_getPermissionNum() throws org.apache.thrift.TException
    {
      getPermissionNum_result result = new getPermissionNum_result();
      receiveBase(result, "getPermissionNum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPermissionNum failed: unknown result");
    }

    public int addRecommendHotStock(String recommendHotStock) throws org.apache.thrift.TException
    {
      send_addRecommendHotStock(recommendHotStock);
      return recv_addRecommendHotStock();
    }

    public void send_addRecommendHotStock(String recommendHotStock) throws org.apache.thrift.TException
    {
      addRecommendHotStock_args args = new addRecommendHotStock_args();
      args.setRecommendHotStock(recommendHotStock);
      sendBase("addRecommendHotStock", args);
    }

    public int recv_addRecommendHotStock() throws org.apache.thrift.TException
    {
      addRecommendHotStock_result result = new addRecommendHotStock_result();
      receiveBase(result, "addRecommendHotStock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addRecommendHotStock failed: unknown result");
    }

    public int batchAddRecommendHotStock(String recommendHotStockList) throws org.apache.thrift.TException
    {
      send_batchAddRecommendHotStock(recommendHotStockList);
      return recv_batchAddRecommendHotStock();
    }

    public void send_batchAddRecommendHotStock(String recommendHotStockList) throws org.apache.thrift.TException
    {
      batchAddRecommendHotStock_args args = new batchAddRecommendHotStock_args();
      args.setRecommendHotStockList(recommendHotStockList);
      sendBase("batchAddRecommendHotStock", args);
    }

    public int recv_batchAddRecommendHotStock() throws org.apache.thrift.TException
    {
      batchAddRecommendHotStock_result result = new batchAddRecommendHotStock_result();
      receiveBase(result, "batchAddRecommendHotStock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchAddRecommendHotStock failed: unknown result");
    }

    public int delRecommendHotStock(int strategyId) throws org.apache.thrift.TException
    {
      send_delRecommendHotStock(strategyId);
      return recv_delRecommendHotStock();
    }

    public void send_delRecommendHotStock(int strategyId) throws org.apache.thrift.TException
    {
      delRecommendHotStock_args args = new delRecommendHotStock_args();
      args.setStrategyId(strategyId);
      sendBase("delRecommendHotStock", args);
    }

    public int recv_delRecommendHotStock() throws org.apache.thrift.TException
    {
      delRecommendHotStock_result result = new delRecommendHotStock_result();
      receiveBase(result, "delRecommendHotStock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delRecommendHotStock failed: unknown result");
    }

    public String getRecommendHotStockList(int strategyId, int type) throws org.apache.thrift.TException
    {
      send_getRecommendHotStockList(strategyId, type);
      return recv_getRecommendHotStockList();
    }

    public void send_getRecommendHotStockList(int strategyId, int type) throws org.apache.thrift.TException
    {
      getRecommendHotStockList_args args = new getRecommendHotStockList_args();
      args.setStrategyId(strategyId);
      args.setType(type);
      sendBase("getRecommendHotStockList", args);
    }

    public String recv_getRecommendHotStockList() throws org.apache.thrift.TException
    {
      getRecommendHotStockList_result result = new getRecommendHotStockList_result();
      receiveBase(result, "getRecommendHotStockList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecommendHotStockList failed: unknown result");
    }

    public String queryStrategyReport(int strategyId, String stocks, int userId) throws org.apache.thrift.TException
    {
      send_queryStrategyReport(strategyId, stocks, userId);
      return recv_queryStrategyReport();
    }

    public void send_queryStrategyReport(int strategyId, String stocks, int userId) throws org.apache.thrift.TException
    {
      queryStrategyReport_args args = new queryStrategyReport_args();
      args.setStrategyId(strategyId);
      args.setStocks(stocks);
      args.setUserId(userId);
      sendBase("queryStrategyReport", args);
    }

    public String recv_queryStrategyReport() throws org.apache.thrift.TException
    {
      queryStrategyReport_result result = new queryStrategyReport_result();
      receiveBase(result, "queryStrategyReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryStrategyReport failed: unknown result");
    }

    public String findStockByStrategyAndStock(int strategyId, String stockCode) throws org.apache.thrift.TException
    {
      send_findStockByStrategyAndStock(strategyId, stockCode);
      return recv_findStockByStrategyAndStock();
    }

    public void send_findStockByStrategyAndStock(int strategyId, String stockCode) throws org.apache.thrift.TException
    {
      findStockByStrategyAndStock_args args = new findStockByStrategyAndStock_args();
      args.setStrategyId(strategyId);
      args.setStockCode(stockCode);
      sendBase("findStockByStrategyAndStock", args);
    }

    public String recv_findStockByStrategyAndStock() throws org.apache.thrift.TException
    {
      findStockByStrategyAndStock_result result = new findStockByStrategyAndStock_result();
      receiveBase(result, "findStockByStrategyAndStock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findStockByStrategyAndStock failed: unknown result");
    }

    public int delRecommendHotStockByType(int type, int strategyId) throws org.apache.thrift.TException
    {
      send_delRecommendHotStockByType(type, strategyId);
      return recv_delRecommendHotStockByType();
    }

    public void send_delRecommendHotStockByType(int type, int strategyId) throws org.apache.thrift.TException
    {
      delRecommendHotStockByType_args args = new delRecommendHotStockByType_args();
      args.setType(type);
      args.setStrategyId(strategyId);
      sendBase("delRecommendHotStockByType", args);
    }

    public int recv_delRecommendHotStockByType() throws org.apache.thrift.TException
    {
      delRecommendHotStockByType_result result = new delRecommendHotStockByType_result();
      receiveBase(result, "delRecommendHotStockByType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delRecommendHotStockByType failed: unknown result");
    }

    public int dredgeStrategyAuthByMq(int userId, int strategyId, int day, String payType, double price) throws org.apache.thrift.TException
    {
      send_dredgeStrategyAuthByMq(userId, strategyId, day, payType, price);
      return recv_dredgeStrategyAuthByMq();
    }

    public void send_dredgeStrategyAuthByMq(int userId, int strategyId, int day, String payType, double price) throws org.apache.thrift.TException
    {
      dredgeStrategyAuthByMq_args args = new dredgeStrategyAuthByMq_args();
      args.setUserId(userId);
      args.setStrategyId(strategyId);
      args.setDay(day);
      args.setPayType(payType);
      args.setPrice(price);
      sendBase("dredgeStrategyAuthByMq", args);
    }

    public int recv_dredgeStrategyAuthByMq() throws org.apache.thrift.TException
    {
      dredgeStrategyAuthByMq_result result = new dredgeStrategyAuthByMq_result();
      receiveBase(result, "dredgeStrategyAuthByMq");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dredgeStrategyAuthByMq failed: unknown result");
    }

    public String findStrategyByCategoryId(String categoryId) throws org.apache.thrift.TException
    {
      send_findStrategyByCategoryId(categoryId);
      return recv_findStrategyByCategoryId();
    }

    public void send_findStrategyByCategoryId(String categoryId) throws org.apache.thrift.TException
    {
      findStrategyByCategoryId_args args = new findStrategyByCategoryId_args();
      args.setCategoryId(categoryId);
      sendBase("findStrategyByCategoryId", args);
    }

    public String recv_findStrategyByCategoryId() throws org.apache.thrift.TException
    {
      findStrategyByCategoryId_result result = new findStrategyByCategoryId_result();
      receiveBase(result, "findStrategyByCategoryId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findStrategyByCategoryId failed: unknown result");
    }

    public String findAllRunStrategyId() throws org.apache.thrift.TException
    {
      send_findAllRunStrategyId();
      return recv_findAllRunStrategyId();
    }

    public void send_findAllRunStrategyId() throws org.apache.thrift.TException
    {
      findAllRunStrategyId_args args = new findAllRunStrategyId_args();
      sendBase("findAllRunStrategyId", args);
    }

    public String recv_findAllRunStrategyId() throws org.apache.thrift.TException
    {
      findAllRunStrategyId_result result = new findAllRunStrategyId_result();
      receiveBase(result, "findAllRunStrategyId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllRunStrategyId failed: unknown result");
    }

    public String getStrategyUserByUidSid(int userId, int strategyId) throws org.apache.thrift.TException
    {
      send_getStrategyUserByUidSid(userId, strategyId);
      return recv_getStrategyUserByUidSid();
    }

    public void send_getStrategyUserByUidSid(int userId, int strategyId) throws org.apache.thrift.TException
    {
      getStrategyUserByUidSid_args args = new getStrategyUserByUidSid_args();
      args.setUserId(userId);
      args.setStrategyId(strategyId);
      sendBase("getStrategyUserByUidSid", args);
    }

    public String recv_getStrategyUserByUidSid() throws org.apache.thrift.TException
    {
      getStrategyUserByUidSid_result result = new getStrategyUserByUidSid_result();
      receiveBase(result, "getStrategyUserByUidSid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStrategyUserByUidSid failed: unknown result");
    }

    public int heartBeat() throws org.apache.thrift.TException
    {
      send_heartBeat();
      return recv_heartBeat();
    }

    public void send_heartBeat() throws org.apache.thrift.TException
    {
      heartBeat_args args = new heartBeat_args();
      sendBase("heartBeat", args);
    }

    public int recv_heartBeat() throws org.apache.thrift.TException
    {
      heartBeat_result result = new heartBeat_result();
      receiveBase(result, "heartBeat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "heartBeat failed: unknown result");
    }

    public String disposeQuantStk(int strategyId, String time) throws org.apache.thrift.TException
    {
      send_disposeQuantStk(strategyId, time);
      return recv_disposeQuantStk();
    }

    public void send_disposeQuantStk(int strategyId, String time) throws org.apache.thrift.TException
    {
      disposeQuantStk_args args = new disposeQuantStk_args();
      args.setStrategyId(strategyId);
      args.setTime(time);
      sendBase("disposeQuantStk", args);
    }

    public String recv_disposeQuantStk() throws org.apache.thrift.TException
    {
      disposeQuantStk_result result = new disposeQuantStk_result();
      receiveBase(result, "disposeQuantStk");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "disposeQuantStk failed: unknown result");
    }

    public boolean isExitsFile(int strategyId) throws org.apache.thrift.TException
    {
      send_isExitsFile(strategyId);
      return recv_isExitsFile();
    }

    public void send_isExitsFile(int strategyId) throws org.apache.thrift.TException
    {
      isExitsFile_args args = new isExitsFile_args();
      args.setStrategyId(strategyId);
      sendBase("isExitsFile", args);
    }

    public boolean recv_isExitsFile() throws org.apache.thrift.TException
    {
      isExitsFile_result result = new isExitsFile_result();
      receiveBase(result, "isExitsFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isExitsFile failed: unknown result");
    }

    public boolean clearStrategyData(int strategyId) throws org.apache.thrift.TException
    {
      send_clearStrategyData(strategyId);
      return recv_clearStrategyData();
    }

    public void send_clearStrategyData(int strategyId) throws org.apache.thrift.TException
    {
      clearStrategyData_args args = new clearStrategyData_args();
      args.setStrategyId(strategyId);
      sendBase("clearStrategyData", args);
    }

    public boolean recv_clearStrategyData() throws org.apache.thrift.TException
    {
      clearStrategyData_result result = new clearStrategyData_result();
      receiveBase(result, "clearStrategyData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "clearStrategyData failed: unknown result");
    }

    public String findAllValidRelation() throws org.apache.thrift.TException
    {
      send_findAllValidRelation();
      return recv_findAllValidRelation();
    }

    public void send_findAllValidRelation() throws org.apache.thrift.TException
    {
      findAllValidRelation_args args = new findAllValidRelation_args();
      sendBase("findAllValidRelation", args);
    }

    public String recv_findAllValidRelation() throws org.apache.thrift.TException
    {
      findAllValidRelation_result result = new findAllValidRelation_result();
      receiveBase(result, "findAllValidRelation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllValidRelation failed: unknown result");
    }

    public String findStrategyBuyUserCount(String time) throws org.apache.thrift.TException
    {
      send_findStrategyBuyUserCount(time);
      return recv_findStrategyBuyUserCount();
    }

    public void send_findStrategyBuyUserCount(String time) throws org.apache.thrift.TException
    {
      findStrategyBuyUserCount_args args = new findStrategyBuyUserCount_args();
      args.setTime(time);
      sendBase("findStrategyBuyUserCount", args);
    }

    public String recv_findStrategyBuyUserCount() throws org.apache.thrift.TException
    {
      findStrategyBuyUserCount_result result = new findStrategyBuyUserCount_result();
      receiveBase(result, "findStrategyBuyUserCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findStrategyBuyUserCount failed: unknown result");
    }

    public String findStrategyUserLoopCount(String time) throws org.apache.thrift.TException
    {
      send_findStrategyUserLoopCount(time);
      return recv_findStrategyUserLoopCount();
    }

    public void send_findStrategyUserLoopCount(String time) throws org.apache.thrift.TException
    {
      findStrategyUserLoopCount_args args = new findStrategyUserLoopCount_args();
      args.setTime(time);
      sendBase("findStrategyUserLoopCount", args);
    }

    public String recv_findStrategyUserLoopCount() throws org.apache.thrift.TException
    {
      findStrategyUserLoopCount_result result = new findStrategyUserLoopCount_result();
      receiveBase(result, "findStrategyUserLoopCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findStrategyUserLoopCount failed: unknown result");
    }

    public String queryStrategyBestStockListBySid(int sid, int limit) throws org.apache.thrift.TException
    {
      send_queryStrategyBestStockListBySid(sid, limit);
      return recv_queryStrategyBestStockListBySid();
    }

    public void send_queryStrategyBestStockListBySid(int sid, int limit) throws org.apache.thrift.TException
    {
      queryStrategyBestStockListBySid_args args = new queryStrategyBestStockListBySid_args();
      args.setSid(sid);
      args.setLimit(limit);
      sendBase("queryStrategyBestStockListBySid", args);
    }

    public String recv_queryStrategyBestStockListBySid() throws org.apache.thrift.TException
    {
      queryStrategyBestStockListBySid_result result = new queryStrategyBestStockListBySid_result();
      receiveBase(result, "queryStrategyBestStockListBySid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryStrategyBestStockListBySid failed: unknown result");
    }

    public int saveStrategyUserStock(int userId, int strategyId, String stockCode) throws org.apache.thrift.TException
    {
      send_saveStrategyUserStock(userId, strategyId, stockCode);
      return recv_saveStrategyUserStock();
    }

    public void send_saveStrategyUserStock(int userId, int strategyId, String stockCode) throws org.apache.thrift.TException
    {
      saveStrategyUserStock_args args = new saveStrategyUserStock_args();
      args.setUserId(userId);
      args.setStrategyId(strategyId);
      args.setStockCode(stockCode);
      sendBase("saveStrategyUserStock", args);
    }

    public int recv_saveStrategyUserStock() throws org.apache.thrift.TException
    {
      saveStrategyUserStock_result result = new saveStrategyUserStock_result();
      receiveBase(result, "saveStrategyUserStock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveStrategyUserStock failed: unknown result");
    }

    public int deleteStrategyUserStock(int userId, int strategyId, String stockCode) throws org.apache.thrift.TException
    {
      send_deleteStrategyUserStock(userId, strategyId, stockCode);
      return recv_deleteStrategyUserStock();
    }

    public void send_deleteStrategyUserStock(int userId, int strategyId, String stockCode) throws org.apache.thrift.TException
    {
      deleteStrategyUserStock_args args = new deleteStrategyUserStock_args();
      args.setUserId(userId);
      args.setStrategyId(strategyId);
      args.setStockCode(stockCode);
      sendBase("deleteStrategyUserStock", args);
    }

    public int recv_deleteStrategyUserStock() throws org.apache.thrift.TException
    {
      deleteStrategyUserStock_result result = new deleteStrategyUserStock_result();
      receiveBase(result, "deleteStrategyUserStock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteStrategyUserStock failed: unknown result");
    }

    public int selectFollowNum(int userId, int strategyId) throws org.apache.thrift.TException
    {
      send_selectFollowNum(userId, strategyId);
      return recv_selectFollowNum();
    }

    public void send_selectFollowNum(int userId, int strategyId) throws org.apache.thrift.TException
    {
      selectFollowNum_args args = new selectFollowNum_args();
      args.setUserId(userId);
      args.setStrategyId(strategyId);
      sendBase("selectFollowNum", args);
    }

    public int recv_selectFollowNum() throws org.apache.thrift.TException
    {
      selectFollowNum_result result = new selectFollowNum_result();
      receiveBase(result, "selectFollowNum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectFollowNum failed: unknown result");
    }

    public String queryTodayTrade(int strategyId, int type, long seq, int num) throws org.apache.thrift.TException
    {
      send_queryTodayTrade(strategyId, type, seq, num);
      return recv_queryTodayTrade();
    }

    public void send_queryTodayTrade(int strategyId, int type, long seq, int num) throws org.apache.thrift.TException
    {
      queryTodayTrade_args args = new queryTodayTrade_args();
      args.setStrategyId(strategyId);
      args.setType(type);
      args.setSeq(seq);
      args.setNum(num);
      sendBase("queryTodayTrade", args);
    }

    public String recv_queryTodayTrade() throws org.apache.thrift.TException
    {
      queryTodayTrade_result result = new queryTodayTrade_result();
      receiveBase(result, "queryTodayTrade");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryTodayTrade failed: unknown result");
    }

    public int addTodayTrade(int strategyId, String stockTradeToday) throws org.apache.thrift.TException
    {
      send_addTodayTrade(strategyId, stockTradeToday);
      return recv_addTodayTrade();
    }

    public void send_addTodayTrade(int strategyId, String stockTradeToday) throws org.apache.thrift.TException
    {
      addTodayTrade_args args = new addTodayTrade_args();
      args.setStrategyId(strategyId);
      args.setStockTradeToday(stockTradeToday);
      sendBase("addTodayTrade", args);
    }

    public int recv_addTodayTrade() throws org.apache.thrift.TException
    {
      addTodayTrade_result result = new addTodayTrade_result();
      receiveBase(result, "addTodayTrade");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addTodayTrade failed: unknown result");
    }

    public int clearTodayTrade(int strategyId, int positionNum) throws org.apache.thrift.TException
    {
      send_clearTodayTrade(strategyId, positionNum);
      return recv_clearTodayTrade();
    }

    public void send_clearTodayTrade(int strategyId, int positionNum) throws org.apache.thrift.TException
    {
      clearTodayTrade_args args = new clearTodayTrade_args();
      args.setStrategyId(strategyId);
      args.setPositionNum(positionNum);
      sendBase("clearTodayTrade", args);
    }

    public int recv_clearTodayTrade() throws org.apache.thrift.TException
    {
      clearTodayTrade_result result = new clearTodayTrade_result();
      receiveBase(result, "clearTodayTrade");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "clearTodayTrade failed: unknown result");
    }

    public int updateTodayBuy(int strategyId, String stockTradeTodayList) throws org.apache.thrift.TException
    {
      send_updateTodayBuy(strategyId, stockTradeTodayList);
      return recv_updateTodayBuy();
    }

    public void send_updateTodayBuy(int strategyId, String stockTradeTodayList) throws org.apache.thrift.TException
    {
      updateTodayBuy_args args = new updateTodayBuy_args();
      args.setStrategyId(strategyId);
      args.setStockTradeTodayList(stockTradeTodayList);
      sendBase("updateTodayBuy", args);
    }

    public int recv_updateTodayBuy() throws org.apache.thrift.TException
    {
      updateTodayBuy_result result = new updateTodayBuy_result();
      receiveBase(result, "updateTodayBuy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateTodayBuy failed: unknown result");
    }

    public int addStockTradeNear5Days(int strategyId, String stockTradeNear5DaysList) throws org.apache.thrift.TException
    {
      send_addStockTradeNear5Days(strategyId, stockTradeNear5DaysList);
      return recv_addStockTradeNear5Days();
    }

    public void send_addStockTradeNear5Days(int strategyId, String stockTradeNear5DaysList) throws org.apache.thrift.TException
    {
      addStockTradeNear5Days_args args = new addStockTradeNear5Days_args();
      args.setStrategyId(strategyId);
      args.setStockTradeNear5DaysList(stockTradeNear5DaysList);
      sendBase("addStockTradeNear5Days", args);
    }

    public int recv_addStockTradeNear5Days() throws org.apache.thrift.TException
    {
      addStockTradeNear5Days_result result = new addStockTradeNear5Days_result();
      receiveBase(result, "addStockTradeNear5Days");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addStockTradeNear5Days failed: unknown result");
    }

    public int clearNear5DaysTrade(int strategyId) throws org.apache.thrift.TException
    {
      send_clearNear5DaysTrade(strategyId);
      return recv_clearNear5DaysTrade();
    }

    public void send_clearNear5DaysTrade(int strategyId) throws org.apache.thrift.TException
    {
      clearNear5DaysTrade_args args = new clearNear5DaysTrade_args();
      args.setStrategyId(strategyId);
      sendBase("clearNear5DaysTrade", args);
    }

    public int recv_clearNear5DaysTrade() throws org.apache.thrift.TException
    {
      clearNear5DaysTrade_result result = new clearNear5DaysTrade_result();
      receiveBase(result, "clearNear5DaysTrade");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "clearNear5DaysTrade failed: unknown result");
    }

    public String queryDays5Trade(int strategyId, long seq, int num) throws org.apache.thrift.TException
    {
      send_queryDays5Trade(strategyId, seq, num);
      return recv_queryDays5Trade();
    }

    public void send_queryDays5Trade(int strategyId, long seq, int num) throws org.apache.thrift.TException
    {
      queryDays5Trade_args args = new queryDays5Trade_args();
      args.setStrategyId(strategyId);
      args.setSeq(seq);
      args.setNum(num);
      sendBase("queryDays5Trade", args);
    }

    public String recv_queryDays5Trade() throws org.apache.thrift.TException
    {
      queryDays5Trade_result result = new queryDays5Trade_result();
      receiveBase(result, "queryDays5Trade");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryDays5Trade failed: unknown result");
    }

    public String searchStockResult(int userId, int strategyId, String stockCode) throws org.apache.thrift.TException
    {
      send_searchStockResult(userId, strategyId, stockCode);
      return recv_searchStockResult();
    }

    public void send_searchStockResult(int userId, int strategyId, String stockCode) throws org.apache.thrift.TException
    {
      searchStockResult_args args = new searchStockResult_args();
      args.setUserId(userId);
      args.setStrategyId(strategyId);
      args.setStockCode(stockCode);
      sendBase("searchStockResult", args);
    }

    public String recv_searchStockResult() throws org.apache.thrift.TException
    {
      searchStockResult_result result = new searchStockResult_result();
      receiveBase(result, "searchStockResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchStockResult failed: unknown result");
    }

    public String getStrategyExtend(int strategyId) throws org.apache.thrift.TException
    {
      send_getStrategyExtend(strategyId);
      return recv_getStrategyExtend();
    }

    public void send_getStrategyExtend(int strategyId) throws org.apache.thrift.TException
    {
      getStrategyExtend_args args = new getStrategyExtend_args();
      args.setStrategyId(strategyId);
      sendBase("getStrategyExtend", args);
    }

    public String recv_getStrategyExtend() throws org.apache.thrift.TException
    {
      getStrategyExtend_result result = new getStrategyExtend_result();
      receiveBase(result, "getStrategyExtend");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStrategyExtend failed: unknown result");
    }

    public String findUserFollowStock(int userId, int strategyId) throws org.apache.thrift.TException
    {
      send_findUserFollowStock(userId, strategyId);
      return recv_findUserFollowStock();
    }

    public void send_findUserFollowStock(int userId, int strategyId) throws org.apache.thrift.TException
    {
      findUserFollowStock_args args = new findUserFollowStock_args();
      args.setUserId(userId);
      args.setStrategyId(strategyId);
      sendBase("findUserFollowStock", args);
    }

    public String recv_findUserFollowStock() throws org.apache.thrift.TException
    {
      findUserFollowStock_result result = new findUserFollowStock_result();
      receiveBase(result, "findUserFollowStock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserFollowStock failed: unknown result");
    }

    public String searchStrategyBestStock() throws org.apache.thrift.TException
    {
      send_searchStrategyBestStock();
      return recv_searchStrategyBestStock();
    }

    public void send_searchStrategyBestStock() throws org.apache.thrift.TException
    {
      searchStrategyBestStock_args args = new searchStrategyBestStock_args();
      sendBase("searchStrategyBestStock", args);
    }

    public String recv_searchStrategyBestStock() throws org.apache.thrift.TException
    {
      searchStrategyBestStock_result result = new searchStrategyBestStock_result();
      receiveBase(result, "searchStrategyBestStock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchStrategyBestStock failed: unknown result");
    }

    public String findReportData(int day, double lt, double rt, int num) throws org.apache.thrift.TException
    {
      send_findReportData(day, lt, rt, num);
      return recv_findReportData();
    }

    public void send_findReportData(int day, double lt, double rt, int num) throws org.apache.thrift.TException
    {
      findReportData_args args = new findReportData_args();
      args.setDay(day);
      args.setLt(lt);
      args.setRt(rt);
      args.setNum(num);
      sendBase("findReportData", args);
    }

    public String recv_findReportData() throws org.apache.thrift.TException
    {
      findReportData_result result = new findReportData_result();
      receiveBase(result, "findReportData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findReportData failed: unknown result");
    }

    public String findAllStrategyUser(String time) throws org.apache.thrift.TException
    {
      send_findAllStrategyUser(time);
      return recv_findAllStrategyUser();
    }

    public void send_findAllStrategyUser(String time) throws org.apache.thrift.TException
    {
      findAllStrategyUser_args args = new findAllStrategyUser_args();
      args.setTime(time);
      sendBase("findAllStrategyUser", args);
    }

    public String recv_findAllStrategyUser() throws org.apache.thrift.TException
    {
      findAllStrategyUser_result result = new findAllStrategyUser_result();
      receiveBase(result, "findAllStrategyUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllStrategyUser failed: unknown result");
    }

    public int incrDNALoopNum(int userId) throws org.apache.thrift.TException
    {
      send_incrDNALoopNum(userId);
      return recv_incrDNALoopNum();
    }

    public void send_incrDNALoopNum(int userId) throws org.apache.thrift.TException
    {
      incrDNALoopNum_args args = new incrDNALoopNum_args();
      args.setUserId(userId);
      sendBase("incrDNALoopNum", args);
    }

    public int recv_incrDNALoopNum() throws org.apache.thrift.TException
    {
      incrDNALoopNum_result result = new incrDNALoopNum_result();
      receiveBase(result, "incrDNALoopNum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "incrDNALoopNum failed: unknown result");
    }

    public String findDNALoopByUserId(int userId) throws org.apache.thrift.TException
    {
      send_findDNALoopByUserId(userId);
      return recv_findDNALoopByUserId();
    }

    public void send_findDNALoopByUserId(int userId) throws org.apache.thrift.TException
    {
      findDNALoopByUserId_args args = new findDNALoopByUserId_args();
      args.setUserId(userId);
      sendBase("findDNALoopByUserId", args);
    }

    public String recv_findDNALoopByUserId() throws org.apache.thrift.TException
    {
      findDNALoopByUserId_result result = new findDNALoopByUserId_result();
      receiveBase(result, "findDNALoopByUserId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findDNALoopByUserId failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void saveStrategyBestStock(String stockList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveStrategyBestStock_call method_call = new saveStrategyBestStock_call(stockList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveStrategyBestStock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String stockList;
      public saveStrategyBestStock_call(String stockList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stockList = stockList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveStrategyBestStock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveStrategyBestStock_args args = new saveStrategyBestStock_args();
        args.setStockList(stockList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveStrategyBestStock();
      }
    }

    public void updateStrategyBestStock(String stockList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateStrategyBestStock_call method_call = new updateStrategyBestStock_call(stockList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateStrategyBestStock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String stockList;
      public updateStrategyBestStock_call(String stockList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stockList = stockList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateStrategyBestStock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateStrategyBestStock_args args = new updateStrategyBestStock_args();
        args.setStockList(stockList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateStrategyBestStock();
      }
    }

    public void queryStrategyBestStock(int num, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryStrategyBestStock_call method_call = new queryStrategyBestStock_call(num, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryStrategyBestStock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int num;
      public queryStrategyBestStock_call(int num, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.num = num;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryStrategyBestStock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryStrategyBestStock_args args = new queryStrategyBestStock_args();
        args.setNum(num);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryStrategyBestStock();
      }
    }

    public void queryAllStrategyBestStock(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryAllStrategyBestStock_call method_call = new queryAllStrategyBestStock_call(strategyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryAllStrategyBestStock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      public queryAllStrategyBestStock_call(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryAllStrategyBestStock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryAllStrategyBestStock_args args = new queryAllStrategyBestStock_args();
        args.setStrategyId(strategyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryAllStrategyBestStock();
      }
    }

    public void queryAllStrategy(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryAllStrategy_call method_call = new queryAllStrategy_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryAllStrategy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public queryAllStrategy_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryAllStrategy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryAllStrategy_args args = new queryAllStrategy_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryAllStrategy();
      }
    }

    public void saveStrategyComment(String strategy, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveStrategyComment_call method_call = new saveStrategyComment_call(strategy, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveStrategyComment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String strategy;
      public saveStrategyComment_call(String strategy, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategy = strategy;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveStrategyComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveStrategyComment_args args = new saveStrategyComment_args();
        args.setStrategy(strategy);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveStrategyComment();
      }
    }

    public void deleteStrategyComment(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteStrategyComment_call method_call = new deleteStrategyComment_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteStrategyComment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      public deleteStrategyComment_call(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteStrategyComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteStrategyComment_args args = new deleteStrategyComment_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteStrategyComment();
      }
    }

    public void updateStrategyComment(String strategy, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateStrategyComment_call method_call = new updateStrategyComment_call(strategy, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateStrategyComment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String strategy;
      public updateStrategyComment_call(String strategy, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategy = strategy;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateStrategyComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateStrategyComment_args args = new updateStrategyComment_args();
        args.setStrategy(strategy);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateStrategyComment();
      }
    }

    public void getStrategyComment(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStrategyComment_call method_call = new getStrategyComment_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStrategyComment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      public getStrategyComment_call(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStrategyComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStrategyComment_args args = new getStrategyComment_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStrategyComment();
      }
    }

    public void queryStrategyCommentByPage(int strategyId, int userId, int pageIndex, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryStrategyCommentByPage_call method_call = new queryStrategyCommentByPage_call(strategyId, userId, pageIndex, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryStrategyCommentByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private int userId;
      private int pageIndex;
      private int pageSize;
      public queryStrategyCommentByPage_call(int strategyId, int userId, int pageIndex, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.userId = userId;
        this.pageIndex = pageIndex;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryStrategyCommentByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryStrategyCommentByPage_args args = new queryStrategyCommentByPage_args();
        args.setStrategyId(strategyId);
        args.setUserId(userId);
        args.setPageIndex(pageIndex);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryStrategyCommentByPage();
      }
    }

    public void findStrategyCommentList(int strategyId, int pageIndex, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findStrategyCommentList_call method_call = new findStrategyCommentList_call(strategyId, pageIndex, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findStrategyCommentList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private int pageIndex;
      private int pageSize;
      public findStrategyCommentList_call(int strategyId, int pageIndex, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.pageIndex = pageIndex;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findStrategyCommentList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findStrategyCommentList_args args = new findStrategyCommentList_args();
        args.setStrategyId(strategyId);
        args.setPageIndex(pageIndex);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findStrategyCommentList();
      }
    }

    public void updateCommentStatus(int id, int status, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCommentStatus_call method_call = new updateCommentStatus_call(id, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCommentStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      private int status;
      public updateCommentStatus_call(int id, int status, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCommentStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCommentStatus_args args = new updateCommentStatus_args();
        args.setId(id);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCommentStatus();
      }
    }

    public void saveStrategyScore(String strategyScore, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveStrategyScore_call method_call = new saveStrategyScore_call(strategyScore, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveStrategyScore_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String strategyScore;
      public saveStrategyScore_call(String strategyScore, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyScore = strategyScore;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveStrategyScore", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveStrategyScore_args args = new saveStrategyScore_args();
        args.setStrategyScore(strategyScore);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveStrategyScore();
      }
    }

    public void getStrategyScore(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStrategyScore_call method_call = new getStrategyScore_call(strategyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStrategyScore_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      public getStrategyScore_call(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStrategyScore", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStrategyScore_args args = new getStrategyScore_args();
        args.setStrategyId(strategyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStrategyScore();
      }
    }

    public void saveStrategy(String strategy, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveStrategy_call method_call = new saveStrategy_call(strategy, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveStrategy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String strategy;
      public saveStrategy_call(String strategy, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategy = strategy;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveStrategy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveStrategy_args args = new saveStrategy_args();
        args.setStrategy(strategy);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveStrategy();
      }
    }

    public void deleteStrategy(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteStrategy_call method_call = new deleteStrategy_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteStrategy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      public deleteStrategy_call(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteStrategy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteStrategy_args args = new deleteStrategy_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteStrategy();
      }
    }

    public void updateStrategy(String strategy, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateStrategy_call method_call = new updateStrategy_call(strategy, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateStrategy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String strategy;
      public updateStrategy_call(String strategy, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategy = strategy;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateStrategy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateStrategy_args args = new updateStrategy_args();
        args.setStrategy(strategy);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateStrategy();
      }
    }

    public void getStrategy(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStrategy_call method_call = new getStrategy_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStrategy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      public getStrategy_call(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStrategy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStrategy_args args = new getStrategy_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStrategy();
      }
    }

    public void queryStrategyByPage(int id, int type, int displayStatus, int runStatus, int pageIndex, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryStrategyByPage_call method_call = new queryStrategyByPage_call(id, type, displayStatus, runStatus, pageIndex, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryStrategyByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      private int type;
      private int displayStatus;
      private int runStatus;
      private int pageIndex;
      private int pageSize;
      public queryStrategyByPage_call(int id, int type, int displayStatus, int runStatus, int pageIndex, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.type = type;
        this.displayStatus = displayStatus;
        this.runStatus = runStatus;
        this.pageIndex = pageIndex;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryStrategyByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryStrategyByPage_args args = new queryStrategyByPage_args();
        args.setId(id);
        args.setType(type);
        args.setDisplayStatus(displayStatus);
        args.setRunStatus(runStatus);
        args.setPageIndex(pageIndex);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryStrategyByPage();
      }
    }

    public void updateStrategyStatus(int id, int status, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateStrategyStatus_call method_call = new updateStrategyStatus_call(id, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateStrategyStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      private int status;
      public updateStrategyStatus_call(int id, int status, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateStrategyStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateStrategyStatus_args args = new updateStrategyStatus_args();
        args.setId(id);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateStrategyStatus();
      }
    }

    public void saveStrategyUser(String strategy, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveStrategyUser_call method_call = new saveStrategyUser_call(strategy, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveStrategyUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String strategy;
      public saveStrategyUser_call(String strategy, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategy = strategy;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveStrategyUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveStrategyUser_args args = new saveStrategyUser_args();
        args.setStrategy(strategy);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveStrategyUser();
      }
    }

    public void expandExpireTime(int userId, int strategyId, int days, String payType, double price, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      expandExpireTime_call method_call = new expandExpireTime_call(userId, strategyId, days, payType, price, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class expandExpireTime_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private int strategyId;
      private int days;
      private String payType;
      private double price;
      public expandExpireTime_call(int userId, int strategyId, int days, String payType, double price, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.strategyId = strategyId;
        this.days = days;
        this.payType = payType;
        this.price = price;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("expandExpireTime", org.apache.thrift.protocol.TMessageType.CALL, 0));
        expandExpireTime_args args = new expandExpireTime_args();
        args.setUserId(userId);
        args.setStrategyId(strategyId);
        args.setDays(days);
        args.setPayType(payType);
        args.setPrice(price);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_expandExpireTime();
      }
    }

    public void getStrategyUser(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStrategyUser_call method_call = new getStrategyUser_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStrategyUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      public getStrategyUser_call(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStrategyUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStrategyUser_args args = new getStrategyUser_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStrategyUser();
      }
    }

    public void findStrategyByUserId(int userId, int expire, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findStrategyByUserId_call method_call = new findStrategyByUserId_call(userId, expire, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findStrategyByUserId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private int expire;
      public findStrategyByUserId_call(int userId, int expire, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.expire = expire;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findStrategyByUserId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findStrategyByUserId_args args = new findStrategyByUserId_args();
        args.setUserId(userId);
        args.setExpire(expire);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findStrategyByUserId();
      }
    }

    public void queryStrategyUserByPage(int userId, int strategyId, int pageIndex, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryStrategyUserByPage_call method_call = new queryStrategyUserByPage_call(userId, strategyId, pageIndex, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryStrategyUserByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private int strategyId;
      private int pageIndex;
      private int pageSize;
      public queryStrategyUserByPage_call(int userId, int strategyId, int pageIndex, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.strategyId = strategyId;
        this.pageIndex = pageIndex;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryStrategyUserByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryStrategyUserByPage_args args = new queryStrategyUserByPage_args();
        args.setUserId(userId);
        args.setStrategyId(strategyId);
        args.setPageIndex(pageIndex);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryStrategyUserByPage();
      }
    }

    public void batchSaveStrategyUserStock(int userId, int strategyId, String relationList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchSaveStrategyUserStock_call method_call = new batchSaveStrategyUserStock_call(userId, strategyId, relationList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchSaveStrategyUserStock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private int strategyId;
      private String relationList;
      public batchSaveStrategyUserStock_call(int userId, int strategyId, String relationList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.strategyId = strategyId;
        this.relationList = relationList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchSaveStrategyUserStock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchSaveStrategyUserStock_args args = new batchSaveStrategyUserStock_args();
        args.setUserId(userId);
        args.setStrategyId(strategyId);
        args.setRelationList(relationList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchSaveStrategyUserStock();
      }
    }

    public void findStockByStrategyAndUser(int userId, int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findStockByStrategyAndUser_call method_call = new findStockByStrategyAndUser_call(userId, strategyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findStockByStrategyAndUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private int strategyId;
      public findStockByStrategyAndUser_call(int userId, int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.strategyId = strategyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findStockByStrategyAndUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findStockByStrategyAndUser_args args = new findStockByStrategyAndUser_args();
        args.setUserId(userId);
        args.setStrategyId(strategyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findStockByStrategyAndUser();
      }
    }

    public void saveUserLoop(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveUserLoop_call method_call = new saveUserLoop_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveUserLoop_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public saveUserLoop_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveUserLoop", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveUserLoop_args args = new saveUserLoop_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveUserLoop();
      }
    }

    public void deleteAllUserLoop(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteAllUserLoop_call method_call = new deleteAllUserLoop_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteAllUserLoop_call extends org.apache.thrift.async.TAsyncMethodCall {
      public deleteAllUserLoop_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteAllUserLoop", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteAllUserLoop_args args = new deleteAllUserLoop_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteAllUserLoop();
      }
    }

    public void incrLoopNum(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      incrLoopNum_call method_call = new incrLoopNum_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class incrLoopNum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public incrLoopNum_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("incrLoopNum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        incrLoopNum_args args = new incrLoopNum_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_incrLoopNum();
      }
    }

    public void incrFinishNum(int userId, int strategyId, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      incrFinishNum_call method_call = new incrFinishNum_call(userId, strategyId, stocks, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class incrFinishNum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private int strategyId;
      private String stocks;
      public incrFinishNum_call(int userId, int strategyId, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.strategyId = strategyId;
        this.stocks = stocks;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("incrFinishNum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        incrFinishNum_args args = new incrFinishNum_args();
        args.setUserId(userId);
        args.setStrategyId(strategyId);
        args.setStocks(stocks);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_incrFinishNum();
      }
    }

    public void findUserLoopByUserId(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserLoopByUserId_call method_call = new findUserLoopByUserId_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserLoopByUserId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public findUserLoopByUserId_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserLoopByUserId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserLoopByUserId_args args = new findUserLoopByUserId_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserLoopByUserId();
      }
    }

    public void batchInsertStrategyStockOneProfit(List<StrategyStockOneProfitThrift> thriftList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchInsertStrategyStockOneProfit_call method_call = new batchInsertStrategyStockOneProfit_call(thriftList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchInsertStrategyStockOneProfit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<StrategyStockOneProfitThrift> thriftList;
      public batchInsertStrategyStockOneProfit_call(List<StrategyStockOneProfitThrift> thriftList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.thriftList = thriftList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchInsertStrategyStockOneProfit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchInsertStrategyStockOneProfit_args args = new batchInsertStrategyStockOneProfit_args();
        args.setThriftList(thriftList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchInsertStrategyStockOneProfit();
      }
    }

    public void truncateStrategyStockOneProfit(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      truncateStrategyStockOneProfit_call method_call = new truncateStrategyStockOneProfit_call(strategyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class truncateStrategyStockOneProfit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      public truncateStrategyStockOneProfit_call(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("truncateStrategyStockOneProfit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        truncateStrategyStockOneProfit_args args = new truncateStrategyStockOneProfit_args();
        args.setStrategyId(strategyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_truncateStrategyStockOneProfit();
      }
    }

    public void queryStrategyStockOneProfit(int strategyId, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryStrategyStockOneProfit_call method_call = new queryStrategyStockOneProfit_call(strategyId, stocks, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryStrategyStockOneProfit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private String stocks;
      public queryStrategyStockOneProfit_call(int strategyId, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.stocks = stocks;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryStrategyStockOneProfit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryStrategyStockOneProfit_args args = new queryStrategyStockOneProfit_args();
        args.setStrategyId(strategyId);
        args.setStocks(stocks);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryStrategyStockOneProfit();
      }
    }

    public void batchInsertStrategyStockThreeProfit(List<StrategyStockThreeProfitThrift> thriftList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchInsertStrategyStockThreeProfit_call method_call = new batchInsertStrategyStockThreeProfit_call(thriftList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchInsertStrategyStockThreeProfit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<StrategyStockThreeProfitThrift> thriftList;
      public batchInsertStrategyStockThreeProfit_call(List<StrategyStockThreeProfitThrift> thriftList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.thriftList = thriftList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchInsertStrategyStockThreeProfit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchInsertStrategyStockThreeProfit_args args = new batchInsertStrategyStockThreeProfit_args();
        args.setThriftList(thriftList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchInsertStrategyStockThreeProfit();
      }
    }

    public void truncateStrategyStockThreeProfit(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      truncateStrategyStockThreeProfit_call method_call = new truncateStrategyStockThreeProfit_call(strategyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class truncateStrategyStockThreeProfit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      public truncateStrategyStockThreeProfit_call(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("truncateStrategyStockThreeProfit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        truncateStrategyStockThreeProfit_args args = new truncateStrategyStockThreeProfit_args();
        args.setStrategyId(strategyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_truncateStrategyStockThreeProfit();
      }
    }

    public void queryStrategyStockThreeProfit(int strategyId, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryStrategyStockThreeProfit_call method_call = new queryStrategyStockThreeProfit_call(strategyId, stocks, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryStrategyStockThreeProfit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private String stocks;
      public queryStrategyStockThreeProfit_call(int strategyId, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.stocks = stocks;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryStrategyStockThreeProfit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryStrategyStockThreeProfit_args args = new queryStrategyStockThreeProfit_args();
        args.setStrategyId(strategyId);
        args.setStocks(stocks);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryStrategyStockThreeProfit();
      }
    }

    public void findStrategyStockOneProfit(int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findStrategyStockOneProfit_call method_call = new findStrategyStockOneProfit_call(strategyId, stockCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findStrategyStockOneProfit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private String stockCode;
      public findStrategyStockOneProfit_call(int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.stockCode = stockCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findStrategyStockOneProfit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findStrategyStockOneProfit_args args = new findStrategyStockOneProfit_args();
        args.setStrategyId(strategyId);
        args.setStockCode(stockCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findStrategyStockOneProfit();
      }
    }

    public void getOneYearAverageProfit(int strategyId, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOneYearAverageProfit_call method_call = new getOneYearAverageProfit_call(strategyId, stocks, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOneYearAverageProfit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private String stocks;
      public getOneYearAverageProfit_call(int strategyId, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.stocks = stocks;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOneYearAverageProfit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOneYearAverageProfit_args args = new getOneYearAverageProfit_args();
        args.setStrategyId(strategyId);
        args.setStocks(stocks);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOneYearAverageProfit();
      }
    }

    public void getThreeYearAverageProfit(int strategyId, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getThreeYearAverageProfit_call method_call = new getThreeYearAverageProfit_call(strategyId, stocks, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getThreeYearAverageProfit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private String stocks;
      public getThreeYearAverageProfit_call(int strategyId, String stocks, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.stocks = stocks;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getThreeYearAverageProfit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getThreeYearAverageProfit_args args = new getThreeYearAverageProfit_args();
        args.setStrategyId(strategyId);
        args.setStocks(stocks);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getThreeYearAverageProfit();
      }
    }

    public void saveStrategyStockBlacklist(String ssb, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveStrategyStockBlacklist_call method_call = new saveStrategyStockBlacklist_call(ssb, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveStrategyStockBlacklist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ssb;
      public saveStrategyStockBlacklist_call(String ssb, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ssb = ssb;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveStrategyStockBlacklist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveStrategyStockBlacklist_args args = new saveStrategyStockBlacklist_args();
        args.setSsb(ssb);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveStrategyStockBlacklist();
      }
    }

    public void getStrategyStockBlacklist(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStrategyStockBlacklist_call method_call = new getStrategyStockBlacklist_call(strategyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStrategyStockBlacklist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      public getStrategyStockBlacklist_call(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStrategyStockBlacklist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStrategyStockBlacklist_args args = new getStrategyStockBlacklist_args();
        args.setStrategyId(strategyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStrategyStockBlacklist();
      }
    }

    public void updateStockBlack(int id, String stockCodes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateStockBlack_call method_call = new updateStockBlack_call(id, stockCodes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateStockBlack_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      private String stockCodes;
      public updateStockBlack_call(int id, String stockCodes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.stockCodes = stockCodes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateStockBlack", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateStockBlack_args args = new updateStockBlack_args();
        args.setId(id);
        args.setStockCodes(stockCodes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateStockBlack();
      }
    }

    public void sendTradeMq(int type, String json, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendTradeMq_call method_call = new sendTradeMq_call(type, json, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendTradeMq_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int type;
      private String json;
      public sendTradeMq_call(int type, String json, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.type = type;
        this.json = json;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendTradeMq", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendTradeMq_args args = new sendTradeMq_args();
        args.setType(type);
        args.setJson(json);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendTradeMq();
      }
    }

    public void getPermissionNum(int userId, int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPermissionNum_call method_call = new getPermissionNum_call(userId, strategyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPermissionNum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private int strategyId;
      public getPermissionNum_call(int userId, int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.strategyId = strategyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPermissionNum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPermissionNum_args args = new getPermissionNum_args();
        args.setUserId(userId);
        args.setStrategyId(strategyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPermissionNum();
      }
    }

    public void addRecommendHotStock(String recommendHotStock, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addRecommendHotStock_call method_call = new addRecommendHotStock_call(recommendHotStock, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addRecommendHotStock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String recommendHotStock;
      public addRecommendHotStock_call(String recommendHotStock, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.recommendHotStock = recommendHotStock;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRecommendHotStock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addRecommendHotStock_args args = new addRecommendHotStock_args();
        args.setRecommendHotStock(recommendHotStock);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addRecommendHotStock();
      }
    }

    public void batchAddRecommendHotStock(String recommendHotStockList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchAddRecommendHotStock_call method_call = new batchAddRecommendHotStock_call(recommendHotStockList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchAddRecommendHotStock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String recommendHotStockList;
      public batchAddRecommendHotStock_call(String recommendHotStockList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.recommendHotStockList = recommendHotStockList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchAddRecommendHotStock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchAddRecommendHotStock_args args = new batchAddRecommendHotStock_args();
        args.setRecommendHotStockList(recommendHotStockList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchAddRecommendHotStock();
      }
    }

    public void delRecommendHotStock(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delRecommendHotStock_call method_call = new delRecommendHotStock_call(strategyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delRecommendHotStock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      public delRecommendHotStock_call(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delRecommendHotStock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delRecommendHotStock_args args = new delRecommendHotStock_args();
        args.setStrategyId(strategyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delRecommendHotStock();
      }
    }

    public void getRecommendHotStockList(int strategyId, int type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecommendHotStockList_call method_call = new getRecommendHotStockList_call(strategyId, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecommendHotStockList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private int type;
      public getRecommendHotStockList_call(int strategyId, int type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecommendHotStockList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecommendHotStockList_args args = new getRecommendHotStockList_args();
        args.setStrategyId(strategyId);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRecommendHotStockList();
      }
    }

    public void queryStrategyReport(int strategyId, String stocks, int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryStrategyReport_call method_call = new queryStrategyReport_call(strategyId, stocks, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryStrategyReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private String stocks;
      private int userId;
      public queryStrategyReport_call(int strategyId, String stocks, int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.stocks = stocks;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryStrategyReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryStrategyReport_args args = new queryStrategyReport_args();
        args.setStrategyId(strategyId);
        args.setStocks(stocks);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryStrategyReport();
      }
    }

    public void findStockByStrategyAndStock(int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findStockByStrategyAndStock_call method_call = new findStockByStrategyAndStock_call(strategyId, stockCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findStockByStrategyAndStock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private String stockCode;
      public findStockByStrategyAndStock_call(int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.stockCode = stockCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findStockByStrategyAndStock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findStockByStrategyAndStock_args args = new findStockByStrategyAndStock_args();
        args.setStrategyId(strategyId);
        args.setStockCode(stockCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findStockByStrategyAndStock();
      }
    }

    public void delRecommendHotStockByType(int type, int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delRecommendHotStockByType_call method_call = new delRecommendHotStockByType_call(type, strategyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delRecommendHotStockByType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int type;
      private int strategyId;
      public delRecommendHotStockByType_call(int type, int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.type = type;
        this.strategyId = strategyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delRecommendHotStockByType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delRecommendHotStockByType_args args = new delRecommendHotStockByType_args();
        args.setType(type);
        args.setStrategyId(strategyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delRecommendHotStockByType();
      }
    }

    public void dredgeStrategyAuthByMq(int userId, int strategyId, int day, String payType, double price, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dredgeStrategyAuthByMq_call method_call = new dredgeStrategyAuthByMq_call(userId, strategyId, day, payType, price, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dredgeStrategyAuthByMq_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private int strategyId;
      private int day;
      private String payType;
      private double price;
      public dredgeStrategyAuthByMq_call(int userId, int strategyId, int day, String payType, double price, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.strategyId = strategyId;
        this.day = day;
        this.payType = payType;
        this.price = price;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dredgeStrategyAuthByMq", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dredgeStrategyAuthByMq_args args = new dredgeStrategyAuthByMq_args();
        args.setUserId(userId);
        args.setStrategyId(strategyId);
        args.setDay(day);
        args.setPayType(payType);
        args.setPrice(price);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dredgeStrategyAuthByMq();
      }
    }

    public void findStrategyByCategoryId(String categoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findStrategyByCategoryId_call method_call = new findStrategyByCategoryId_call(categoryId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findStrategyByCategoryId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String categoryId;
      public findStrategyByCategoryId_call(String categoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.categoryId = categoryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findStrategyByCategoryId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findStrategyByCategoryId_args args = new findStrategyByCategoryId_args();
        args.setCategoryId(categoryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findStrategyByCategoryId();
      }
    }

    public void findAllRunStrategyId(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllRunStrategyId_call method_call = new findAllRunStrategyId_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllRunStrategyId_call extends org.apache.thrift.async.TAsyncMethodCall {
      public findAllRunStrategyId_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllRunStrategyId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllRunStrategyId_args args = new findAllRunStrategyId_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllRunStrategyId();
      }
    }

    public void getStrategyUserByUidSid(int userId, int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStrategyUserByUidSid_call method_call = new getStrategyUserByUidSid_call(userId, strategyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStrategyUserByUidSid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private int strategyId;
      public getStrategyUserByUidSid_call(int userId, int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.strategyId = strategyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStrategyUserByUidSid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStrategyUserByUidSid_args args = new getStrategyUserByUidSid_args();
        args.setUserId(userId);
        args.setStrategyId(strategyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStrategyUserByUidSid();
      }
    }

    public void heartBeat(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      heartBeat_call method_call = new heartBeat_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class heartBeat_call extends org.apache.thrift.async.TAsyncMethodCall {
      public heartBeat_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("heartBeat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        heartBeat_args args = new heartBeat_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_heartBeat();
      }
    }

    public void disposeQuantStk(int strategyId, String time, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      disposeQuantStk_call method_call = new disposeQuantStk_call(strategyId, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class disposeQuantStk_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private String time;
      public disposeQuantStk_call(int strategyId, String time, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("disposeQuantStk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        disposeQuantStk_args args = new disposeQuantStk_args();
        args.setStrategyId(strategyId);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_disposeQuantStk();
      }
    }

    public void isExitsFile(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isExitsFile_call method_call = new isExitsFile_call(strategyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isExitsFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      public isExitsFile_call(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isExitsFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isExitsFile_args args = new isExitsFile_args();
        args.setStrategyId(strategyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isExitsFile();
      }
    }

    public void clearStrategyData(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      clearStrategyData_call method_call = new clearStrategyData_call(strategyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clearStrategyData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      public clearStrategyData_call(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clearStrategyData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        clearStrategyData_args args = new clearStrategyData_args();
        args.setStrategyId(strategyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_clearStrategyData();
      }
    }

    public void findAllValidRelation(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllValidRelation_call method_call = new findAllValidRelation_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllValidRelation_call extends org.apache.thrift.async.TAsyncMethodCall {
      public findAllValidRelation_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllValidRelation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllValidRelation_args args = new findAllValidRelation_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllValidRelation();
      }
    }

    public void findStrategyBuyUserCount(String time, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findStrategyBuyUserCount_call method_call = new findStrategyBuyUserCount_call(time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findStrategyBuyUserCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String time;
      public findStrategyBuyUserCount_call(String time, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findStrategyBuyUserCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findStrategyBuyUserCount_args args = new findStrategyBuyUserCount_args();
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findStrategyBuyUserCount();
      }
    }

    public void findStrategyUserLoopCount(String time, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findStrategyUserLoopCount_call method_call = new findStrategyUserLoopCount_call(time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findStrategyUserLoopCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String time;
      public findStrategyUserLoopCount_call(String time, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findStrategyUserLoopCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findStrategyUserLoopCount_args args = new findStrategyUserLoopCount_args();
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findStrategyUserLoopCount();
      }
    }

    public void queryStrategyBestStockListBySid(int sid, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryStrategyBestStockListBySid_call method_call = new queryStrategyBestStockListBySid_call(sid, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryStrategyBestStockListBySid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int sid;
      private int limit;
      public queryStrategyBestStockListBySid_call(int sid, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sid = sid;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryStrategyBestStockListBySid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryStrategyBestStockListBySid_args args = new queryStrategyBestStockListBySid_args();
        args.setSid(sid);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryStrategyBestStockListBySid();
      }
    }

    public void saveStrategyUserStock(int userId, int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveStrategyUserStock_call method_call = new saveStrategyUserStock_call(userId, strategyId, stockCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveStrategyUserStock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private int strategyId;
      private String stockCode;
      public saveStrategyUserStock_call(int userId, int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.strategyId = strategyId;
        this.stockCode = stockCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveStrategyUserStock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveStrategyUserStock_args args = new saveStrategyUserStock_args();
        args.setUserId(userId);
        args.setStrategyId(strategyId);
        args.setStockCode(stockCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveStrategyUserStock();
      }
    }

    public void deleteStrategyUserStock(int userId, int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteStrategyUserStock_call method_call = new deleteStrategyUserStock_call(userId, strategyId, stockCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteStrategyUserStock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private int strategyId;
      private String stockCode;
      public deleteStrategyUserStock_call(int userId, int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.strategyId = strategyId;
        this.stockCode = stockCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteStrategyUserStock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteStrategyUserStock_args args = new deleteStrategyUserStock_args();
        args.setUserId(userId);
        args.setStrategyId(strategyId);
        args.setStockCode(stockCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteStrategyUserStock();
      }
    }

    public void selectFollowNum(int userId, int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectFollowNum_call method_call = new selectFollowNum_call(userId, strategyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectFollowNum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private int strategyId;
      public selectFollowNum_call(int userId, int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.strategyId = strategyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectFollowNum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectFollowNum_args args = new selectFollowNum_args();
        args.setUserId(userId);
        args.setStrategyId(strategyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectFollowNum();
      }
    }

    public void queryTodayTrade(int strategyId, int type, long seq, int num, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryTodayTrade_call method_call = new queryTodayTrade_call(strategyId, type, seq, num, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryTodayTrade_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private int type;
      private long seq;
      private int num;
      public queryTodayTrade_call(int strategyId, int type, long seq, int num, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.type = type;
        this.seq = seq;
        this.num = num;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryTodayTrade", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryTodayTrade_args args = new queryTodayTrade_args();
        args.setStrategyId(strategyId);
        args.setType(type);
        args.setSeq(seq);
        args.setNum(num);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryTodayTrade();
      }
    }

    public void addTodayTrade(int strategyId, String stockTradeToday, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addTodayTrade_call method_call = new addTodayTrade_call(strategyId, stockTradeToday, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addTodayTrade_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private String stockTradeToday;
      public addTodayTrade_call(int strategyId, String stockTradeToday, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.stockTradeToday = stockTradeToday;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTodayTrade", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addTodayTrade_args args = new addTodayTrade_args();
        args.setStrategyId(strategyId);
        args.setStockTradeToday(stockTradeToday);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addTodayTrade();
      }
    }

    public void clearTodayTrade(int strategyId, int positionNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      clearTodayTrade_call method_call = new clearTodayTrade_call(strategyId, positionNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clearTodayTrade_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private int positionNum;
      public clearTodayTrade_call(int strategyId, int positionNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.positionNum = positionNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clearTodayTrade", org.apache.thrift.protocol.TMessageType.CALL, 0));
        clearTodayTrade_args args = new clearTodayTrade_args();
        args.setStrategyId(strategyId);
        args.setPositionNum(positionNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_clearTodayTrade();
      }
    }

    public void updateTodayBuy(int strategyId, String stockTradeTodayList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateTodayBuy_call method_call = new updateTodayBuy_call(strategyId, stockTradeTodayList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateTodayBuy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private String stockTradeTodayList;
      public updateTodayBuy_call(int strategyId, String stockTradeTodayList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.stockTradeTodayList = stockTradeTodayList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateTodayBuy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateTodayBuy_args args = new updateTodayBuy_args();
        args.setStrategyId(strategyId);
        args.setStockTradeTodayList(stockTradeTodayList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateTodayBuy();
      }
    }

    public void addStockTradeNear5Days(int strategyId, String stockTradeNear5DaysList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addStockTradeNear5Days_call method_call = new addStockTradeNear5Days_call(strategyId, stockTradeNear5DaysList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addStockTradeNear5Days_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private String stockTradeNear5DaysList;
      public addStockTradeNear5Days_call(int strategyId, String stockTradeNear5DaysList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.stockTradeNear5DaysList = stockTradeNear5DaysList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addStockTradeNear5Days", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addStockTradeNear5Days_args args = new addStockTradeNear5Days_args();
        args.setStrategyId(strategyId);
        args.setStockTradeNear5DaysList(stockTradeNear5DaysList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addStockTradeNear5Days();
      }
    }

    public void clearNear5DaysTrade(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      clearNear5DaysTrade_call method_call = new clearNear5DaysTrade_call(strategyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clearNear5DaysTrade_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      public clearNear5DaysTrade_call(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clearNear5DaysTrade", org.apache.thrift.protocol.TMessageType.CALL, 0));
        clearNear5DaysTrade_args args = new clearNear5DaysTrade_args();
        args.setStrategyId(strategyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_clearNear5DaysTrade();
      }
    }

    public void queryDays5Trade(int strategyId, long seq, int num, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryDays5Trade_call method_call = new queryDays5Trade_call(strategyId, seq, num, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryDays5Trade_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      private long seq;
      private int num;
      public queryDays5Trade_call(int strategyId, long seq, int num, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
        this.seq = seq;
        this.num = num;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryDays5Trade", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryDays5Trade_args args = new queryDays5Trade_args();
        args.setStrategyId(strategyId);
        args.setSeq(seq);
        args.setNum(num);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryDays5Trade();
      }
    }

    public void searchStockResult(int userId, int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchStockResult_call method_call = new searchStockResult_call(userId, strategyId, stockCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchStockResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private int strategyId;
      private String stockCode;
      public searchStockResult_call(int userId, int strategyId, String stockCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.strategyId = strategyId;
        this.stockCode = stockCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchStockResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchStockResult_args args = new searchStockResult_args();
        args.setUserId(userId);
        args.setStrategyId(strategyId);
        args.setStockCode(stockCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchStockResult();
      }
    }

    public void getStrategyExtend(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStrategyExtend_call method_call = new getStrategyExtend_call(strategyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStrategyExtend_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int strategyId;
      public getStrategyExtend_call(int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strategyId = strategyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStrategyExtend", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStrategyExtend_args args = new getStrategyExtend_args();
        args.setStrategyId(strategyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStrategyExtend();
      }
    }

    public void findUserFollowStock(int userId, int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserFollowStock_call method_call = new findUserFollowStock_call(userId, strategyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserFollowStock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private int strategyId;
      public findUserFollowStock_call(int userId, int strategyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.strategyId = strategyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserFollowStock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserFollowStock_args args = new findUserFollowStock_args();
        args.setUserId(userId);
        args.setStrategyId(strategyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserFollowStock();
      }
    }

    public void searchStrategyBestStock(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchStrategyBestStock_call method_call = new searchStrategyBestStock_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchStrategyBestStock_call extends org.apache.thrift.async.TAsyncMethodCall {
      public searchStrategyBestStock_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchStrategyBestStock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchStrategyBestStock_args args = new searchStrategyBestStock_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchStrategyBestStock();
      }
    }

    public void findReportData(int day, double lt, double rt, int num, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findReportData_call method_call = new findReportData_call(day, lt, rt, num, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findReportData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int day;
      private double lt;
      private double rt;
      private int num;
      public findReportData_call(int day, double lt, double rt, int num, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.day = day;
        this.lt = lt;
        this.rt = rt;
        this.num = num;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findReportData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findReportData_args args = new findReportData_args();
        args.setDay(day);
        args.setLt(lt);
        args.setRt(rt);
        args.setNum(num);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findReportData();
      }
    }

    public void findAllStrategyUser(String time, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllStrategyUser_call method_call = new findAllStrategyUser_call(time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllStrategyUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String time;
      public findAllStrategyUser_call(String time, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllStrategyUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllStrategyUser_args args = new findAllStrategyUser_args();
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllStrategyUser();
      }
    }

    public void incrDNALoopNum(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      incrDNALoopNum_call method_call = new incrDNALoopNum_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class incrDNALoopNum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public incrDNALoopNum_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("incrDNALoopNum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        incrDNALoopNum_args args = new incrDNALoopNum_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_incrDNALoopNum();
      }
    }

    public void findDNALoopByUserId(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findDNALoopByUserId_call method_call = new findDNALoopByUserId_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findDNALoopByUserId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public findDNALoopByUserId_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findDNALoopByUserId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findDNALoopByUserId_args args = new findDNALoopByUserId_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findDNALoopByUserId();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("saveStrategyBestStock", new saveStrategyBestStock());
      processMap.put("updateStrategyBestStock", new updateStrategyBestStock());
      processMap.put("queryStrategyBestStock", new queryStrategyBestStock());
      processMap.put("queryAllStrategyBestStock", new queryAllStrategyBestStock());
      processMap.put("queryAllStrategy", new queryAllStrategy());
      processMap.put("saveStrategyComment", new saveStrategyComment());
      processMap.put("deleteStrategyComment", new deleteStrategyComment());
      processMap.put("updateStrategyComment", new updateStrategyComment());
      processMap.put("getStrategyComment", new getStrategyComment());
      processMap.put("queryStrategyCommentByPage", new queryStrategyCommentByPage());
      processMap.put("findStrategyCommentList", new findStrategyCommentList());
      processMap.put("updateCommentStatus", new updateCommentStatus());
      processMap.put("saveStrategyScore", new saveStrategyScore());
      processMap.put("getStrategyScore", new getStrategyScore());
      processMap.put("saveStrategy", new saveStrategy());
      processMap.put("deleteStrategy", new deleteStrategy());
      processMap.put("updateStrategy", new updateStrategy());
      processMap.put("getStrategy", new getStrategy());
      processMap.put("queryStrategyByPage", new queryStrategyByPage());
      processMap.put("updateStrategyStatus", new updateStrategyStatus());
      processMap.put("saveStrategyUser", new saveStrategyUser());
      processMap.put("expandExpireTime", new expandExpireTime());
      processMap.put("getStrategyUser", new getStrategyUser());
      processMap.put("findStrategyByUserId", new findStrategyByUserId());
      processMap.put("queryStrategyUserByPage", new queryStrategyUserByPage());
      processMap.put("batchSaveStrategyUserStock", new batchSaveStrategyUserStock());
      processMap.put("findStockByStrategyAndUser", new findStockByStrategyAndUser());
      processMap.put("saveUserLoop", new saveUserLoop());
      processMap.put("deleteAllUserLoop", new deleteAllUserLoop());
      processMap.put("incrLoopNum", new incrLoopNum());
      processMap.put("incrFinishNum", new incrFinishNum());
      processMap.put("findUserLoopByUserId", new findUserLoopByUserId());
      processMap.put("batchInsertStrategyStockOneProfit", new batchInsertStrategyStockOneProfit());
      processMap.put("truncateStrategyStockOneProfit", new truncateStrategyStockOneProfit());
      processMap.put("queryStrategyStockOneProfit", new queryStrategyStockOneProfit());
      processMap.put("batchInsertStrategyStockThreeProfit", new batchInsertStrategyStockThreeProfit());
      processMap.put("truncateStrategyStockThreeProfit", new truncateStrategyStockThreeProfit());
      processMap.put("queryStrategyStockThreeProfit", new queryStrategyStockThreeProfit());
      processMap.put("findStrategyStockOneProfit", new findStrategyStockOneProfit());
      processMap.put("getOneYearAverageProfit", new getOneYearAverageProfit());
      processMap.put("getThreeYearAverageProfit", new getThreeYearAverageProfit());
      processMap.put("saveStrategyStockBlacklist", new saveStrategyStockBlacklist());
      processMap.put("getStrategyStockBlacklist", new getStrategyStockBlacklist());
      processMap.put("updateStockBlack", new updateStockBlack());
      processMap.put("sendTradeMq", new sendTradeMq());
      processMap.put("getPermissionNum", new getPermissionNum());
      processMap.put("addRecommendHotStock", new addRecommendHotStock());
      processMap.put("batchAddRecommendHotStock", new batchAddRecommendHotStock());
      processMap.put("delRecommendHotStock", new delRecommendHotStock());
      processMap.put("getRecommendHotStockList", new getRecommendHotStockList());
      processMap.put("queryStrategyReport", new queryStrategyReport());
      processMap.put("findStockByStrategyAndStock", new findStockByStrategyAndStock());
      processMap.put("delRecommendHotStockByType", new delRecommendHotStockByType());
      processMap.put("dredgeStrategyAuthByMq", new dredgeStrategyAuthByMq());
      processMap.put("findStrategyByCategoryId", new findStrategyByCategoryId());
      processMap.put("findAllRunStrategyId", new findAllRunStrategyId());
      processMap.put("getStrategyUserByUidSid", new getStrategyUserByUidSid());
      processMap.put("heartBeat", new heartBeat());
      processMap.put("disposeQuantStk", new disposeQuantStk());
      processMap.put("isExitsFile", new isExitsFile());
      processMap.put("clearStrategyData", new clearStrategyData());
      processMap.put("findAllValidRelation", new findAllValidRelation());
      processMap.put("findStrategyBuyUserCount", new findStrategyBuyUserCount());
      processMap.put("findStrategyUserLoopCount", new findStrategyUserLoopCount());
      processMap.put("queryStrategyBestStockListBySid", new queryStrategyBestStockListBySid());
      processMap.put("saveStrategyUserStock", new saveStrategyUserStock());
      processMap.put("deleteStrategyUserStock", new deleteStrategyUserStock());
      processMap.put("selectFollowNum", new selectFollowNum());
      processMap.put("queryTodayTrade", new queryTodayTrade());
      processMap.put("addTodayTrade", new addTodayTrade());
      processMap.put("clearTodayTrade", new clearTodayTrade());
      processMap.put("updateTodayBuy", new updateTodayBuy());
      processMap.put("addStockTradeNear5Days", new addStockTradeNear5Days());
      processMap.put("clearNear5DaysTrade", new clearNear5DaysTrade());
      processMap.put("queryDays5Trade", new queryDays5Trade());
      processMap.put("searchStockResult", new searchStockResult());
      processMap.put("getStrategyExtend", new getStrategyExtend());
      processMap.put("findUserFollowStock", new findUserFollowStock());
      processMap.put("searchStrategyBestStock", new searchStrategyBestStock());
      processMap.put("findReportData", new findReportData());
      processMap.put("findAllStrategyUser", new findAllStrategyUser());
      processMap.put("incrDNALoopNum", new incrDNALoopNum());
      processMap.put("findDNALoopByUserId", new findDNALoopByUserId());
      return processMap;
    }

    public static class saveStrategyBestStock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveStrategyBestStock_args> {
      public saveStrategyBestStock() {
        super("saveStrategyBestStock");
      }

      public saveStrategyBestStock_args getEmptyArgsInstance() {
        return new saveStrategyBestStock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveStrategyBestStock_result getResult(I iface, saveStrategyBestStock_args args) throws org.apache.thrift.TException {
        saveStrategyBestStock_result result = new saveStrategyBestStock_result();
        result.success = iface.saveStrategyBestStock(args.stockList);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateStrategyBestStock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStrategyBestStock_args> {
      public updateStrategyBestStock() {
        super("updateStrategyBestStock");
      }

      public updateStrategyBestStock_args getEmptyArgsInstance() {
        return new updateStrategyBestStock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateStrategyBestStock_result getResult(I iface, updateStrategyBestStock_args args) throws org.apache.thrift.TException {
        updateStrategyBestStock_result result = new updateStrategyBestStock_result();
        result.success = iface.updateStrategyBestStock(args.stockList);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryStrategyBestStock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryStrategyBestStock_args> {
      public queryStrategyBestStock() {
        super("queryStrategyBestStock");
      }

      public queryStrategyBestStock_args getEmptyArgsInstance() {
        return new queryStrategyBestStock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryStrategyBestStock_result getResult(I iface, queryStrategyBestStock_args args) throws org.apache.thrift.TException {
        queryStrategyBestStock_result result = new queryStrategyBestStock_result();
        result.success = iface.queryStrategyBestStock(args.num);
        return result;
      }
    }

    public static class queryAllStrategyBestStock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryAllStrategyBestStock_args> {
      public queryAllStrategyBestStock() {
        super("queryAllStrategyBestStock");
      }

      public queryAllStrategyBestStock_args getEmptyArgsInstance() {
        return new queryAllStrategyBestStock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryAllStrategyBestStock_result getResult(I iface, queryAllStrategyBestStock_args args) throws org.apache.thrift.TException {
        queryAllStrategyBestStock_result result = new queryAllStrategyBestStock_result();
        result.success = iface.queryAllStrategyBestStock(args.strategyId);
        return result;
      }
    }

    public static class queryAllStrategy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryAllStrategy_args> {
      public queryAllStrategy() {
        super("queryAllStrategy");
      }

      public queryAllStrategy_args getEmptyArgsInstance() {
        return new queryAllStrategy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryAllStrategy_result getResult(I iface, queryAllStrategy_args args) throws org.apache.thrift.TException {
        queryAllStrategy_result result = new queryAllStrategy_result();
        result.success = iface.queryAllStrategy(args.userId);
        return result;
      }
    }

    public static class saveStrategyComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveStrategyComment_args> {
      public saveStrategyComment() {
        super("saveStrategyComment");
      }

      public saveStrategyComment_args getEmptyArgsInstance() {
        return new saveStrategyComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveStrategyComment_result getResult(I iface, saveStrategyComment_args args) throws org.apache.thrift.TException {
        saveStrategyComment_result result = new saveStrategyComment_result();
        result.success = iface.saveStrategyComment(args.strategy);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteStrategyComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteStrategyComment_args> {
      public deleteStrategyComment() {
        super("deleteStrategyComment");
      }

      public deleteStrategyComment_args getEmptyArgsInstance() {
        return new deleteStrategyComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteStrategyComment_result getResult(I iface, deleteStrategyComment_args args) throws org.apache.thrift.TException {
        deleteStrategyComment_result result = new deleteStrategyComment_result();
        result.success = iface.deleteStrategyComment(args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateStrategyComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStrategyComment_args> {
      public updateStrategyComment() {
        super("updateStrategyComment");
      }

      public updateStrategyComment_args getEmptyArgsInstance() {
        return new updateStrategyComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateStrategyComment_result getResult(I iface, updateStrategyComment_args args) throws org.apache.thrift.TException {
        updateStrategyComment_result result = new updateStrategyComment_result();
        result.success = iface.updateStrategyComment(args.strategy);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getStrategyComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStrategyComment_args> {
      public getStrategyComment() {
        super("getStrategyComment");
      }

      public getStrategyComment_args getEmptyArgsInstance() {
        return new getStrategyComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStrategyComment_result getResult(I iface, getStrategyComment_args args) throws org.apache.thrift.TException {
        getStrategyComment_result result = new getStrategyComment_result();
        result.success = iface.getStrategyComment(args.id);
        return result;
      }
    }

    public static class queryStrategyCommentByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryStrategyCommentByPage_args> {
      public queryStrategyCommentByPage() {
        super("queryStrategyCommentByPage");
      }

      public queryStrategyCommentByPage_args getEmptyArgsInstance() {
        return new queryStrategyCommentByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryStrategyCommentByPage_result getResult(I iface, queryStrategyCommentByPage_args args) throws org.apache.thrift.TException {
        queryStrategyCommentByPage_result result = new queryStrategyCommentByPage_result();
        result.success = iface.queryStrategyCommentByPage(args.strategyId, args.userId, args.pageIndex, args.pageSize);
        return result;
      }
    }

    public static class findStrategyCommentList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findStrategyCommentList_args> {
      public findStrategyCommentList() {
        super("findStrategyCommentList");
      }

      public findStrategyCommentList_args getEmptyArgsInstance() {
        return new findStrategyCommentList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findStrategyCommentList_result getResult(I iface, findStrategyCommentList_args args) throws org.apache.thrift.TException {
        findStrategyCommentList_result result = new findStrategyCommentList_result();
        result.success = iface.findStrategyCommentList(args.strategyId, args.pageIndex, args.pageSize);
        return result;
      }
    }

    public static class updateCommentStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCommentStatus_args> {
      public updateCommentStatus() {
        super("updateCommentStatus");
      }

      public updateCommentStatus_args getEmptyArgsInstance() {
        return new updateCommentStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCommentStatus_result getResult(I iface, updateCommentStatus_args args) throws org.apache.thrift.TException {
        updateCommentStatus_result result = new updateCommentStatus_result();
        result.success = iface.updateCommentStatus(args.id, args.status);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class saveStrategyScore<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveStrategyScore_args> {
      public saveStrategyScore() {
        super("saveStrategyScore");
      }

      public saveStrategyScore_args getEmptyArgsInstance() {
        return new saveStrategyScore_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveStrategyScore_result getResult(I iface, saveStrategyScore_args args) throws org.apache.thrift.TException {
        saveStrategyScore_result result = new saveStrategyScore_result();
        result.success = iface.saveStrategyScore(args.strategyScore);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getStrategyScore<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStrategyScore_args> {
      public getStrategyScore() {
        super("getStrategyScore");
      }

      public getStrategyScore_args getEmptyArgsInstance() {
        return new getStrategyScore_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStrategyScore_result getResult(I iface, getStrategyScore_args args) throws org.apache.thrift.TException {
        getStrategyScore_result result = new getStrategyScore_result();
        result.success = iface.getStrategyScore(args.strategyId);
        return result;
      }
    }

    public static class saveStrategy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveStrategy_args> {
      public saveStrategy() {
        super("saveStrategy");
      }

      public saveStrategy_args getEmptyArgsInstance() {
        return new saveStrategy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveStrategy_result getResult(I iface, saveStrategy_args args) throws org.apache.thrift.TException {
        saveStrategy_result result = new saveStrategy_result();
        result.success = iface.saveStrategy(args.strategy);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteStrategy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteStrategy_args> {
      public deleteStrategy() {
        super("deleteStrategy");
      }

      public deleteStrategy_args getEmptyArgsInstance() {
        return new deleteStrategy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteStrategy_result getResult(I iface, deleteStrategy_args args) throws org.apache.thrift.TException {
        deleteStrategy_result result = new deleteStrategy_result();
        result.success = iface.deleteStrategy(args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateStrategy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStrategy_args> {
      public updateStrategy() {
        super("updateStrategy");
      }

      public updateStrategy_args getEmptyArgsInstance() {
        return new updateStrategy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateStrategy_result getResult(I iface, updateStrategy_args args) throws org.apache.thrift.TException {
        updateStrategy_result result = new updateStrategy_result();
        result.success = iface.updateStrategy(args.strategy);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getStrategy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStrategy_args> {
      public getStrategy() {
        super("getStrategy");
      }

      public getStrategy_args getEmptyArgsInstance() {
        return new getStrategy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStrategy_result getResult(I iface, getStrategy_args args) throws org.apache.thrift.TException {
        getStrategy_result result = new getStrategy_result();
        result.success = iface.getStrategy(args.id);
        return result;
      }
    }

    public static class queryStrategyByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryStrategyByPage_args> {
      public queryStrategyByPage() {
        super("queryStrategyByPage");
      }

      public queryStrategyByPage_args getEmptyArgsInstance() {
        return new queryStrategyByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryStrategyByPage_result getResult(I iface, queryStrategyByPage_args args) throws org.apache.thrift.TException {
        queryStrategyByPage_result result = new queryStrategyByPage_result();
        result.success = iface.queryStrategyByPage(args.id, args.type, args.displayStatus, args.runStatus, args.pageIndex, args.pageSize);
        return result;
      }
    }

    public static class updateStrategyStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStrategyStatus_args> {
      public updateStrategyStatus() {
        super("updateStrategyStatus");
      }

      public updateStrategyStatus_args getEmptyArgsInstance() {
        return new updateStrategyStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateStrategyStatus_result getResult(I iface, updateStrategyStatus_args args) throws org.apache.thrift.TException {
        updateStrategyStatus_result result = new updateStrategyStatus_result();
        result.success = iface.updateStrategyStatus(args.id, args.status);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class saveStrategyUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveStrategyUser_args> {
      public saveStrategyUser() {
        super("saveStrategyUser");
      }

      public saveStrategyUser_args getEmptyArgsInstance() {
        return new saveStrategyUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveStrategyUser_result getResult(I iface, saveStrategyUser_args args) throws org.apache.thrift.TException {
        saveStrategyUser_result result = new saveStrategyUser_result();
        result.success = iface.saveStrategyUser(args.strategy);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class expandExpireTime<I extends Iface> extends org.apache.thrift.ProcessFunction<I, expandExpireTime_args> {
      public expandExpireTime() {
        super("expandExpireTime");
      }

      public expandExpireTime_args getEmptyArgsInstance() {
        return new expandExpireTime_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public expandExpireTime_result getResult(I iface, expandExpireTime_args args) throws org.apache.thrift.TException {
        expandExpireTime_result result = new expandExpireTime_result();
        result.success = iface.expandExpireTime(args.userId, args.strategyId, args.days, args.payType, args.price);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getStrategyUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStrategyUser_args> {
      public getStrategyUser() {
        super("getStrategyUser");
      }

      public getStrategyUser_args getEmptyArgsInstance() {
        return new getStrategyUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStrategyUser_result getResult(I iface, getStrategyUser_args args) throws org.apache.thrift.TException {
        getStrategyUser_result result = new getStrategyUser_result();
        result.success = iface.getStrategyUser(args.id);
        return result;
      }
    }

    public static class findStrategyByUserId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findStrategyByUserId_args> {
      public findStrategyByUserId() {
        super("findStrategyByUserId");
      }

      public findStrategyByUserId_args getEmptyArgsInstance() {
        return new findStrategyByUserId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findStrategyByUserId_result getResult(I iface, findStrategyByUserId_args args) throws org.apache.thrift.TException {
        findStrategyByUserId_result result = new findStrategyByUserId_result();
        result.success = iface.findStrategyByUserId(args.userId, args.expire);
        return result;
      }
    }

    public static class queryStrategyUserByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryStrategyUserByPage_args> {
      public queryStrategyUserByPage() {
        super("queryStrategyUserByPage");
      }

      public queryStrategyUserByPage_args getEmptyArgsInstance() {
        return new queryStrategyUserByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryStrategyUserByPage_result getResult(I iface, queryStrategyUserByPage_args args) throws org.apache.thrift.TException {
        queryStrategyUserByPage_result result = new queryStrategyUserByPage_result();
        result.success = iface.queryStrategyUserByPage(args.userId, args.strategyId, args.pageIndex, args.pageSize);
        return result;
      }
    }

    public static class batchSaveStrategyUserStock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchSaveStrategyUserStock_args> {
      public batchSaveStrategyUserStock() {
        super("batchSaveStrategyUserStock");
      }

      public batchSaveStrategyUserStock_args getEmptyArgsInstance() {
        return new batchSaveStrategyUserStock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchSaveStrategyUserStock_result getResult(I iface, batchSaveStrategyUserStock_args args) throws org.apache.thrift.TException {
        batchSaveStrategyUserStock_result result = new batchSaveStrategyUserStock_result();
        result.success = iface.batchSaveStrategyUserStock(args.userId, args.strategyId, args.relationList);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findStockByStrategyAndUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findStockByStrategyAndUser_args> {
      public findStockByStrategyAndUser() {
        super("findStockByStrategyAndUser");
      }

      public findStockByStrategyAndUser_args getEmptyArgsInstance() {
        return new findStockByStrategyAndUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findStockByStrategyAndUser_result getResult(I iface, findStockByStrategyAndUser_args args) throws org.apache.thrift.TException {
        findStockByStrategyAndUser_result result = new findStockByStrategyAndUser_result();
        result.success = iface.findStockByStrategyAndUser(args.userId, args.strategyId);
        return result;
      }
    }

    public static class saveUserLoop<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveUserLoop_args> {
      public saveUserLoop() {
        super("saveUserLoop");
      }

      public saveUserLoop_args getEmptyArgsInstance() {
        return new saveUserLoop_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveUserLoop_result getResult(I iface, saveUserLoop_args args) throws org.apache.thrift.TException {
        saveUserLoop_result result = new saveUserLoop_result();
        result.success = iface.saveUserLoop(args.userId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteAllUserLoop<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteAllUserLoop_args> {
      public deleteAllUserLoop() {
        super("deleteAllUserLoop");
      }

      public deleteAllUserLoop_args getEmptyArgsInstance() {
        return new deleteAllUserLoop_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteAllUserLoop_result getResult(I iface, deleteAllUserLoop_args args) throws org.apache.thrift.TException {
        deleteAllUserLoop_result result = new deleteAllUserLoop_result();
        result.success = iface.deleteAllUserLoop();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class incrLoopNum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, incrLoopNum_args> {
      public incrLoopNum() {
        super("incrLoopNum");
      }

      public incrLoopNum_args getEmptyArgsInstance() {
        return new incrLoopNum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public incrLoopNum_result getResult(I iface, incrLoopNum_args args) throws org.apache.thrift.TException {
        incrLoopNum_result result = new incrLoopNum_result();
        result.success = iface.incrLoopNum(args.userId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class incrFinishNum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, incrFinishNum_args> {
      public incrFinishNum() {
        super("incrFinishNum");
      }

      public incrFinishNum_args getEmptyArgsInstance() {
        return new incrFinishNum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public incrFinishNum_result getResult(I iface, incrFinishNum_args args) throws org.apache.thrift.TException {
        incrFinishNum_result result = new incrFinishNum_result();
        result.success = iface.incrFinishNum(args.userId, args.strategyId, args.stocks);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findUserLoopByUserId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserLoopByUserId_args> {
      public findUserLoopByUserId() {
        super("findUserLoopByUserId");
      }

      public findUserLoopByUserId_args getEmptyArgsInstance() {
        return new findUserLoopByUserId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findUserLoopByUserId_result getResult(I iface, findUserLoopByUserId_args args) throws org.apache.thrift.TException {
        findUserLoopByUserId_result result = new findUserLoopByUserId_result();
        result.success = iface.findUserLoopByUserId(args.userId);
        return result;
      }
    }

    public static class batchInsertStrategyStockOneProfit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchInsertStrategyStockOneProfit_args> {
      public batchInsertStrategyStockOneProfit() {
        super("batchInsertStrategyStockOneProfit");
      }

      public batchInsertStrategyStockOneProfit_args getEmptyArgsInstance() {
        return new batchInsertStrategyStockOneProfit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchInsertStrategyStockOneProfit_result getResult(I iface, batchInsertStrategyStockOneProfit_args args) throws org.apache.thrift.TException {
        batchInsertStrategyStockOneProfit_result result = new batchInsertStrategyStockOneProfit_result();
        result.success = iface.batchInsertStrategyStockOneProfit(args.thriftList);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class truncateStrategyStockOneProfit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, truncateStrategyStockOneProfit_args> {
      public truncateStrategyStockOneProfit() {
        super("truncateStrategyStockOneProfit");
      }

      public truncateStrategyStockOneProfit_args getEmptyArgsInstance() {
        return new truncateStrategyStockOneProfit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public truncateStrategyStockOneProfit_result getResult(I iface, truncateStrategyStockOneProfit_args args) throws org.apache.thrift.TException {
        truncateStrategyStockOneProfit_result result = new truncateStrategyStockOneProfit_result();
        result.success = iface.truncateStrategyStockOneProfit(args.strategyId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryStrategyStockOneProfit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryStrategyStockOneProfit_args> {
      public queryStrategyStockOneProfit() {
        super("queryStrategyStockOneProfit");
      }

      public queryStrategyStockOneProfit_args getEmptyArgsInstance() {
        return new queryStrategyStockOneProfit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryStrategyStockOneProfit_result getResult(I iface, queryStrategyStockOneProfit_args args) throws org.apache.thrift.TException {
        queryStrategyStockOneProfit_result result = new queryStrategyStockOneProfit_result();
        result.success = iface.queryStrategyStockOneProfit(args.strategyId, args.stocks);
        return result;
      }
    }

    public static class batchInsertStrategyStockThreeProfit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchInsertStrategyStockThreeProfit_args> {
      public batchInsertStrategyStockThreeProfit() {
        super("batchInsertStrategyStockThreeProfit");
      }

      public batchInsertStrategyStockThreeProfit_args getEmptyArgsInstance() {
        return new batchInsertStrategyStockThreeProfit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchInsertStrategyStockThreeProfit_result getResult(I iface, batchInsertStrategyStockThreeProfit_args args) throws org.apache.thrift.TException {
        batchInsertStrategyStockThreeProfit_result result = new batchInsertStrategyStockThreeProfit_result();
        result.success = iface.batchInsertStrategyStockThreeProfit(args.thriftList);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class truncateStrategyStockThreeProfit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, truncateStrategyStockThreeProfit_args> {
      public truncateStrategyStockThreeProfit() {
        super("truncateStrategyStockThreeProfit");
      }

      public truncateStrategyStockThreeProfit_args getEmptyArgsInstance() {
        return new truncateStrategyStockThreeProfit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public truncateStrategyStockThreeProfit_result getResult(I iface, truncateStrategyStockThreeProfit_args args) throws org.apache.thrift.TException {
        truncateStrategyStockThreeProfit_result result = new truncateStrategyStockThreeProfit_result();
        result.success = iface.truncateStrategyStockThreeProfit(args.strategyId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryStrategyStockThreeProfit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryStrategyStockThreeProfit_args> {
      public queryStrategyStockThreeProfit() {
        super("queryStrategyStockThreeProfit");
      }

      public queryStrategyStockThreeProfit_args getEmptyArgsInstance() {
        return new queryStrategyStockThreeProfit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryStrategyStockThreeProfit_result getResult(I iface, queryStrategyStockThreeProfit_args args) throws org.apache.thrift.TException {
        queryStrategyStockThreeProfit_result result = new queryStrategyStockThreeProfit_result();
        result.success = iface.queryStrategyStockThreeProfit(args.strategyId, args.stocks);
        return result;
      }
    }

    public static class findStrategyStockOneProfit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findStrategyStockOneProfit_args> {
      public findStrategyStockOneProfit() {
        super("findStrategyStockOneProfit");
      }

      public findStrategyStockOneProfit_args getEmptyArgsInstance() {
        return new findStrategyStockOneProfit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findStrategyStockOneProfit_result getResult(I iface, findStrategyStockOneProfit_args args) throws org.apache.thrift.TException {
        findStrategyStockOneProfit_result result = new findStrategyStockOneProfit_result();
        result.success = iface.findStrategyStockOneProfit(args.strategyId, args.stockCode);
        return result;
      }
    }

    public static class getOneYearAverageProfit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOneYearAverageProfit_args> {
      public getOneYearAverageProfit() {
        super("getOneYearAverageProfit");
      }

      public getOneYearAverageProfit_args getEmptyArgsInstance() {
        return new getOneYearAverageProfit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOneYearAverageProfit_result getResult(I iface, getOneYearAverageProfit_args args) throws org.apache.thrift.TException {
        getOneYearAverageProfit_result result = new getOneYearAverageProfit_result();
        result.success = iface.getOneYearAverageProfit(args.strategyId, args.stocks);
        return result;
      }
    }

    public static class getThreeYearAverageProfit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getThreeYearAverageProfit_args> {
      public getThreeYearAverageProfit() {
        super("getThreeYearAverageProfit");
      }

      public getThreeYearAverageProfit_args getEmptyArgsInstance() {
        return new getThreeYearAverageProfit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getThreeYearAverageProfit_result getResult(I iface, getThreeYearAverageProfit_args args) throws org.apache.thrift.TException {
        getThreeYearAverageProfit_result result = new getThreeYearAverageProfit_result();
        result.success = iface.getThreeYearAverageProfit(args.strategyId, args.stocks);
        return result;
      }
    }

    public static class saveStrategyStockBlacklist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveStrategyStockBlacklist_args> {
      public saveStrategyStockBlacklist() {
        super("saveStrategyStockBlacklist");
      }

      public saveStrategyStockBlacklist_args getEmptyArgsInstance() {
        return new saveStrategyStockBlacklist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveStrategyStockBlacklist_result getResult(I iface, saveStrategyStockBlacklist_args args) throws org.apache.thrift.TException {
        saveStrategyStockBlacklist_result result = new saveStrategyStockBlacklist_result();
        result.success = iface.saveStrategyStockBlacklist(args.ssb);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getStrategyStockBlacklist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStrategyStockBlacklist_args> {
      public getStrategyStockBlacklist() {
        super("getStrategyStockBlacklist");
      }

      public getStrategyStockBlacklist_args getEmptyArgsInstance() {
        return new getStrategyStockBlacklist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStrategyStockBlacklist_result getResult(I iface, getStrategyStockBlacklist_args args) throws org.apache.thrift.TException {
        getStrategyStockBlacklist_result result = new getStrategyStockBlacklist_result();
        result.success = iface.getStrategyStockBlacklist(args.strategyId);
        return result;
      }
    }

    public static class updateStockBlack<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStockBlack_args> {
      public updateStockBlack() {
        super("updateStockBlack");
      }

      public updateStockBlack_args getEmptyArgsInstance() {
        return new updateStockBlack_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateStockBlack_result getResult(I iface, updateStockBlack_args args) throws org.apache.thrift.TException {
        updateStockBlack_result result = new updateStockBlack_result();
        result.success = iface.updateStockBlack(args.id, args.stockCodes);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class sendTradeMq<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendTradeMq_args> {
      public sendTradeMq() {
        super("sendTradeMq");
      }

      public sendTradeMq_args getEmptyArgsInstance() {
        return new sendTradeMq_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendTradeMq_result getResult(I iface, sendTradeMq_args args) throws org.apache.thrift.TException {
        sendTradeMq_result result = new sendTradeMq_result();
        result.success = iface.sendTradeMq(args.type, args.json);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getPermissionNum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPermissionNum_args> {
      public getPermissionNum() {
        super("getPermissionNum");
      }

      public getPermissionNum_args getEmptyArgsInstance() {
        return new getPermissionNum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPermissionNum_result getResult(I iface, getPermissionNum_args args) throws org.apache.thrift.TException {
        getPermissionNum_result result = new getPermissionNum_result();
        result.success = iface.getPermissionNum(args.userId, args.strategyId);
        return result;
      }
    }

    public static class addRecommendHotStock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRecommendHotStock_args> {
      public addRecommendHotStock() {
        super("addRecommendHotStock");
      }

      public addRecommendHotStock_args getEmptyArgsInstance() {
        return new addRecommendHotStock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addRecommendHotStock_result getResult(I iface, addRecommendHotStock_args args) throws org.apache.thrift.TException {
        addRecommendHotStock_result result = new addRecommendHotStock_result();
        result.success = iface.addRecommendHotStock(args.recommendHotStock);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class batchAddRecommendHotStock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchAddRecommendHotStock_args> {
      public batchAddRecommendHotStock() {
        super("batchAddRecommendHotStock");
      }

      public batchAddRecommendHotStock_args getEmptyArgsInstance() {
        return new batchAddRecommendHotStock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchAddRecommendHotStock_result getResult(I iface, batchAddRecommendHotStock_args args) throws org.apache.thrift.TException {
        batchAddRecommendHotStock_result result = new batchAddRecommendHotStock_result();
        result.success = iface.batchAddRecommendHotStock(args.recommendHotStockList);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delRecommendHotStock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delRecommendHotStock_args> {
      public delRecommendHotStock() {
        super("delRecommendHotStock");
      }

      public delRecommendHotStock_args getEmptyArgsInstance() {
        return new delRecommendHotStock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delRecommendHotStock_result getResult(I iface, delRecommendHotStock_args args) throws org.apache.thrift.TException {
        delRecommendHotStock_result result = new delRecommendHotStock_result();
        result.success = iface.delRecommendHotStock(args.strategyId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getRecommendHotStockList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecommendHotStockList_args> {
      public getRecommendHotStockList() {
        super("getRecommendHotStockList");
      }

      public getRecommendHotStockList_args getEmptyArgsInstance() {
        return new getRecommendHotStockList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRecommendHotStockList_result getResult(I iface, getRecommendHotStockList_args args) throws org.apache.thrift.TException {
        getRecommendHotStockList_result result = new getRecommendHotStockList_result();
        result.success = iface.getRecommendHotStockList(args.strategyId, args.type);
        return result;
      }
    }

    public static class queryStrategyReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryStrategyReport_args> {
      public queryStrategyReport() {
        super("queryStrategyReport");
      }

      public queryStrategyReport_args getEmptyArgsInstance() {
        return new queryStrategyReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryStrategyReport_result getResult(I iface, queryStrategyReport_args args) throws org.apache.thrift.TException {
        queryStrategyReport_result result = new queryStrategyReport_result();
        result.success = iface.queryStrategyReport(args.strategyId, args.stocks, args.userId);
        return result;
      }
    }

    public static class findStockByStrategyAndStock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findStockByStrategyAndStock_args> {
      public findStockByStrategyAndStock() {
        super("findStockByStrategyAndStock");
      }

      public findStockByStrategyAndStock_args getEmptyArgsInstance() {
        return new findStockByStrategyAndStock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findStockByStrategyAndStock_result getResult(I iface, findStockByStrategyAndStock_args args) throws org.apache.thrift.TException {
        findStockByStrategyAndStock_result result = new findStockByStrategyAndStock_result();
        result.success = iface.findStockByStrategyAndStock(args.strategyId, args.stockCode);
        return result;
      }
    }

    public static class delRecommendHotStockByType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delRecommendHotStockByType_args> {
      public delRecommendHotStockByType() {
        super("delRecommendHotStockByType");
      }

      public delRecommendHotStockByType_args getEmptyArgsInstance() {
        return new delRecommendHotStockByType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delRecommendHotStockByType_result getResult(I iface, delRecommendHotStockByType_args args) throws org.apache.thrift.TException {
        delRecommendHotStockByType_result result = new delRecommendHotStockByType_result();
        result.success = iface.delRecommendHotStockByType(args.type, args.strategyId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class dredgeStrategyAuthByMq<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dredgeStrategyAuthByMq_args> {
      public dredgeStrategyAuthByMq() {
        super("dredgeStrategyAuthByMq");
      }

      public dredgeStrategyAuthByMq_args getEmptyArgsInstance() {
        return new dredgeStrategyAuthByMq_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dredgeStrategyAuthByMq_result getResult(I iface, dredgeStrategyAuthByMq_args args) throws org.apache.thrift.TException {
        dredgeStrategyAuthByMq_result result = new dredgeStrategyAuthByMq_result();
        result.success = iface.dredgeStrategyAuthByMq(args.userId, args.strategyId, args.day, args.payType, args.price);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findStrategyByCategoryId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findStrategyByCategoryId_args> {
      public findStrategyByCategoryId() {
        super("findStrategyByCategoryId");
      }

      public findStrategyByCategoryId_args getEmptyArgsInstance() {
        return new findStrategyByCategoryId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findStrategyByCategoryId_result getResult(I iface, findStrategyByCategoryId_args args) throws org.apache.thrift.TException {
        findStrategyByCategoryId_result result = new findStrategyByCategoryId_result();
        result.success = iface.findStrategyByCategoryId(args.categoryId);
        return result;
      }
    }

    public static class findAllRunStrategyId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllRunStrategyId_args> {
      public findAllRunStrategyId() {
        super("findAllRunStrategyId");
      }

      public findAllRunStrategyId_args getEmptyArgsInstance() {
        return new findAllRunStrategyId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllRunStrategyId_result getResult(I iface, findAllRunStrategyId_args args) throws org.apache.thrift.TException {
        findAllRunStrategyId_result result = new findAllRunStrategyId_result();
        result.success = iface.findAllRunStrategyId();
        return result;
      }
    }

    public static class getStrategyUserByUidSid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStrategyUserByUidSid_args> {
      public getStrategyUserByUidSid() {
        super("getStrategyUserByUidSid");
      }

      public getStrategyUserByUidSid_args getEmptyArgsInstance() {
        return new getStrategyUserByUidSid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStrategyUserByUidSid_result getResult(I iface, getStrategyUserByUidSid_args args) throws org.apache.thrift.TException {
        getStrategyUserByUidSid_result result = new getStrategyUserByUidSid_result();
        result.success = iface.getStrategyUserByUidSid(args.userId, args.strategyId);
        return result;
      }
    }

    public static class heartBeat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, heartBeat_args> {
      public heartBeat() {
        super("heartBeat");
      }

      public heartBeat_args getEmptyArgsInstance() {
        return new heartBeat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public heartBeat_result getResult(I iface, heartBeat_args args) throws org.apache.thrift.TException {
        heartBeat_result result = new heartBeat_result();
        result.success = iface.heartBeat();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class disposeQuantStk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, disposeQuantStk_args> {
      public disposeQuantStk() {
        super("disposeQuantStk");
      }

      public disposeQuantStk_args getEmptyArgsInstance() {
        return new disposeQuantStk_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public disposeQuantStk_result getResult(I iface, disposeQuantStk_args args) throws org.apache.thrift.TException {
        disposeQuantStk_result result = new disposeQuantStk_result();
        result.success = iface.disposeQuantStk(args.strategyId, args.time);
        return result;
      }
    }

    public static class isExitsFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isExitsFile_args> {
      public isExitsFile() {
        super("isExitsFile");
      }

      public isExitsFile_args getEmptyArgsInstance() {
        return new isExitsFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isExitsFile_result getResult(I iface, isExitsFile_args args) throws org.apache.thrift.TException {
        isExitsFile_result result = new isExitsFile_result();
        result.success = iface.isExitsFile(args.strategyId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class clearStrategyData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clearStrategyData_args> {
      public clearStrategyData() {
        super("clearStrategyData");
      }

      public clearStrategyData_args getEmptyArgsInstance() {
        return new clearStrategyData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public clearStrategyData_result getResult(I iface, clearStrategyData_args args) throws org.apache.thrift.TException {
        clearStrategyData_result result = new clearStrategyData_result();
        result.success = iface.clearStrategyData(args.strategyId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findAllValidRelation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllValidRelation_args> {
      public findAllValidRelation() {
        super("findAllValidRelation");
      }

      public findAllValidRelation_args getEmptyArgsInstance() {
        return new findAllValidRelation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllValidRelation_result getResult(I iface, findAllValidRelation_args args) throws org.apache.thrift.TException {
        findAllValidRelation_result result = new findAllValidRelation_result();
        result.success = iface.findAllValidRelation();
        return result;
      }
    }

    public static class findStrategyBuyUserCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findStrategyBuyUserCount_args> {
      public findStrategyBuyUserCount() {
        super("findStrategyBuyUserCount");
      }

      public findStrategyBuyUserCount_args getEmptyArgsInstance() {
        return new findStrategyBuyUserCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findStrategyBuyUserCount_result getResult(I iface, findStrategyBuyUserCount_args args) throws org.apache.thrift.TException {
        findStrategyBuyUserCount_result result = new findStrategyBuyUserCount_result();
        result.success = iface.findStrategyBuyUserCount(args.time);
        return result;
      }
    }

    public static class findStrategyUserLoopCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findStrategyUserLoopCount_args> {
      public findStrategyUserLoopCount() {
        super("findStrategyUserLoopCount");
      }

      public findStrategyUserLoopCount_args getEmptyArgsInstance() {
        return new findStrategyUserLoopCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findStrategyUserLoopCount_result getResult(I iface, findStrategyUserLoopCount_args args) throws org.apache.thrift.TException {
        findStrategyUserLoopCount_result result = new findStrategyUserLoopCount_result();
        result.success = iface.findStrategyUserLoopCount(args.time);
        return result;
      }
    }

    public static class queryStrategyBestStockListBySid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryStrategyBestStockListBySid_args> {
      public queryStrategyBestStockListBySid() {
        super("queryStrategyBestStockListBySid");
      }

      public queryStrategyBestStockListBySid_args getEmptyArgsInstance() {
        return new queryStrategyBestStockListBySid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryStrategyBestStockListBySid_result getResult(I iface, queryStrategyBestStockListBySid_args args) throws org.apache.thrift.TException {
        queryStrategyBestStockListBySid_result result = new queryStrategyBestStockListBySid_result();
        result.success = iface.queryStrategyBestStockListBySid(args.sid, args.limit);
        return result;
      }
    }

    public static class saveStrategyUserStock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveStrategyUserStock_args> {
      public saveStrategyUserStock() {
        super("saveStrategyUserStock");
      }

      public saveStrategyUserStock_args getEmptyArgsInstance() {
        return new saveStrategyUserStock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveStrategyUserStock_result getResult(I iface, saveStrategyUserStock_args args) throws org.apache.thrift.TException {
        saveStrategyUserStock_result result = new saveStrategyUserStock_result();
        result.success = iface.saveStrategyUserStock(args.userId, args.strategyId, args.stockCode);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteStrategyUserStock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteStrategyUserStock_args> {
      public deleteStrategyUserStock() {
        super("deleteStrategyUserStock");
      }

      public deleteStrategyUserStock_args getEmptyArgsInstance() {
        return new deleteStrategyUserStock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteStrategyUserStock_result getResult(I iface, deleteStrategyUserStock_args args) throws org.apache.thrift.TException {
        deleteStrategyUserStock_result result = new deleteStrategyUserStock_result();
        result.success = iface.deleteStrategyUserStock(args.userId, args.strategyId, args.stockCode);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class selectFollowNum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectFollowNum_args> {
      public selectFollowNum() {
        super("selectFollowNum");
      }

      public selectFollowNum_args getEmptyArgsInstance() {
        return new selectFollowNum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectFollowNum_result getResult(I iface, selectFollowNum_args args) throws org.apache.thrift.TException {
        selectFollowNum_result result = new selectFollowNum_result();
        result.success = iface.selectFollowNum(args.userId, args.strategyId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryTodayTrade<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryTodayTrade_args> {
      public queryTodayTrade() {
        super("queryTodayTrade");
      }

      public queryTodayTrade_args getEmptyArgsInstance() {
        return new queryTodayTrade_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryTodayTrade_result getResult(I iface, queryTodayTrade_args args) throws org.apache.thrift.TException {
        queryTodayTrade_result result = new queryTodayTrade_result();
        result.success = iface.queryTodayTrade(args.strategyId, args.type, args.seq, args.num);
        return result;
      }
    }

    public static class addTodayTrade<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addTodayTrade_args> {
      public addTodayTrade() {
        super("addTodayTrade");
      }

      public addTodayTrade_args getEmptyArgsInstance() {
        return new addTodayTrade_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addTodayTrade_result getResult(I iface, addTodayTrade_args args) throws org.apache.thrift.TException {
        addTodayTrade_result result = new addTodayTrade_result();
        result.success = iface.addTodayTrade(args.strategyId, args.stockTradeToday);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class clearTodayTrade<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clearTodayTrade_args> {
      public clearTodayTrade() {
        super("clearTodayTrade");
      }

      public clearTodayTrade_args getEmptyArgsInstance() {
        return new clearTodayTrade_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public clearTodayTrade_result getResult(I iface, clearTodayTrade_args args) throws org.apache.thrift.TException {
        clearTodayTrade_result result = new clearTodayTrade_result();
        result.success = iface.clearTodayTrade(args.strategyId, args.positionNum);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateTodayBuy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateTodayBuy_args> {
      public updateTodayBuy() {
        super("updateTodayBuy");
      }

      public updateTodayBuy_args getEmptyArgsInstance() {
        return new updateTodayBuy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateTodayBuy_result getResult(I iface, updateTodayBuy_args args) throws org.apache.thrift.TException {
        updateTodayBuy_result result = new updateTodayBuy_result();
        result.success = iface.updateTodayBuy(args.strategyId, args.stockTradeTodayList);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addStockTradeNear5Days<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addStockTradeNear5Days_args> {
      public addStockTradeNear5Days() {
        super("addStockTradeNear5Days");
      }

      public addStockTradeNear5Days_args getEmptyArgsInstance() {
        return new addStockTradeNear5Days_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addStockTradeNear5Days_result getResult(I iface, addStockTradeNear5Days_args args) throws org.apache.thrift.TException {
        addStockTradeNear5Days_result result = new addStockTradeNear5Days_result();
        result.success = iface.addStockTradeNear5Days(args.strategyId, args.stockTradeNear5DaysList);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class clearNear5DaysTrade<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clearNear5DaysTrade_args> {
      public clearNear5DaysTrade() {
        super("clearNear5DaysTrade");
      }

      public clearNear5DaysTrade_args getEmptyArgsInstance() {
        return new clearNear5DaysTrade_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public clearNear5DaysTrade_result getResult(I iface, clearNear5DaysTrade_args args) throws org.apache.thrift.TException {
        clearNear5DaysTrade_result result = new clearNear5DaysTrade_result();
        result.success = iface.clearNear5DaysTrade(args.strategyId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryDays5Trade<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryDays5Trade_args> {
      public queryDays5Trade() {
        super("queryDays5Trade");
      }

      public queryDays5Trade_args getEmptyArgsInstance() {
        return new queryDays5Trade_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryDays5Trade_result getResult(I iface, queryDays5Trade_args args) throws org.apache.thrift.TException {
        queryDays5Trade_result result = new queryDays5Trade_result();
        result.success = iface.queryDays5Trade(args.strategyId, args.seq, args.num);
        return result;
      }
    }

    public static class searchStockResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchStockResult_args> {
      public searchStockResult() {
        super("searchStockResult");
      }

      public searchStockResult_args getEmptyArgsInstance() {
        return new searchStockResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchStockResult_result getResult(I iface, searchStockResult_args args) throws org.apache.thrift.TException {
        searchStockResult_result result = new searchStockResult_result();
        result.success = iface.searchStockResult(args.userId, args.strategyId, args.stockCode);
        return result;
      }
    }

    public static class getStrategyExtend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStrategyExtend_args> {
      public getStrategyExtend() {
        super("getStrategyExtend");
      }

      public getStrategyExtend_args getEmptyArgsInstance() {
        return new getStrategyExtend_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStrategyExtend_result getResult(I iface, getStrategyExtend_args args) throws org.apache.thrift.TException {
        getStrategyExtend_result result = new getStrategyExtend_result();
        result.success = iface.getStrategyExtend(args.strategyId);
        return result;
      }
    }

    public static class findUserFollowStock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserFollowStock_args> {
      public findUserFollowStock() {
        super("findUserFollowStock");
      }

      public findUserFollowStock_args getEmptyArgsInstance() {
        return new findUserFollowStock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findUserFollowStock_result getResult(I iface, findUserFollowStock_args args) throws org.apache.thrift.TException {
        findUserFollowStock_result result = new findUserFollowStock_result();
        result.success = iface.findUserFollowStock(args.userId, args.strategyId);
        return result;
      }
    }

    public static class searchStrategyBestStock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchStrategyBestStock_args> {
      public searchStrategyBestStock() {
        super("searchStrategyBestStock");
      }

      public searchStrategyBestStock_args getEmptyArgsInstance() {
        return new searchStrategyBestStock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchStrategyBestStock_result getResult(I iface, searchStrategyBestStock_args args) throws org.apache.thrift.TException {
        searchStrategyBestStock_result result = new searchStrategyBestStock_result();
        result.success = iface.searchStrategyBestStock();
        return result;
      }
    }

    public static class findReportData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findReportData_args> {
      public findReportData() {
        super("findReportData");
      }

      public findReportData_args getEmptyArgsInstance() {
        return new findReportData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findReportData_result getResult(I iface, findReportData_args args) throws org.apache.thrift.TException {
        findReportData_result result = new findReportData_result();
        result.success = iface.findReportData(args.day, args.lt, args.rt, args.num);
        return result;
      }
    }

    public static class findAllStrategyUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllStrategyUser_args> {
      public findAllStrategyUser() {
        super("findAllStrategyUser");
      }

      public findAllStrategyUser_args getEmptyArgsInstance() {
        return new findAllStrategyUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllStrategyUser_result getResult(I iface, findAllStrategyUser_args args) throws org.apache.thrift.TException {
        findAllStrategyUser_result result = new findAllStrategyUser_result();
        result.success = iface.findAllStrategyUser(args.time);
        return result;
      }
    }

    public static class incrDNALoopNum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, incrDNALoopNum_args> {
      public incrDNALoopNum() {
        super("incrDNALoopNum");
      }

      public incrDNALoopNum_args getEmptyArgsInstance() {
        return new incrDNALoopNum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public incrDNALoopNum_result getResult(I iface, incrDNALoopNum_args args) throws org.apache.thrift.TException {
        incrDNALoopNum_result result = new incrDNALoopNum_result();
        result.success = iface.incrDNALoopNum(args.userId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findDNALoopByUserId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findDNALoopByUserId_args> {
      public findDNALoopByUserId() {
        super("findDNALoopByUserId");
      }

      public findDNALoopByUserId_args getEmptyArgsInstance() {
        return new findDNALoopByUserId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findDNALoopByUserId_result getResult(I iface, findDNALoopByUserId_args args) throws org.apache.thrift.TException {
        findDNALoopByUserId_result result = new findDNALoopByUserId_result();
        result.success = iface.findDNALoopByUserId(args.userId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("saveStrategyBestStock", new saveStrategyBestStock());
      processMap.put("updateStrategyBestStock", new updateStrategyBestStock());
      processMap.put("queryStrategyBestStock", new queryStrategyBestStock());
      processMap.put("queryAllStrategyBestStock", new queryAllStrategyBestStock());
      processMap.put("queryAllStrategy", new queryAllStrategy());
      processMap.put("saveStrategyComment", new saveStrategyComment());
      processMap.put("deleteStrategyComment", new deleteStrategyComment());
      processMap.put("updateStrategyComment", new updateStrategyComment());
      processMap.put("getStrategyComment", new getStrategyComment());
      processMap.put("queryStrategyCommentByPage", new queryStrategyCommentByPage());
      processMap.put("findStrategyCommentList", new findStrategyCommentList());
      processMap.put("updateCommentStatus", new updateCommentStatus());
      processMap.put("saveStrategyScore", new saveStrategyScore());
      processMap.put("getStrategyScore", new getStrategyScore());
      processMap.put("saveStrategy", new saveStrategy());
      processMap.put("deleteStrategy", new deleteStrategy());
      processMap.put("updateStrategy", new updateStrategy());
      processMap.put("getStrategy", new getStrategy());
      processMap.put("queryStrategyByPage", new queryStrategyByPage());
      processMap.put("updateStrategyStatus", new updateStrategyStatus());
      processMap.put("saveStrategyUser", new saveStrategyUser());
      processMap.put("expandExpireTime", new expandExpireTime());
      processMap.put("getStrategyUser", new getStrategyUser());
      processMap.put("findStrategyByUserId", new findStrategyByUserId());
      processMap.put("queryStrategyUserByPage", new queryStrategyUserByPage());
      processMap.put("batchSaveStrategyUserStock", new batchSaveStrategyUserStock());
      processMap.put("findStockByStrategyAndUser", new findStockByStrategyAndUser());
      processMap.put("saveUserLoop", new saveUserLoop());
      processMap.put("deleteAllUserLoop", new deleteAllUserLoop());
      processMap.put("incrLoopNum", new incrLoopNum());
      processMap.put("incrFinishNum", new incrFinishNum());
      processMap.put("findUserLoopByUserId", new findUserLoopByUserId());
      processMap.put("batchInsertStrategyStockOneProfit", new batchInsertStrategyStockOneProfit());
      processMap.put("truncateStrategyStockOneProfit", new truncateStrategyStockOneProfit());
      processMap.put("queryStrategyStockOneProfit", new queryStrategyStockOneProfit());
      processMap.put("batchInsertStrategyStockThreeProfit", new batchInsertStrategyStockThreeProfit());
      processMap.put("truncateStrategyStockThreeProfit", new truncateStrategyStockThreeProfit());
      processMap.put("queryStrategyStockThreeProfit", new queryStrategyStockThreeProfit());
      processMap.put("findStrategyStockOneProfit", new findStrategyStockOneProfit());
      processMap.put("getOneYearAverageProfit", new getOneYearAverageProfit());
      processMap.put("getThreeYearAverageProfit", new getThreeYearAverageProfit());
      processMap.put("saveStrategyStockBlacklist", new saveStrategyStockBlacklist());
      processMap.put("getStrategyStockBlacklist", new getStrategyStockBlacklist());
      processMap.put("updateStockBlack", new updateStockBlack());
      processMap.put("sendTradeMq", new sendTradeMq());
      processMap.put("getPermissionNum", new getPermissionNum());
      processMap.put("addRecommendHotStock", new addRecommendHotStock());
      processMap.put("batchAddRecommendHotStock", new batchAddRecommendHotStock());
      processMap.put("delRecommendHotStock", new delRecommendHotStock());
      processMap.put("getRecommendHotStockList", new getRecommendHotStockList());
      processMap.put("queryStrategyReport", new queryStrategyReport());
      processMap.put("findStockByStrategyAndStock", new findStockByStrategyAndStock());
      processMap.put("delRecommendHotStockByType", new delRecommendHotStockByType());
      processMap.put("dredgeStrategyAuthByMq", new dredgeStrategyAuthByMq());
      processMap.put("findStrategyByCategoryId", new findStrategyByCategoryId());
      processMap.put("findAllRunStrategyId", new findAllRunStrategyId());
      processMap.put("getStrategyUserByUidSid", new getStrategyUserByUidSid());
      processMap.put("heartBeat", new heartBeat());
      processMap.put("disposeQuantStk", new disposeQuantStk());
      processMap.put("isExitsFile", new isExitsFile());
      processMap.put("clearStrategyData", new clearStrategyData());
      processMap.put("findAllValidRelation", new findAllValidRelation());
      processMap.put("findStrategyBuyUserCount", new findStrategyBuyUserCount());
      processMap.put("findStrategyUserLoopCount", new findStrategyUserLoopCount());
      processMap.put("queryStrategyBestStockListBySid", new queryStrategyBestStockListBySid());
      processMap.put("saveStrategyUserStock", new saveStrategyUserStock());
      processMap.put("deleteStrategyUserStock", new deleteStrategyUserStock());
      processMap.put("selectFollowNum", new selectFollowNum());
      processMap.put("queryTodayTrade", new queryTodayTrade());
      processMap.put("addTodayTrade", new addTodayTrade());
      processMap.put("clearTodayTrade", new clearTodayTrade());
      processMap.put("updateTodayBuy", new updateTodayBuy());
      processMap.put("addStockTradeNear5Days", new addStockTradeNear5Days());
      processMap.put("clearNear5DaysTrade", new clearNear5DaysTrade());
      processMap.put("queryDays5Trade", new queryDays5Trade());
      processMap.put("searchStockResult", new searchStockResult());
      processMap.put("getStrategyExtend", new getStrategyExtend());
      processMap.put("findUserFollowStock", new findUserFollowStock());
      processMap.put("searchStrategyBestStock", new searchStrategyBestStock());
      processMap.put("findReportData", new findReportData());
      processMap.put("findAllStrategyUser", new findAllStrategyUser());
      processMap.put("incrDNALoopNum", new incrDNALoopNum());
      processMap.put("findDNALoopByUserId", new findDNALoopByUserId());
      return processMap;
    }

    public static class saveStrategyBestStock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveStrategyBestStock_args, Integer> {
      public saveStrategyBestStock() {
        super("saveStrategyBestStock");
      }

      public saveStrategyBestStock_args getEmptyArgsInstance() {
        return new saveStrategyBestStock_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveStrategyBestStock_result result = new saveStrategyBestStock_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveStrategyBestStock_result result = new saveStrategyBestStock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveStrategyBestStock_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveStrategyBestStock(args.stockList,resultHandler);
      }
    }

    public static class updateStrategyBestStock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateStrategyBestStock_args, Integer> {
      public updateStrategyBestStock() {
        super("updateStrategyBestStock");
      }

      public updateStrategyBestStock_args getEmptyArgsInstance() {
        return new updateStrategyBestStock_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateStrategyBestStock_result result = new updateStrategyBestStock_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateStrategyBestStock_result result = new updateStrategyBestStock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateStrategyBestStock_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateStrategyBestStock(args.stockList,resultHandler);
      }
    }

    public static class queryStrategyBestStock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryStrategyBestStock_args, String> {
      public queryStrategyBestStock() {
        super("queryStrategyBestStock");
      }

      public queryStrategyBestStock_args getEmptyArgsInstance() {
        return new queryStrategyBestStock_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryStrategyBestStock_result result = new queryStrategyBestStock_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryStrategyBestStock_result result = new queryStrategyBestStock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryStrategyBestStock_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryStrategyBestStock(args.num,resultHandler);
      }
    }

    public static class queryAllStrategyBestStock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryAllStrategyBestStock_args, String> {
      public queryAllStrategyBestStock() {
        super("queryAllStrategyBestStock");
      }

      public queryAllStrategyBestStock_args getEmptyArgsInstance() {
        return new queryAllStrategyBestStock_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryAllStrategyBestStock_result result = new queryAllStrategyBestStock_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryAllStrategyBestStock_result result = new queryAllStrategyBestStock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryAllStrategyBestStock_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryAllStrategyBestStock(args.strategyId,resultHandler);
      }
    }

    public static class queryAllStrategy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryAllStrategy_args, String> {
      public queryAllStrategy() {
        super("queryAllStrategy");
      }

      public queryAllStrategy_args getEmptyArgsInstance() {
        return new queryAllStrategy_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryAllStrategy_result result = new queryAllStrategy_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryAllStrategy_result result = new queryAllStrategy_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryAllStrategy_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryAllStrategy(args.userId,resultHandler);
      }
    }

    public static class saveStrategyComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveStrategyComment_args, Integer> {
      public saveStrategyComment() {
        super("saveStrategyComment");
      }

      public saveStrategyComment_args getEmptyArgsInstance() {
        return new saveStrategyComment_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveStrategyComment_result result = new saveStrategyComment_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveStrategyComment_result result = new saveStrategyComment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveStrategyComment_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveStrategyComment(args.strategy,resultHandler);
      }
    }

    public static class deleteStrategyComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteStrategyComment_args, Integer> {
      public deleteStrategyComment() {
        super("deleteStrategyComment");
      }

      public deleteStrategyComment_args getEmptyArgsInstance() {
        return new deleteStrategyComment_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteStrategyComment_result result = new deleteStrategyComment_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteStrategyComment_result result = new deleteStrategyComment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteStrategyComment_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteStrategyComment(args.id,resultHandler);
      }
    }

    public static class updateStrategyComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateStrategyComment_args, Integer> {
      public updateStrategyComment() {
        super("updateStrategyComment");
      }

      public updateStrategyComment_args getEmptyArgsInstance() {
        return new updateStrategyComment_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateStrategyComment_result result = new updateStrategyComment_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateStrategyComment_result result = new updateStrategyComment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateStrategyComment_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateStrategyComment(args.strategy,resultHandler);
      }
    }

    public static class getStrategyComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStrategyComment_args, String> {
      public getStrategyComment() {
        super("getStrategyComment");
      }

      public getStrategyComment_args getEmptyArgsInstance() {
        return new getStrategyComment_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getStrategyComment_result result = new getStrategyComment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStrategyComment_result result = new getStrategyComment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStrategyComment_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getStrategyComment(args.id,resultHandler);
      }
    }

    public static class queryStrategyCommentByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryStrategyCommentByPage_args, String> {
      public queryStrategyCommentByPage() {
        super("queryStrategyCommentByPage");
      }

      public queryStrategyCommentByPage_args getEmptyArgsInstance() {
        return new queryStrategyCommentByPage_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryStrategyCommentByPage_result result = new queryStrategyCommentByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryStrategyCommentByPage_result result = new queryStrategyCommentByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryStrategyCommentByPage_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryStrategyCommentByPage(args.strategyId, args.userId, args.pageIndex, args.pageSize,resultHandler);
      }
    }

    public static class findStrategyCommentList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findStrategyCommentList_args, String> {
      public findStrategyCommentList() {
        super("findStrategyCommentList");
      }

      public findStrategyCommentList_args getEmptyArgsInstance() {
        return new findStrategyCommentList_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            findStrategyCommentList_result result = new findStrategyCommentList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findStrategyCommentList_result result = new findStrategyCommentList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findStrategyCommentList_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.findStrategyCommentList(args.strategyId, args.pageIndex, args.pageSize,resultHandler);
      }
    }

    public static class updateCommentStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCommentStatus_args, Integer> {
      public updateCommentStatus() {
        super("updateCommentStatus");
      }

      public updateCommentStatus_args getEmptyArgsInstance() {
        return new updateCommentStatus_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateCommentStatus_result result = new updateCommentStatus_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateCommentStatus_result result = new updateCommentStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCommentStatus_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateCommentStatus(args.id, args.status,resultHandler);
      }
    }

    public static class saveStrategyScore<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveStrategyScore_args, Integer> {
      public saveStrategyScore() {
        super("saveStrategyScore");
      }

      public saveStrategyScore_args getEmptyArgsInstance() {
        return new saveStrategyScore_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveStrategyScore_result result = new saveStrategyScore_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveStrategyScore_result result = new saveStrategyScore_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveStrategyScore_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveStrategyScore(args.strategyScore,resultHandler);
      }
    }

    public static class getStrategyScore<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStrategyScore_args, String> {
      public getStrategyScore() {
        super("getStrategyScore");
      }

      public getStrategyScore_args getEmptyArgsInstance() {
        return new getStrategyScore_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getStrategyScore_result result = new getStrategyScore_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStrategyScore_result result = new getStrategyScore_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStrategyScore_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getStrategyScore(args.strategyId,resultHandler);
      }
    }

    public static class saveStrategy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveStrategy_args, Integer> {
      public saveStrategy() {
        super("saveStrategy");
      }

      public saveStrategy_args getEmptyArgsInstance() {
        return new saveStrategy_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveStrategy_result result = new saveStrategy_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveStrategy_result result = new saveStrategy_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveStrategy_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveStrategy(args.strategy,resultHandler);
      }
    }

    public static class deleteStrategy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteStrategy_args, Integer> {
      public deleteStrategy() {
        super("deleteStrategy");
      }

      public deleteStrategy_args getEmptyArgsInstance() {
        return new deleteStrategy_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteStrategy_result result = new deleteStrategy_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteStrategy_result result = new deleteStrategy_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteStrategy_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteStrategy(args.id,resultHandler);
      }
    }

    public static class updateStrategy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateStrategy_args, Integer> {
      public updateStrategy() {
        super("updateStrategy");
      }

      public updateStrategy_args getEmptyArgsInstance() {
        return new updateStrategy_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateStrategy_result result = new updateStrategy_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateStrategy_result result = new updateStrategy_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateStrategy_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateStrategy(args.strategy,resultHandler);
      }
    }

    public static class getStrategy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStrategy_args, String> {
      public getStrategy() {
        super("getStrategy");
      }

      public getStrategy_args getEmptyArgsInstance() {
        return new getStrategy_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getStrategy_result result = new getStrategy_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStrategy_result result = new getStrategy_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStrategy_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getStrategy(args.id,resultHandler);
      }
    }

    public static class queryStrategyByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryStrategyByPage_args, String> {
      public queryStrategyByPage() {
        super("queryStrategyByPage");
      }

      public queryStrategyByPage_args getEmptyArgsInstance() {
        return new queryStrategyByPage_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryStrategyByPage_result result = new queryStrategyByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryStrategyByPage_result result = new queryStrategyByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryStrategyByPage_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryStrategyByPage(args.id, args.type, args.displayStatus, args.runStatus, args.pageIndex, args.pageSize,resultHandler);
      }
    }

    public static class updateStrategyStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateStrategyStatus_args, Integer> {
      public updateStrategyStatus() {
        super("updateStrategyStatus");
      }

      public updateStrategyStatus_args getEmptyArgsInstance() {
        return new updateStrategyStatus_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateStrategyStatus_result result = new updateStrategyStatus_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateStrategyStatus_result result = new updateStrategyStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateStrategyStatus_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateStrategyStatus(args.id, args.status,resultHandler);
      }
    }

    public static class saveStrategyUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveStrategyUser_args, Integer> {
      public saveStrategyUser() {
        super("saveStrategyUser");
      }

      public saveStrategyUser_args getEmptyArgsInstance() {
        return new saveStrategyUser_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveStrategyUser_result result = new saveStrategyUser_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveStrategyUser_result result = new saveStrategyUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveStrategyUser_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveStrategyUser(args.strategy,resultHandler);
      }
    }

    public static class expandExpireTime<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, expandExpireTime_args, Integer> {
      public expandExpireTime() {
        super("expandExpireTime");
      }

      public expandExpireTime_args getEmptyArgsInstance() {
        return new expandExpireTime_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            expandExpireTime_result result = new expandExpireTime_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            expandExpireTime_result result = new expandExpireTime_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, expandExpireTime_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.expandExpireTime(args.userId, args.strategyId, args.days, args.payType, args.price,resultHandler);
      }
    }

    public static class getStrategyUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStrategyUser_args, String> {
      public getStrategyUser() {
        super("getStrategyUser");
      }

      public getStrategyUser_args getEmptyArgsInstance() {
        return new getStrategyUser_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getStrategyUser_result result = new getStrategyUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStrategyUser_result result = new getStrategyUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStrategyUser_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getStrategyUser(args.id,resultHandler);
      }
    }

    public static class findStrategyByUserId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findStrategyByUserId_args, String> {
      public findStrategyByUserId() {
        super("findStrategyByUserId");
      }

      public findStrategyByUserId_args getEmptyArgsInstance() {
        return new findStrategyByUserId_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            findStrategyByUserId_result result = new findStrategyByUserId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findStrategyByUserId_result result = new findStrategyByUserId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findStrategyByUserId_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.findStrategyByUserId(args.userId, args.expire,resultHandler);
      }
    }

    public static class queryStrategyUserByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryStrategyUserByPage_args, String> {
      public queryStrategyUserByPage() {
        super("queryStrategyUserByPage");
      }

      public queryStrategyUserByPage_args getEmptyArgsInstance() {
        return new queryStrategyUserByPage_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryStrategyUserByPage_result result = new queryStrategyUserByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryStrategyUserByPage_result result = new queryStrategyUserByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryStrategyUserByPage_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryStrategyUserByPage(args.userId, args.strategyId, args.pageIndex, args.pageSize,resultHandler);
      }
    }

    public static class batchSaveStrategyUserStock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchSaveStrategyUserStock_args, Integer> {
      public batchSaveStrategyUserStock() {
        super("batchSaveStrategyUserStock");
      }

      public batchSaveStrategyUserStock_args getEmptyArgsInstance() {
        return new batchSaveStrategyUserStock_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            batchSaveStrategyUserStock_result result = new batchSaveStrategyUserStock_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchSaveStrategyUserStock_result result = new batchSaveStrategyUserStock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchSaveStrategyUserStock_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.batchSaveStrategyUserStock(args.userId, args.strategyId, args.relationList,resultHandler);
      }
    }

    public static class findStockByStrategyAndUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findStockByStrategyAndUser_args, String> {
      public findStockByStrategyAndUser() {
        super("findStockByStrategyAndUser");
      }

      public findStockByStrategyAndUser_args getEmptyArgsInstance() {
        return new findStockByStrategyAndUser_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            findStockByStrategyAndUser_result result = new findStockByStrategyAndUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findStockByStrategyAndUser_result result = new findStockByStrategyAndUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findStockByStrategyAndUser_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.findStockByStrategyAndUser(args.userId, args.strategyId,resultHandler);
      }
    }

    public static class saveUserLoop<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveUserLoop_args, Integer> {
      public saveUserLoop() {
        super("saveUserLoop");
      }

      public saveUserLoop_args getEmptyArgsInstance() {
        return new saveUserLoop_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveUserLoop_result result = new saveUserLoop_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveUserLoop_result result = new saveUserLoop_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveUserLoop_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveUserLoop(args.userId,resultHandler);
      }
    }

    public static class deleteAllUserLoop<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteAllUserLoop_args, Integer> {
      public deleteAllUserLoop() {
        super("deleteAllUserLoop");
      }

      public deleteAllUserLoop_args getEmptyArgsInstance() {
        return new deleteAllUserLoop_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteAllUserLoop_result result = new deleteAllUserLoop_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteAllUserLoop_result result = new deleteAllUserLoop_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteAllUserLoop_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteAllUserLoop(resultHandler);
      }
    }

    public static class incrLoopNum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, incrLoopNum_args, Integer> {
      public incrLoopNum() {
        super("incrLoopNum");
      }

      public incrLoopNum_args getEmptyArgsInstance() {
        return new incrLoopNum_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            incrLoopNum_result result = new incrLoopNum_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            incrLoopNum_result result = new incrLoopNum_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, incrLoopNum_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.incrLoopNum(args.userId,resultHandler);
      }
    }

    public static class incrFinishNum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, incrFinishNum_args, Integer> {
      public incrFinishNum() {
        super("incrFinishNum");
      }

      public incrFinishNum_args getEmptyArgsInstance() {
        return new incrFinishNum_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            incrFinishNum_result result = new incrFinishNum_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            incrFinishNum_result result = new incrFinishNum_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, incrFinishNum_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.incrFinishNum(args.userId, args.strategyId, args.stocks,resultHandler);
      }
    }

    public static class findUserLoopByUserId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUserLoopByUserId_args, String> {
      public findUserLoopByUserId() {
        super("findUserLoopByUserId");
      }

      public findUserLoopByUserId_args getEmptyArgsInstance() {
        return new findUserLoopByUserId_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            findUserLoopByUserId_result result = new findUserLoopByUserId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findUserLoopByUserId_result result = new findUserLoopByUserId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUserLoopByUserId_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.findUserLoopByUserId(args.userId,resultHandler);
      }
    }

    public static class batchInsertStrategyStockOneProfit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchInsertStrategyStockOneProfit_args, Integer> {
      public batchInsertStrategyStockOneProfit() {
        super("batchInsertStrategyStockOneProfit");
      }

      public batchInsertStrategyStockOneProfit_args getEmptyArgsInstance() {
        return new batchInsertStrategyStockOneProfit_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            batchInsertStrategyStockOneProfit_result result = new batchInsertStrategyStockOneProfit_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchInsertStrategyStockOneProfit_result result = new batchInsertStrategyStockOneProfit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchInsertStrategyStockOneProfit_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.batchInsertStrategyStockOneProfit(args.thriftList,resultHandler);
      }
    }

    public static class truncateStrategyStockOneProfit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, truncateStrategyStockOneProfit_args, Integer> {
      public truncateStrategyStockOneProfit() {
        super("truncateStrategyStockOneProfit");
      }

      public truncateStrategyStockOneProfit_args getEmptyArgsInstance() {
        return new truncateStrategyStockOneProfit_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            truncateStrategyStockOneProfit_result result = new truncateStrategyStockOneProfit_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            truncateStrategyStockOneProfit_result result = new truncateStrategyStockOneProfit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, truncateStrategyStockOneProfit_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.truncateStrategyStockOneProfit(args.strategyId,resultHandler);
      }
    }

    public static class queryStrategyStockOneProfit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryStrategyStockOneProfit_args, String> {
      public queryStrategyStockOneProfit() {
        super("queryStrategyStockOneProfit");
      }

      public queryStrategyStockOneProfit_args getEmptyArgsInstance() {
        return new queryStrategyStockOneProfit_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryStrategyStockOneProfit_result result = new queryStrategyStockOneProfit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryStrategyStockOneProfit_result result = new queryStrategyStockOneProfit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryStrategyStockOneProfit_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryStrategyStockOneProfit(args.strategyId, args.stocks,resultHandler);
      }
    }

    public static class batchInsertStrategyStockThreeProfit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchInsertStrategyStockThreeProfit_args, Integer> {
      public batchInsertStrategyStockThreeProfit() {
        super("batchInsertStrategyStockThreeProfit");
      }

      public batchInsertStrategyStockThreeProfit_args getEmptyArgsInstance() {
        return new batchInsertStrategyStockThreeProfit_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            batchInsertStrategyStockThreeProfit_result result = new batchInsertStrategyStockThreeProfit_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchInsertStrategyStockThreeProfit_result result = new batchInsertStrategyStockThreeProfit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchInsertStrategyStockThreeProfit_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.batchInsertStrategyStockThreeProfit(args.thriftList,resultHandler);
      }
    }

    public static class truncateStrategyStockThreeProfit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, truncateStrategyStockThreeProfit_args, Integer> {
      public truncateStrategyStockThreeProfit() {
        super("truncateStrategyStockThreeProfit");
      }

      public truncateStrategyStockThreeProfit_args getEmptyArgsInstance() {
        return new truncateStrategyStockThreeProfit_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            truncateStrategyStockThreeProfit_result result = new truncateStrategyStockThreeProfit_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            truncateStrategyStockThreeProfit_result result = new truncateStrategyStockThreeProfit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, truncateStrategyStockThreeProfit_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.truncateStrategyStockThreeProfit(args.strategyId,resultHandler);
      }
    }

    public static class queryStrategyStockThreeProfit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryStrategyStockThreeProfit_args, String> {
      public queryStrategyStockThreeProfit() {
        super("queryStrategyStockThreeProfit");
      }

      public queryStrategyStockThreeProfit_args getEmptyArgsInstance() {
        return new queryStrategyStockThreeProfit_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryStrategyStockThreeProfit_result result = new queryStrategyStockThreeProfit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryStrategyStockThreeProfit_result result = new queryStrategyStockThreeProfit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryStrategyStockThreeProfit_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryStrategyStockThreeProfit(args.strategyId, args.stocks,resultHandler);
      }
    }

    public static class findStrategyStockOneProfit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findStrategyStockOneProfit_args, String> {
      public findStrategyStockOneProfit() {
        super("findStrategyStockOneProfit");
      }

      public findStrategyStockOneProfit_args getEmptyArgsInstance() {
        return new findStrategyStockOneProfit_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            findStrategyStockOneProfit_result result = new findStrategyStockOneProfit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findStrategyStockOneProfit_result result = new findStrategyStockOneProfit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findStrategyStockOneProfit_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.findStrategyStockOneProfit(args.strategyId, args.stockCode,resultHandler);
      }
    }

    public static class getOneYearAverageProfit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOneYearAverageProfit_args, String> {
      public getOneYearAverageProfit() {
        super("getOneYearAverageProfit");
      }

      public getOneYearAverageProfit_args getEmptyArgsInstance() {
        return new getOneYearAverageProfit_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getOneYearAverageProfit_result result = new getOneYearAverageProfit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOneYearAverageProfit_result result = new getOneYearAverageProfit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOneYearAverageProfit_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getOneYearAverageProfit(args.strategyId, args.stocks,resultHandler);
      }
    }

    public static class getThreeYearAverageProfit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getThreeYearAverageProfit_args, String> {
      public getThreeYearAverageProfit() {
        super("getThreeYearAverageProfit");
      }

      public getThreeYearAverageProfit_args getEmptyArgsInstance() {
        return new getThreeYearAverageProfit_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getThreeYearAverageProfit_result result = new getThreeYearAverageProfit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getThreeYearAverageProfit_result result = new getThreeYearAverageProfit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getThreeYearAverageProfit_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getThreeYearAverageProfit(args.strategyId, args.stocks,resultHandler);
      }
    }

    public static class saveStrategyStockBlacklist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveStrategyStockBlacklist_args, Integer> {
      public saveStrategyStockBlacklist() {
        super("saveStrategyStockBlacklist");
      }

      public saveStrategyStockBlacklist_args getEmptyArgsInstance() {
        return new saveStrategyStockBlacklist_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveStrategyStockBlacklist_result result = new saveStrategyStockBlacklist_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveStrategyStockBlacklist_result result = new saveStrategyStockBlacklist_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveStrategyStockBlacklist_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveStrategyStockBlacklist(args.ssb,resultHandler);
      }
    }

    public static class getStrategyStockBlacklist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStrategyStockBlacklist_args, String> {
      public getStrategyStockBlacklist() {
        super("getStrategyStockBlacklist");
      }

      public getStrategyStockBlacklist_args getEmptyArgsInstance() {
        return new getStrategyStockBlacklist_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getStrategyStockBlacklist_result result = new getStrategyStockBlacklist_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStrategyStockBlacklist_result result = new getStrategyStockBlacklist_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStrategyStockBlacklist_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getStrategyStockBlacklist(args.strategyId,resultHandler);
      }
    }

    public static class updateStockBlack<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateStockBlack_args, Integer> {
      public updateStockBlack() {
        super("updateStockBlack");
      }

      public updateStockBlack_args getEmptyArgsInstance() {
        return new updateStockBlack_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateStockBlack_result result = new updateStockBlack_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateStockBlack_result result = new updateStockBlack_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateStockBlack_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateStockBlack(args.id, args.stockCodes,resultHandler);
      }
    }

    public static class sendTradeMq<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendTradeMq_args, Integer> {
      public sendTradeMq() {
        super("sendTradeMq");
      }

      public sendTradeMq_args getEmptyArgsInstance() {
        return new sendTradeMq_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            sendTradeMq_result result = new sendTradeMq_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendTradeMq_result result = new sendTradeMq_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendTradeMq_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.sendTradeMq(args.type, args.json,resultHandler);
      }
    }

    public static class getPermissionNum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPermissionNum_args, String> {
      public getPermissionNum() {
        super("getPermissionNum");
      }

      public getPermissionNum_args getEmptyArgsInstance() {
        return new getPermissionNum_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getPermissionNum_result result = new getPermissionNum_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPermissionNum_result result = new getPermissionNum_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPermissionNum_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getPermissionNum(args.userId, args.strategyId,resultHandler);
      }
    }

    public static class addRecommendHotStock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addRecommendHotStock_args, Integer> {
      public addRecommendHotStock() {
        super("addRecommendHotStock");
      }

      public addRecommendHotStock_args getEmptyArgsInstance() {
        return new addRecommendHotStock_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addRecommendHotStock_result result = new addRecommendHotStock_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addRecommendHotStock_result result = new addRecommendHotStock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addRecommendHotStock_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addRecommendHotStock(args.recommendHotStock,resultHandler);
      }
    }

    public static class batchAddRecommendHotStock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchAddRecommendHotStock_args, Integer> {
      public batchAddRecommendHotStock() {
        super("batchAddRecommendHotStock");
      }

      public batchAddRecommendHotStock_args getEmptyArgsInstance() {
        return new batchAddRecommendHotStock_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            batchAddRecommendHotStock_result result = new batchAddRecommendHotStock_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchAddRecommendHotStock_result result = new batchAddRecommendHotStock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchAddRecommendHotStock_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.batchAddRecommendHotStock(args.recommendHotStockList,resultHandler);
      }
    }

    public static class delRecommendHotStock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delRecommendHotStock_args, Integer> {
      public delRecommendHotStock() {
        super("delRecommendHotStock");
      }

      public delRecommendHotStock_args getEmptyArgsInstance() {
        return new delRecommendHotStock_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delRecommendHotStock_result result = new delRecommendHotStock_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delRecommendHotStock_result result = new delRecommendHotStock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delRecommendHotStock_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delRecommendHotStock(args.strategyId,resultHandler);
      }
    }

    public static class getRecommendHotStockList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecommendHotStockList_args, String> {
      public getRecommendHotStockList() {
        super("getRecommendHotStockList");
      }

      public getRecommendHotStockList_args getEmptyArgsInstance() {
        return new getRecommendHotStockList_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getRecommendHotStockList_result result = new getRecommendHotStockList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRecommendHotStockList_result result = new getRecommendHotStockList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRecommendHotStockList_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getRecommendHotStockList(args.strategyId, args.type,resultHandler);
      }
    }

    public static class queryStrategyReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryStrategyReport_args, String> {
      public queryStrategyReport() {
        super("queryStrategyReport");
      }

      public queryStrategyReport_args getEmptyArgsInstance() {
        return new queryStrategyReport_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryStrategyReport_result result = new queryStrategyReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryStrategyReport_result result = new queryStrategyReport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryStrategyReport_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryStrategyReport(args.strategyId, args.stocks, args.userId,resultHandler);
      }
    }

    public static class findStockByStrategyAndStock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findStockByStrategyAndStock_args, String> {
      public findStockByStrategyAndStock() {
        super("findStockByStrategyAndStock");
      }

      public findStockByStrategyAndStock_args getEmptyArgsInstance() {
        return new findStockByStrategyAndStock_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            findStockByStrategyAndStock_result result = new findStockByStrategyAndStock_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findStockByStrategyAndStock_result result = new findStockByStrategyAndStock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findStockByStrategyAndStock_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.findStockByStrategyAndStock(args.strategyId, args.stockCode,resultHandler);
      }
    }

    public static class delRecommendHotStockByType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delRecommendHotStockByType_args, Integer> {
      public delRecommendHotStockByType() {
        super("delRecommendHotStockByType");
      }

      public delRecommendHotStockByType_args getEmptyArgsInstance() {
        return new delRecommendHotStockByType_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delRecommendHotStockByType_result result = new delRecommendHotStockByType_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delRecommendHotStockByType_result result = new delRecommendHotStockByType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delRecommendHotStockByType_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delRecommendHotStockByType(args.type, args.strategyId,resultHandler);
      }
    }

    public static class dredgeStrategyAuthByMq<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dredgeStrategyAuthByMq_args, Integer> {
      public dredgeStrategyAuthByMq() {
        super("dredgeStrategyAuthByMq");
      }

      public dredgeStrategyAuthByMq_args getEmptyArgsInstance() {
        return new dredgeStrategyAuthByMq_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            dredgeStrategyAuthByMq_result result = new dredgeStrategyAuthByMq_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dredgeStrategyAuthByMq_result result = new dredgeStrategyAuthByMq_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dredgeStrategyAuthByMq_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.dredgeStrategyAuthByMq(args.userId, args.strategyId, args.day, args.payType, args.price,resultHandler);
      }
    }

    public static class findStrategyByCategoryId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findStrategyByCategoryId_args, String> {
      public findStrategyByCategoryId() {
        super("findStrategyByCategoryId");
      }

      public findStrategyByCategoryId_args getEmptyArgsInstance() {
        return new findStrategyByCategoryId_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            findStrategyByCategoryId_result result = new findStrategyByCategoryId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findStrategyByCategoryId_result result = new findStrategyByCategoryId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findStrategyByCategoryId_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.findStrategyByCategoryId(args.categoryId,resultHandler);
      }
    }

    public static class findAllRunStrategyId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllRunStrategyId_args, String> {
      public findAllRunStrategyId() {
        super("findAllRunStrategyId");
      }

      public findAllRunStrategyId_args getEmptyArgsInstance() {
        return new findAllRunStrategyId_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            findAllRunStrategyId_result result = new findAllRunStrategyId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllRunStrategyId_result result = new findAllRunStrategyId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllRunStrategyId_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.findAllRunStrategyId(resultHandler);
      }
    }

    public static class getStrategyUserByUidSid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStrategyUserByUidSid_args, String> {
      public getStrategyUserByUidSid() {
        super("getStrategyUserByUidSid");
      }

      public getStrategyUserByUidSid_args getEmptyArgsInstance() {
        return new getStrategyUserByUidSid_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getStrategyUserByUidSid_result result = new getStrategyUserByUidSid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStrategyUserByUidSid_result result = new getStrategyUserByUidSid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStrategyUserByUidSid_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getStrategyUserByUidSid(args.userId, args.strategyId,resultHandler);
      }
    }

    public static class heartBeat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, heartBeat_args, Integer> {
      public heartBeat() {
        super("heartBeat");
      }

      public heartBeat_args getEmptyArgsInstance() {
        return new heartBeat_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            heartBeat_result result = new heartBeat_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            heartBeat_result result = new heartBeat_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, heartBeat_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.heartBeat(resultHandler);
      }
    }

    public static class disposeQuantStk<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, disposeQuantStk_args, String> {
      public disposeQuantStk() {
        super("disposeQuantStk");
      }

      public disposeQuantStk_args getEmptyArgsInstance() {
        return new disposeQuantStk_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            disposeQuantStk_result result = new disposeQuantStk_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            disposeQuantStk_result result = new disposeQuantStk_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, disposeQuantStk_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.disposeQuantStk(args.strategyId, args.time,resultHandler);
      }
    }

    public static class isExitsFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isExitsFile_args, Boolean> {
      public isExitsFile() {
        super("isExitsFile");
      }

      public isExitsFile_args getEmptyArgsInstance() {
        return new isExitsFile_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isExitsFile_result result = new isExitsFile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isExitsFile_result result = new isExitsFile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isExitsFile_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isExitsFile(args.strategyId,resultHandler);
      }
    }

    public static class clearStrategyData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, clearStrategyData_args, Boolean> {
      public clearStrategyData() {
        super("clearStrategyData");
      }

      public clearStrategyData_args getEmptyArgsInstance() {
        return new clearStrategyData_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            clearStrategyData_result result = new clearStrategyData_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            clearStrategyData_result result = new clearStrategyData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, clearStrategyData_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.clearStrategyData(args.strategyId,resultHandler);
      }
    }

    public static class findAllValidRelation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllValidRelation_args, String> {
      public findAllValidRelation() {
        super("findAllValidRelation");
      }

      public findAllValidRelation_args getEmptyArgsInstance() {
        return new findAllValidRelation_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            findAllValidRelation_result result = new findAllValidRelation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllValidRelation_result result = new findAllValidRelation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllValidRelation_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.findAllValidRelation(resultHandler);
      }
    }

    public static class findStrategyBuyUserCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findStrategyBuyUserCount_args, String> {
      public findStrategyBuyUserCount() {
        super("findStrategyBuyUserCount");
      }

      public findStrategyBuyUserCount_args getEmptyArgsInstance() {
        return new findStrategyBuyUserCount_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            findStrategyBuyUserCount_result result = new findStrategyBuyUserCount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findStrategyBuyUserCount_result result = new findStrategyBuyUserCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findStrategyBuyUserCount_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.findStrategyBuyUserCount(args.time,resultHandler);
      }
    }

    public static class findStrategyUserLoopCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findStrategyUserLoopCount_args, String> {
      public findStrategyUserLoopCount() {
        super("findStrategyUserLoopCount");
      }

      public findStrategyUserLoopCount_args getEmptyArgsInstance() {
        return new findStrategyUserLoopCount_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            findStrategyUserLoopCount_result result = new findStrategyUserLoopCount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findStrategyUserLoopCount_result result = new findStrategyUserLoopCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findStrategyUserLoopCount_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.findStrategyUserLoopCount(args.time,resultHandler);
      }
    }

    public static class queryStrategyBestStockListBySid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryStrategyBestStockListBySid_args, String> {
      public queryStrategyBestStockListBySid() {
        super("queryStrategyBestStockListBySid");
      }

      public queryStrategyBestStockListBySid_args getEmptyArgsInstance() {
        return new queryStrategyBestStockListBySid_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryStrategyBestStockListBySid_result result = new queryStrategyBestStockListBySid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryStrategyBestStockListBySid_result result = new queryStrategyBestStockListBySid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryStrategyBestStockListBySid_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryStrategyBestStockListBySid(args.sid, args.limit,resultHandler);
      }
    }

    public static class saveStrategyUserStock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveStrategyUserStock_args, Integer> {
      public saveStrategyUserStock() {
        super("saveStrategyUserStock");
      }

      public saveStrategyUserStock_args getEmptyArgsInstance() {
        return new saveStrategyUserStock_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveStrategyUserStock_result result = new saveStrategyUserStock_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveStrategyUserStock_result result = new saveStrategyUserStock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveStrategyUserStock_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveStrategyUserStock(args.userId, args.strategyId, args.stockCode,resultHandler);
      }
    }

    public static class deleteStrategyUserStock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteStrategyUserStock_args, Integer> {
      public deleteStrategyUserStock() {
        super("deleteStrategyUserStock");
      }

      public deleteStrategyUserStock_args getEmptyArgsInstance() {
        return new deleteStrategyUserStock_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteStrategyUserStock_result result = new deleteStrategyUserStock_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteStrategyUserStock_result result = new deleteStrategyUserStock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteStrategyUserStock_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteStrategyUserStock(args.userId, args.strategyId, args.stockCode,resultHandler);
      }
    }

    public static class selectFollowNum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectFollowNum_args, Integer> {
      public selectFollowNum() {
        super("selectFollowNum");
      }

      public selectFollowNum_args getEmptyArgsInstance() {
        return new selectFollowNum_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            selectFollowNum_result result = new selectFollowNum_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            selectFollowNum_result result = new selectFollowNum_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, selectFollowNum_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.selectFollowNum(args.userId, args.strategyId,resultHandler);
      }
    }

    public static class queryTodayTrade<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryTodayTrade_args, String> {
      public queryTodayTrade() {
        super("queryTodayTrade");
      }

      public queryTodayTrade_args getEmptyArgsInstance() {
        return new queryTodayTrade_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryTodayTrade_result result = new queryTodayTrade_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryTodayTrade_result result = new queryTodayTrade_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryTodayTrade_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryTodayTrade(args.strategyId, args.type, args.seq, args.num,resultHandler);
      }
    }

    public static class addTodayTrade<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addTodayTrade_args, Integer> {
      public addTodayTrade() {
        super("addTodayTrade");
      }

      public addTodayTrade_args getEmptyArgsInstance() {
        return new addTodayTrade_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addTodayTrade_result result = new addTodayTrade_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addTodayTrade_result result = new addTodayTrade_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addTodayTrade_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addTodayTrade(args.strategyId, args.stockTradeToday,resultHandler);
      }
    }

    public static class clearTodayTrade<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, clearTodayTrade_args, Integer> {
      public clearTodayTrade() {
        super("clearTodayTrade");
      }

      public clearTodayTrade_args getEmptyArgsInstance() {
        return new clearTodayTrade_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            clearTodayTrade_result result = new clearTodayTrade_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            clearTodayTrade_result result = new clearTodayTrade_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, clearTodayTrade_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.clearTodayTrade(args.strategyId, args.positionNum,resultHandler);
      }
    }

    public static class updateTodayBuy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateTodayBuy_args, Integer> {
      public updateTodayBuy() {
        super("updateTodayBuy");
      }

      public updateTodayBuy_args getEmptyArgsInstance() {
        return new updateTodayBuy_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateTodayBuy_result result = new updateTodayBuy_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateTodayBuy_result result = new updateTodayBuy_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateTodayBuy_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateTodayBuy(args.strategyId, args.stockTradeTodayList,resultHandler);
      }
    }

    public static class addStockTradeNear5Days<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addStockTradeNear5Days_args, Integer> {
      public addStockTradeNear5Days() {
        super("addStockTradeNear5Days");
      }

      public addStockTradeNear5Days_args getEmptyArgsInstance() {
        return new addStockTradeNear5Days_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addStockTradeNear5Days_result result = new addStockTradeNear5Days_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addStockTradeNear5Days_result result = new addStockTradeNear5Days_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addStockTradeNear5Days_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addStockTradeNear5Days(args.strategyId, args.stockTradeNear5DaysList,resultHandler);
      }
    }

    public static class clearNear5DaysTrade<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, clearNear5DaysTrade_args, Integer> {
      public clearNear5DaysTrade() {
        super("clearNear5DaysTrade");
      }

      public clearNear5DaysTrade_args getEmptyArgsInstance() {
        return new clearNear5DaysTrade_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            clearNear5DaysTrade_result result = new clearNear5DaysTrade_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            clearNear5DaysTrade_result result = new clearNear5DaysTrade_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, clearNear5DaysTrade_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.clearNear5DaysTrade(args.strategyId,resultHandler);
      }
    }

    public static class queryDays5Trade<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryDays5Trade_args, String> {
      public queryDays5Trade() {
        super("queryDays5Trade");
      }

      public queryDays5Trade_args getEmptyArgsInstance() {
        return new queryDays5Trade_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryDays5Trade_result result = new queryDays5Trade_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryDays5Trade_result result = new queryDays5Trade_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryDays5Trade_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryDays5Trade(args.strategyId, args.seq, args.num,resultHandler);
      }
    }

    public static class searchStockResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchStockResult_args, String> {
      public searchStockResult() {
        super("searchStockResult");
      }

      public searchStockResult_args getEmptyArgsInstance() {
        return new searchStockResult_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            searchStockResult_result result = new searchStockResult_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            searchStockResult_result result = new searchStockResult_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchStockResult_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.searchStockResult(args.userId, args.strategyId, args.stockCode,resultHandler);
      }
    }

    public static class getStrategyExtend<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStrategyExtend_args, String> {
      public getStrategyExtend() {
        super("getStrategyExtend");
      }

      public getStrategyExtend_args getEmptyArgsInstance() {
        return new getStrategyExtend_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getStrategyExtend_result result = new getStrategyExtend_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStrategyExtend_result result = new getStrategyExtend_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStrategyExtend_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getStrategyExtend(args.strategyId,resultHandler);
      }
    }

    public static class findUserFollowStock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUserFollowStock_args, String> {
      public findUserFollowStock() {
        super("findUserFollowStock");
      }

      public findUserFollowStock_args getEmptyArgsInstance() {
        return new findUserFollowStock_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            findUserFollowStock_result result = new findUserFollowStock_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findUserFollowStock_result result = new findUserFollowStock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUserFollowStock_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.findUserFollowStock(args.userId, args.strategyId,resultHandler);
      }
    }

    public static class searchStrategyBestStock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchStrategyBestStock_args, String> {
      public searchStrategyBestStock() {
        super("searchStrategyBestStock");
      }

      public searchStrategyBestStock_args getEmptyArgsInstance() {
        return new searchStrategyBestStock_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            searchStrategyBestStock_result result = new searchStrategyBestStock_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            searchStrategyBestStock_result result = new searchStrategyBestStock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchStrategyBestStock_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.searchStrategyBestStock(resultHandler);
      }
    }

    public static class findReportData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findReportData_args, String> {
      public findReportData() {
        super("findReportData");
      }

      public findReportData_args getEmptyArgsInstance() {
        return new findReportData_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            findReportData_result result = new findReportData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findReportData_result result = new findReportData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findReportData_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.findReportData(args.day, args.lt, args.rt, args.num,resultHandler);
      }
    }

    public static class findAllStrategyUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllStrategyUser_args, String> {
      public findAllStrategyUser() {
        super("findAllStrategyUser");
      }

      public findAllStrategyUser_args getEmptyArgsInstance() {
        return new findAllStrategyUser_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            findAllStrategyUser_result result = new findAllStrategyUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllStrategyUser_result result = new findAllStrategyUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllStrategyUser_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.findAllStrategyUser(args.time,resultHandler);
      }
    }

    public static class incrDNALoopNum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, incrDNALoopNum_args, Integer> {
      public incrDNALoopNum() {
        super("incrDNALoopNum");
      }

      public incrDNALoopNum_args getEmptyArgsInstance() {
        return new incrDNALoopNum_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            incrDNALoopNum_result result = new incrDNALoopNum_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            incrDNALoopNum_result result = new incrDNALoopNum_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, incrDNALoopNum_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.incrDNALoopNum(args.userId,resultHandler);
      }
    }

    public static class findDNALoopByUserId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findDNALoopByUserId_args, String> {
      public findDNALoopByUserId() {
        super("findDNALoopByUserId");
      }

      public findDNALoopByUserId_args getEmptyArgsInstance() {
        return new findDNALoopByUserId_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            findDNALoopByUserId_result result = new findDNALoopByUserId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findDNALoopByUserId_result result = new findDNALoopByUserId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findDNALoopByUserId_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.findDNALoopByUserId(args.userId,resultHandler);
      }
    }

  }

  public static class saveStrategyBestStock_args implements org.apache.thrift.TBase<saveStrategyBestStock_args, saveStrategyBestStock_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveStrategyBestStock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveStrategyBestStock_args");

    private static final org.apache.thrift.protocol.TField STOCK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("stockList", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveStrategyBestStock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveStrategyBestStock_argsTupleSchemeFactory());
    }

    public String stockList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STOCK_LIST((short)1, "stockList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STOCK_LIST
            return STOCK_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STOCK_LIST, new org.apache.thrift.meta_data.FieldMetaData("stockList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveStrategyBestStock_args.class, metaDataMap);
    }

    public saveStrategyBestStock_args() {
    }

    public saveStrategyBestStock_args(
      String stockList)
    {
      this();
      this.stockList = stockList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveStrategyBestStock_args(saveStrategyBestStock_args other) {
      if (other.isSetStockList()) {
        this.stockList = other.stockList;
      }
    }

    public saveStrategyBestStock_args deepCopy() {
      return new saveStrategyBestStock_args(this);
    }

    @Override
    public void clear() {
      this.stockList = null;
    }

    public String getStockList() {
      return this.stockList;
    }

    public saveStrategyBestStock_args setStockList(String stockList) {
      this.stockList = stockList;
      return this;
    }

    public void unsetStockList() {
      this.stockList = null;
    }

    /** Returns true if field stockList is set (has been assigned a value) and false otherwise */
    public boolean isSetStockList() {
      return this.stockList != null;
    }

    public void setStockListIsSet(boolean value) {
      if (!value) {
        this.stockList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STOCK_LIST:
        if (value == null) {
          unsetStockList();
        } else {
          setStockList((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STOCK_LIST:
        return getStockList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STOCK_LIST:
        return isSetStockList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveStrategyBestStock_args)
        return this.equals((saveStrategyBestStock_args)that);
      return false;
    }

    public boolean equals(saveStrategyBestStock_args that) {
      if (that == null)
        return false;

      boolean this_present_stockList = true && this.isSetStockList();
      boolean that_present_stockList = true && that.isSetStockList();
      if (this_present_stockList || that_present_stockList) {
        if (!(this_present_stockList && that_present_stockList))
          return false;
        if (!this.stockList.equals(that.stockList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stockList = true && (isSetStockList());
      list.add(present_stockList);
      if (present_stockList)
        list.add(stockList);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveStrategyBestStock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStockList()).compareTo(other.isSetStockList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStockList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockList, other.stockList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveStrategyBestStock_args(");
      boolean first = true;

      sb.append("stockList:");
      if (this.stockList == null) {
        sb.append("null");
      } else {
        sb.append(this.stockList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveStrategyBestStock_argsStandardSchemeFactory implements SchemeFactory {
      public saveStrategyBestStock_argsStandardScheme getScheme() {
        return new saveStrategyBestStock_argsStandardScheme();
      }
    }

    private static class saveStrategyBestStock_argsStandardScheme extends StandardScheme<saveStrategyBestStock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveStrategyBestStock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STOCK_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stockList = iprot.readString();
                struct.setStockListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveStrategyBestStock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stockList != null) {
          oprot.writeFieldBegin(STOCK_LIST_FIELD_DESC);
          oprot.writeString(struct.stockList);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveStrategyBestStock_argsTupleSchemeFactory implements SchemeFactory {
      public saveStrategyBestStock_argsTupleScheme getScheme() {
        return new saveStrategyBestStock_argsTupleScheme();
      }
    }

    private static class saveStrategyBestStock_argsTupleScheme extends TupleScheme<saveStrategyBestStock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveStrategyBestStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStockList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStockList()) {
          oprot.writeString(struct.stockList);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveStrategyBestStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.stockList = iprot.readString();
          struct.setStockListIsSet(true);
        }
      }
    }

  }

  public static class saveStrategyBestStock_result implements org.apache.thrift.TBase<saveStrategyBestStock_result, saveStrategyBestStock_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveStrategyBestStock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveStrategyBestStock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveStrategyBestStock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveStrategyBestStock_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveStrategyBestStock_result.class, metaDataMap);
    }

    public saveStrategyBestStock_result() {
    }

    public saveStrategyBestStock_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveStrategyBestStock_result(saveStrategyBestStock_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public saveStrategyBestStock_result deepCopy() {
      return new saveStrategyBestStock_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveStrategyBestStock_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveStrategyBestStock_result)
        return this.equals((saveStrategyBestStock_result)that);
      return false;
    }

    public boolean equals(saveStrategyBestStock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveStrategyBestStock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveStrategyBestStock_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveStrategyBestStock_resultStandardSchemeFactory implements SchemeFactory {
      public saveStrategyBestStock_resultStandardScheme getScheme() {
        return new saveStrategyBestStock_resultStandardScheme();
      }
    }

    private static class saveStrategyBestStock_resultStandardScheme extends StandardScheme<saveStrategyBestStock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveStrategyBestStock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveStrategyBestStock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveStrategyBestStock_resultTupleSchemeFactory implements SchemeFactory {
      public saveStrategyBestStock_resultTupleScheme getScheme() {
        return new saveStrategyBestStock_resultTupleScheme();
      }
    }

    private static class saveStrategyBestStock_resultTupleScheme extends TupleScheme<saveStrategyBestStock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveStrategyBestStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveStrategyBestStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateStrategyBestStock_args implements org.apache.thrift.TBase<updateStrategyBestStock_args, updateStrategyBestStock_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateStrategyBestStock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStrategyBestStock_args");

    private static final org.apache.thrift.protocol.TField STOCK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("stockList", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStrategyBestStock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStrategyBestStock_argsTupleSchemeFactory());
    }

    public String stockList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STOCK_LIST((short)1, "stockList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STOCK_LIST
            return STOCK_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STOCK_LIST, new org.apache.thrift.meta_data.FieldMetaData("stockList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStrategyBestStock_args.class, metaDataMap);
    }

    public updateStrategyBestStock_args() {
    }

    public updateStrategyBestStock_args(
      String stockList)
    {
      this();
      this.stockList = stockList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStrategyBestStock_args(updateStrategyBestStock_args other) {
      if (other.isSetStockList()) {
        this.stockList = other.stockList;
      }
    }

    public updateStrategyBestStock_args deepCopy() {
      return new updateStrategyBestStock_args(this);
    }

    @Override
    public void clear() {
      this.stockList = null;
    }

    public String getStockList() {
      return this.stockList;
    }

    public updateStrategyBestStock_args setStockList(String stockList) {
      this.stockList = stockList;
      return this;
    }

    public void unsetStockList() {
      this.stockList = null;
    }

    /** Returns true if field stockList is set (has been assigned a value) and false otherwise */
    public boolean isSetStockList() {
      return this.stockList != null;
    }

    public void setStockListIsSet(boolean value) {
      if (!value) {
        this.stockList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STOCK_LIST:
        if (value == null) {
          unsetStockList();
        } else {
          setStockList((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STOCK_LIST:
        return getStockList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STOCK_LIST:
        return isSetStockList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStrategyBestStock_args)
        return this.equals((updateStrategyBestStock_args)that);
      return false;
    }

    public boolean equals(updateStrategyBestStock_args that) {
      if (that == null)
        return false;

      boolean this_present_stockList = true && this.isSetStockList();
      boolean that_present_stockList = true && that.isSetStockList();
      if (this_present_stockList || that_present_stockList) {
        if (!(this_present_stockList && that_present_stockList))
          return false;
        if (!this.stockList.equals(that.stockList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stockList = true && (isSetStockList());
      list.add(present_stockList);
      if (present_stockList)
        list.add(stockList);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateStrategyBestStock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStockList()).compareTo(other.isSetStockList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStockList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockList, other.stockList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStrategyBestStock_args(");
      boolean first = true;

      sb.append("stockList:");
      if (this.stockList == null) {
        sb.append("null");
      } else {
        sb.append(this.stockList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStrategyBestStock_argsStandardSchemeFactory implements SchemeFactory {
      public updateStrategyBestStock_argsStandardScheme getScheme() {
        return new updateStrategyBestStock_argsStandardScheme();
      }
    }

    private static class updateStrategyBestStock_argsStandardScheme extends StandardScheme<updateStrategyBestStock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStrategyBestStock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STOCK_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stockList = iprot.readString();
                struct.setStockListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStrategyBestStock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stockList != null) {
          oprot.writeFieldBegin(STOCK_LIST_FIELD_DESC);
          oprot.writeString(struct.stockList);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStrategyBestStock_argsTupleSchemeFactory implements SchemeFactory {
      public updateStrategyBestStock_argsTupleScheme getScheme() {
        return new updateStrategyBestStock_argsTupleScheme();
      }
    }

    private static class updateStrategyBestStock_argsTupleScheme extends TupleScheme<updateStrategyBestStock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStrategyBestStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStockList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStockList()) {
          oprot.writeString(struct.stockList);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStrategyBestStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.stockList = iprot.readString();
          struct.setStockListIsSet(true);
        }
      }
    }

  }

  public static class updateStrategyBestStock_result implements org.apache.thrift.TBase<updateStrategyBestStock_result, updateStrategyBestStock_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateStrategyBestStock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStrategyBestStock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStrategyBestStock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStrategyBestStock_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStrategyBestStock_result.class, metaDataMap);
    }

    public updateStrategyBestStock_result() {
    }

    public updateStrategyBestStock_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStrategyBestStock_result(updateStrategyBestStock_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateStrategyBestStock_result deepCopy() {
      return new updateStrategyBestStock_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateStrategyBestStock_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStrategyBestStock_result)
        return this.equals((updateStrategyBestStock_result)that);
      return false;
    }

    public boolean equals(updateStrategyBestStock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateStrategyBestStock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStrategyBestStock_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStrategyBestStock_resultStandardSchemeFactory implements SchemeFactory {
      public updateStrategyBestStock_resultStandardScheme getScheme() {
        return new updateStrategyBestStock_resultStandardScheme();
      }
    }

    private static class updateStrategyBestStock_resultStandardScheme extends StandardScheme<updateStrategyBestStock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStrategyBestStock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStrategyBestStock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStrategyBestStock_resultTupleSchemeFactory implements SchemeFactory {
      public updateStrategyBestStock_resultTupleScheme getScheme() {
        return new updateStrategyBestStock_resultTupleScheme();
      }
    }

    private static class updateStrategyBestStock_resultTupleScheme extends TupleScheme<updateStrategyBestStock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStrategyBestStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStrategyBestStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryStrategyBestStock_args implements org.apache.thrift.TBase<queryStrategyBestStock_args, queryStrategyBestStock_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryStrategyBestStock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStrategyBestStock_args");

    private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStrategyBestStock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStrategyBestStock_argsTupleSchemeFactory());
    }

    public int num; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUM((short)1, "num");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUM
            return NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStrategyBestStock_args.class, metaDataMap);
    }

    public queryStrategyBestStock_args() {
    }

    public queryStrategyBestStock_args(
      int num)
    {
      this();
      this.num = num;
      setNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStrategyBestStock_args(queryStrategyBestStock_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.num = other.num;
    }

    public queryStrategyBestStock_args deepCopy() {
      return new queryStrategyBestStock_args(this);
    }

    @Override
    public void clear() {
      setNumIsSet(false);
      this.num = 0;
    }

    public int getNum() {
      return this.num;
    }

    public queryStrategyBestStock_args setNum(int num) {
      this.num = num;
      setNumIsSet(true);
      return this;
    }

    public void unsetNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    /** Returns true if field num is set (has been assigned a value) and false otherwise */
    public boolean isSetNum() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    public void setNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NUM:
        if (value == null) {
          unsetNum();
        } else {
          setNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NUM:
        return getNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NUM:
        return isSetNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStrategyBestStock_args)
        return this.equals((queryStrategyBestStock_args)that);
      return false;
    }

    public boolean equals(queryStrategyBestStock_args that) {
      if (that == null)
        return false;

      boolean this_present_num = true;
      boolean that_present_num = true;
      if (this_present_num || that_present_num) {
        if (!(this_present_num && that_present_num))
          return false;
        if (this.num != that.num)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_num = true;
      list.add(present_num);
      if (present_num)
        list.add(num);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryStrategyBestStock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStrategyBestStock_args(");
      boolean first = true;

      sb.append("num:");
      sb.append(this.num);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStrategyBestStock_argsStandardSchemeFactory implements SchemeFactory {
      public queryStrategyBestStock_argsStandardScheme getScheme() {
        return new queryStrategyBestStock_argsStandardScheme();
      }
    }

    private static class queryStrategyBestStock_argsStandardScheme extends StandardScheme<queryStrategyBestStock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStrategyBestStock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num = iprot.readI32();
                struct.setNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStrategyBestStock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUM_FIELD_DESC);
        oprot.writeI32(struct.num);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStrategyBestStock_argsTupleSchemeFactory implements SchemeFactory {
      public queryStrategyBestStock_argsTupleScheme getScheme() {
        return new queryStrategyBestStock_argsTupleScheme();
      }
    }

    private static class queryStrategyBestStock_argsTupleScheme extends TupleScheme<queryStrategyBestStock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStrategyBestStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNum()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNum()) {
          oprot.writeI32(struct.num);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStrategyBestStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.num = iprot.readI32();
          struct.setNumIsSet(true);
        }
      }
    }

  }

  public static class queryStrategyBestStock_result implements org.apache.thrift.TBase<queryStrategyBestStock_result, queryStrategyBestStock_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryStrategyBestStock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStrategyBestStock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStrategyBestStock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStrategyBestStock_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStrategyBestStock_result.class, metaDataMap);
    }

    public queryStrategyBestStock_result() {
    }

    public queryStrategyBestStock_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStrategyBestStock_result(queryStrategyBestStock_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryStrategyBestStock_result deepCopy() {
      return new queryStrategyBestStock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryStrategyBestStock_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStrategyBestStock_result)
        return this.equals((queryStrategyBestStock_result)that);
      return false;
    }

    public boolean equals(queryStrategyBestStock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryStrategyBestStock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStrategyBestStock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStrategyBestStock_resultStandardSchemeFactory implements SchemeFactory {
      public queryStrategyBestStock_resultStandardScheme getScheme() {
        return new queryStrategyBestStock_resultStandardScheme();
      }
    }

    private static class queryStrategyBestStock_resultStandardScheme extends StandardScheme<queryStrategyBestStock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStrategyBestStock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStrategyBestStock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStrategyBestStock_resultTupleSchemeFactory implements SchemeFactory {
      public queryStrategyBestStock_resultTupleScheme getScheme() {
        return new queryStrategyBestStock_resultTupleScheme();
      }
    }

    private static class queryStrategyBestStock_resultTupleScheme extends TupleScheme<queryStrategyBestStock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStrategyBestStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStrategyBestStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryAllStrategyBestStock_args implements org.apache.thrift.TBase<queryAllStrategyBestStock_args, queryAllStrategyBestStock_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllStrategyBestStock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllStrategyBestStock_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryAllStrategyBestStock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryAllStrategyBestStock_argsTupleSchemeFactory());
    }

    public int strategyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllStrategyBestStock_args.class, metaDataMap);
    }

    public queryAllStrategyBestStock_args() {
    }

    public queryAllStrategyBestStock_args(
      int strategyId)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryAllStrategyBestStock_args(queryAllStrategyBestStock_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
    }

    public queryAllStrategyBestStock_args deepCopy() {
      return new queryAllStrategyBestStock_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public queryAllStrategyBestStock_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryAllStrategyBestStock_args)
        return this.equals((queryAllStrategyBestStock_args)that);
      return false;
    }

    public boolean equals(queryAllStrategyBestStock_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryAllStrategyBestStock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryAllStrategyBestStock_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryAllStrategyBestStock_argsStandardSchemeFactory implements SchemeFactory {
      public queryAllStrategyBestStock_argsStandardScheme getScheme() {
        return new queryAllStrategyBestStock_argsStandardScheme();
      }
    }

    private static class queryAllStrategyBestStock_argsStandardScheme extends StandardScheme<queryAllStrategyBestStock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllStrategyBestStock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllStrategyBestStock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryAllStrategyBestStock_argsTupleSchemeFactory implements SchemeFactory {
      public queryAllStrategyBestStock_argsTupleScheme getScheme() {
        return new queryAllStrategyBestStock_argsTupleScheme();
      }
    }

    private static class queryAllStrategyBestStock_argsTupleScheme extends TupleScheme<queryAllStrategyBestStock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryAllStrategyBestStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryAllStrategyBestStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
      }
    }

  }

  public static class queryAllStrategyBestStock_result implements org.apache.thrift.TBase<queryAllStrategyBestStock_result, queryAllStrategyBestStock_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllStrategyBestStock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllStrategyBestStock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryAllStrategyBestStock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryAllStrategyBestStock_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllStrategyBestStock_result.class, metaDataMap);
    }

    public queryAllStrategyBestStock_result() {
    }

    public queryAllStrategyBestStock_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryAllStrategyBestStock_result(queryAllStrategyBestStock_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryAllStrategyBestStock_result deepCopy() {
      return new queryAllStrategyBestStock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryAllStrategyBestStock_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryAllStrategyBestStock_result)
        return this.equals((queryAllStrategyBestStock_result)that);
      return false;
    }

    public boolean equals(queryAllStrategyBestStock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryAllStrategyBestStock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryAllStrategyBestStock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryAllStrategyBestStock_resultStandardSchemeFactory implements SchemeFactory {
      public queryAllStrategyBestStock_resultStandardScheme getScheme() {
        return new queryAllStrategyBestStock_resultStandardScheme();
      }
    }

    private static class queryAllStrategyBestStock_resultStandardScheme extends StandardScheme<queryAllStrategyBestStock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllStrategyBestStock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllStrategyBestStock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryAllStrategyBestStock_resultTupleSchemeFactory implements SchemeFactory {
      public queryAllStrategyBestStock_resultTupleScheme getScheme() {
        return new queryAllStrategyBestStock_resultTupleScheme();
      }
    }

    private static class queryAllStrategyBestStock_resultTupleScheme extends TupleScheme<queryAllStrategyBestStock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryAllStrategyBestStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryAllStrategyBestStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryAllStrategy_args implements org.apache.thrift.TBase<queryAllStrategy_args, queryAllStrategy_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllStrategy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllStrategy_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryAllStrategy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryAllStrategy_argsTupleSchemeFactory());
    }

    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllStrategy_args.class, metaDataMap);
    }

    public queryAllStrategy_args() {
    }

    public queryAllStrategy_args(
      int userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryAllStrategy_args(queryAllStrategy_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public queryAllStrategy_args deepCopy() {
      return new queryAllStrategy_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public queryAllStrategy_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryAllStrategy_args)
        return this.equals((queryAllStrategy_args)that);
      return false;
    }

    public boolean equals(queryAllStrategy_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryAllStrategy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryAllStrategy_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryAllStrategy_argsStandardSchemeFactory implements SchemeFactory {
      public queryAllStrategy_argsStandardScheme getScheme() {
        return new queryAllStrategy_argsStandardScheme();
      }
    }

    private static class queryAllStrategy_argsStandardScheme extends StandardScheme<queryAllStrategy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllStrategy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllStrategy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryAllStrategy_argsTupleSchemeFactory implements SchemeFactory {
      public queryAllStrategy_argsTupleScheme getScheme() {
        return new queryAllStrategy_argsTupleScheme();
      }
    }

    private static class queryAllStrategy_argsTupleScheme extends TupleScheme<queryAllStrategy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryAllStrategy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryAllStrategy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class queryAllStrategy_result implements org.apache.thrift.TBase<queryAllStrategy_result, queryAllStrategy_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllStrategy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllStrategy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryAllStrategy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryAllStrategy_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllStrategy_result.class, metaDataMap);
    }

    public queryAllStrategy_result() {
    }

    public queryAllStrategy_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryAllStrategy_result(queryAllStrategy_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryAllStrategy_result deepCopy() {
      return new queryAllStrategy_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryAllStrategy_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryAllStrategy_result)
        return this.equals((queryAllStrategy_result)that);
      return false;
    }

    public boolean equals(queryAllStrategy_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryAllStrategy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryAllStrategy_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryAllStrategy_resultStandardSchemeFactory implements SchemeFactory {
      public queryAllStrategy_resultStandardScheme getScheme() {
        return new queryAllStrategy_resultStandardScheme();
      }
    }

    private static class queryAllStrategy_resultStandardScheme extends StandardScheme<queryAllStrategy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllStrategy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllStrategy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryAllStrategy_resultTupleSchemeFactory implements SchemeFactory {
      public queryAllStrategy_resultTupleScheme getScheme() {
        return new queryAllStrategy_resultTupleScheme();
      }
    }

    private static class queryAllStrategy_resultTupleScheme extends TupleScheme<queryAllStrategy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryAllStrategy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryAllStrategy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveStrategyComment_args implements org.apache.thrift.TBase<saveStrategyComment_args, saveStrategyComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveStrategyComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveStrategyComment_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_FIELD_DESC = new org.apache.thrift.protocol.TField("strategy", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveStrategyComment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveStrategyComment_argsTupleSchemeFactory());
    }

    public String strategy; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY((short)1, "strategy");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY
            return STRATEGY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY, new org.apache.thrift.meta_data.FieldMetaData("strategy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveStrategyComment_args.class, metaDataMap);
    }

    public saveStrategyComment_args() {
    }

    public saveStrategyComment_args(
      String strategy)
    {
      this();
      this.strategy = strategy;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveStrategyComment_args(saveStrategyComment_args other) {
      if (other.isSetStrategy()) {
        this.strategy = other.strategy;
      }
    }

    public saveStrategyComment_args deepCopy() {
      return new saveStrategyComment_args(this);
    }

    @Override
    public void clear() {
      this.strategy = null;
    }

    public String getStrategy() {
      return this.strategy;
    }

    public saveStrategyComment_args setStrategy(String strategy) {
      this.strategy = strategy;
      return this;
    }

    public void unsetStrategy() {
      this.strategy = null;
    }

    /** Returns true if field strategy is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategy() {
      return this.strategy != null;
    }

    public void setStrategyIsSet(boolean value) {
      if (!value) {
        this.strategy = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY:
        if (value == null) {
          unsetStrategy();
        } else {
          setStrategy((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY:
        return getStrategy();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY:
        return isSetStrategy();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveStrategyComment_args)
        return this.equals((saveStrategyComment_args)that);
      return false;
    }

    public boolean equals(saveStrategyComment_args that) {
      if (that == null)
        return false;

      boolean this_present_strategy = true && this.isSetStrategy();
      boolean that_present_strategy = true && that.isSetStrategy();
      if (this_present_strategy || that_present_strategy) {
        if (!(this_present_strategy && that_present_strategy))
          return false;
        if (!this.strategy.equals(that.strategy))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategy = true && (isSetStrategy());
      list.add(present_strategy);
      if (present_strategy)
        list.add(strategy);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveStrategyComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategy()).compareTo(other.isSetStrategy());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategy()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy, other.strategy);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveStrategyComment_args(");
      boolean first = true;

      sb.append("strategy:");
      if (this.strategy == null) {
        sb.append("null");
      } else {
        sb.append(this.strategy);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveStrategyComment_argsStandardSchemeFactory implements SchemeFactory {
      public saveStrategyComment_argsStandardScheme getScheme() {
        return new saveStrategyComment_argsStandardScheme();
      }
    }

    private static class saveStrategyComment_argsStandardScheme extends StandardScheme<saveStrategyComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveStrategyComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strategy = iprot.readString();
                struct.setStrategyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveStrategyComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.strategy != null) {
          oprot.writeFieldBegin(STRATEGY_FIELD_DESC);
          oprot.writeString(struct.strategy);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveStrategyComment_argsTupleSchemeFactory implements SchemeFactory {
      public saveStrategyComment_argsTupleScheme getScheme() {
        return new saveStrategyComment_argsTupleScheme();
      }
    }

    private static class saveStrategyComment_argsTupleScheme extends TupleScheme<saveStrategyComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveStrategyComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategy()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrategy()) {
          oprot.writeString(struct.strategy);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveStrategyComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strategy = iprot.readString();
          struct.setStrategyIsSet(true);
        }
      }
    }

  }

  public static class saveStrategyComment_result implements org.apache.thrift.TBase<saveStrategyComment_result, saveStrategyComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveStrategyComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveStrategyComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveStrategyComment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveStrategyComment_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveStrategyComment_result.class, metaDataMap);
    }

    public saveStrategyComment_result() {
    }

    public saveStrategyComment_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveStrategyComment_result(saveStrategyComment_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public saveStrategyComment_result deepCopy() {
      return new saveStrategyComment_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveStrategyComment_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveStrategyComment_result)
        return this.equals((saveStrategyComment_result)that);
      return false;
    }

    public boolean equals(saveStrategyComment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveStrategyComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveStrategyComment_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveStrategyComment_resultStandardSchemeFactory implements SchemeFactory {
      public saveStrategyComment_resultStandardScheme getScheme() {
        return new saveStrategyComment_resultStandardScheme();
      }
    }

    private static class saveStrategyComment_resultStandardScheme extends StandardScheme<saveStrategyComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveStrategyComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveStrategyComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveStrategyComment_resultTupleSchemeFactory implements SchemeFactory {
      public saveStrategyComment_resultTupleScheme getScheme() {
        return new saveStrategyComment_resultTupleScheme();
      }
    }

    private static class saveStrategyComment_resultTupleScheme extends TupleScheme<saveStrategyComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveStrategyComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveStrategyComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteStrategyComment_args implements org.apache.thrift.TBase<deleteStrategyComment_args, deleteStrategyComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteStrategyComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteStrategyComment_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteStrategyComment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteStrategyComment_argsTupleSchemeFactory());
    }

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteStrategyComment_args.class, metaDataMap);
    }

    public deleteStrategyComment_args() {
    }

    public deleteStrategyComment_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteStrategyComment_args(deleteStrategyComment_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public deleteStrategyComment_args deepCopy() {
      return new deleteStrategyComment_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public deleteStrategyComment_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteStrategyComment_args)
        return this.equals((deleteStrategyComment_args)that);
      return false;
    }

    public boolean equals(deleteStrategyComment_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteStrategyComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteStrategyComment_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteStrategyComment_argsStandardSchemeFactory implements SchemeFactory {
      public deleteStrategyComment_argsStandardScheme getScheme() {
        return new deleteStrategyComment_argsStandardScheme();
      }
    }

    private static class deleteStrategyComment_argsStandardScheme extends StandardScheme<deleteStrategyComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteStrategyComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteStrategyComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteStrategyComment_argsTupleSchemeFactory implements SchemeFactory {
      public deleteStrategyComment_argsTupleScheme getScheme() {
        return new deleteStrategyComment_argsTupleScheme();
      }
    }

    private static class deleteStrategyComment_argsTupleScheme extends TupleScheme<deleteStrategyComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteStrategyComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteStrategyComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class deleteStrategyComment_result implements org.apache.thrift.TBase<deleteStrategyComment_result, deleteStrategyComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteStrategyComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteStrategyComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteStrategyComment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteStrategyComment_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteStrategyComment_result.class, metaDataMap);
    }

    public deleteStrategyComment_result() {
    }

    public deleteStrategyComment_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteStrategyComment_result(deleteStrategyComment_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteStrategyComment_result deepCopy() {
      return new deleteStrategyComment_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteStrategyComment_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteStrategyComment_result)
        return this.equals((deleteStrategyComment_result)that);
      return false;
    }

    public boolean equals(deleteStrategyComment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteStrategyComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteStrategyComment_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteStrategyComment_resultStandardSchemeFactory implements SchemeFactory {
      public deleteStrategyComment_resultStandardScheme getScheme() {
        return new deleteStrategyComment_resultStandardScheme();
      }
    }

    private static class deleteStrategyComment_resultStandardScheme extends StandardScheme<deleteStrategyComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteStrategyComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteStrategyComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteStrategyComment_resultTupleSchemeFactory implements SchemeFactory {
      public deleteStrategyComment_resultTupleScheme getScheme() {
        return new deleteStrategyComment_resultTupleScheme();
      }
    }

    private static class deleteStrategyComment_resultTupleScheme extends TupleScheme<deleteStrategyComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteStrategyComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteStrategyComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateStrategyComment_args implements org.apache.thrift.TBase<updateStrategyComment_args, updateStrategyComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateStrategyComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStrategyComment_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_FIELD_DESC = new org.apache.thrift.protocol.TField("strategy", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStrategyComment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStrategyComment_argsTupleSchemeFactory());
    }

    public String strategy; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY((short)1, "strategy");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY
            return STRATEGY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY, new org.apache.thrift.meta_data.FieldMetaData("strategy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStrategyComment_args.class, metaDataMap);
    }

    public updateStrategyComment_args() {
    }

    public updateStrategyComment_args(
      String strategy)
    {
      this();
      this.strategy = strategy;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStrategyComment_args(updateStrategyComment_args other) {
      if (other.isSetStrategy()) {
        this.strategy = other.strategy;
      }
    }

    public updateStrategyComment_args deepCopy() {
      return new updateStrategyComment_args(this);
    }

    @Override
    public void clear() {
      this.strategy = null;
    }

    public String getStrategy() {
      return this.strategy;
    }

    public updateStrategyComment_args setStrategy(String strategy) {
      this.strategy = strategy;
      return this;
    }

    public void unsetStrategy() {
      this.strategy = null;
    }

    /** Returns true if field strategy is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategy() {
      return this.strategy != null;
    }

    public void setStrategyIsSet(boolean value) {
      if (!value) {
        this.strategy = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY:
        if (value == null) {
          unsetStrategy();
        } else {
          setStrategy((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY:
        return getStrategy();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY:
        return isSetStrategy();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStrategyComment_args)
        return this.equals((updateStrategyComment_args)that);
      return false;
    }

    public boolean equals(updateStrategyComment_args that) {
      if (that == null)
        return false;

      boolean this_present_strategy = true && this.isSetStrategy();
      boolean that_present_strategy = true && that.isSetStrategy();
      if (this_present_strategy || that_present_strategy) {
        if (!(this_present_strategy && that_present_strategy))
          return false;
        if (!this.strategy.equals(that.strategy))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategy = true && (isSetStrategy());
      list.add(present_strategy);
      if (present_strategy)
        list.add(strategy);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateStrategyComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategy()).compareTo(other.isSetStrategy());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategy()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy, other.strategy);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStrategyComment_args(");
      boolean first = true;

      sb.append("strategy:");
      if (this.strategy == null) {
        sb.append("null");
      } else {
        sb.append(this.strategy);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStrategyComment_argsStandardSchemeFactory implements SchemeFactory {
      public updateStrategyComment_argsStandardScheme getScheme() {
        return new updateStrategyComment_argsStandardScheme();
      }
    }

    private static class updateStrategyComment_argsStandardScheme extends StandardScheme<updateStrategyComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStrategyComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strategy = iprot.readString();
                struct.setStrategyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStrategyComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.strategy != null) {
          oprot.writeFieldBegin(STRATEGY_FIELD_DESC);
          oprot.writeString(struct.strategy);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStrategyComment_argsTupleSchemeFactory implements SchemeFactory {
      public updateStrategyComment_argsTupleScheme getScheme() {
        return new updateStrategyComment_argsTupleScheme();
      }
    }

    private static class updateStrategyComment_argsTupleScheme extends TupleScheme<updateStrategyComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStrategyComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategy()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrategy()) {
          oprot.writeString(struct.strategy);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStrategyComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strategy = iprot.readString();
          struct.setStrategyIsSet(true);
        }
      }
    }

  }

  public static class updateStrategyComment_result implements org.apache.thrift.TBase<updateStrategyComment_result, updateStrategyComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateStrategyComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStrategyComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStrategyComment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStrategyComment_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStrategyComment_result.class, metaDataMap);
    }

    public updateStrategyComment_result() {
    }

    public updateStrategyComment_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStrategyComment_result(updateStrategyComment_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateStrategyComment_result deepCopy() {
      return new updateStrategyComment_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateStrategyComment_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStrategyComment_result)
        return this.equals((updateStrategyComment_result)that);
      return false;
    }

    public boolean equals(updateStrategyComment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateStrategyComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStrategyComment_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStrategyComment_resultStandardSchemeFactory implements SchemeFactory {
      public updateStrategyComment_resultStandardScheme getScheme() {
        return new updateStrategyComment_resultStandardScheme();
      }
    }

    private static class updateStrategyComment_resultStandardScheme extends StandardScheme<updateStrategyComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStrategyComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStrategyComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStrategyComment_resultTupleSchemeFactory implements SchemeFactory {
      public updateStrategyComment_resultTupleScheme getScheme() {
        return new updateStrategyComment_resultTupleScheme();
      }
    }

    private static class updateStrategyComment_resultTupleScheme extends TupleScheme<updateStrategyComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStrategyComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStrategyComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStrategyComment_args implements org.apache.thrift.TBase<getStrategyComment_args, getStrategyComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStrategyComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStrategyComment_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStrategyComment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStrategyComment_argsTupleSchemeFactory());
    }

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStrategyComment_args.class, metaDataMap);
    }

    public getStrategyComment_args() {
    }

    public getStrategyComment_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStrategyComment_args(getStrategyComment_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public getStrategyComment_args deepCopy() {
      return new getStrategyComment_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public getStrategyComment_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStrategyComment_args)
        return this.equals((getStrategyComment_args)that);
      return false;
    }

    public boolean equals(getStrategyComment_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStrategyComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStrategyComment_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStrategyComment_argsStandardSchemeFactory implements SchemeFactory {
      public getStrategyComment_argsStandardScheme getScheme() {
        return new getStrategyComment_argsStandardScheme();
      }
    }

    private static class getStrategyComment_argsStandardScheme extends StandardScheme<getStrategyComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStrategyComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStrategyComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStrategyComment_argsTupleSchemeFactory implements SchemeFactory {
      public getStrategyComment_argsTupleScheme getScheme() {
        return new getStrategyComment_argsTupleScheme();
      }
    }

    private static class getStrategyComment_argsTupleScheme extends TupleScheme<getStrategyComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStrategyComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStrategyComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class getStrategyComment_result implements org.apache.thrift.TBase<getStrategyComment_result, getStrategyComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStrategyComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStrategyComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStrategyComment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStrategyComment_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStrategyComment_result.class, metaDataMap);
    }

    public getStrategyComment_result() {
    }

    public getStrategyComment_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStrategyComment_result(getStrategyComment_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getStrategyComment_result deepCopy() {
      return new getStrategyComment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getStrategyComment_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStrategyComment_result)
        return this.equals((getStrategyComment_result)that);
      return false;
    }

    public boolean equals(getStrategyComment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStrategyComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStrategyComment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStrategyComment_resultStandardSchemeFactory implements SchemeFactory {
      public getStrategyComment_resultStandardScheme getScheme() {
        return new getStrategyComment_resultStandardScheme();
      }
    }

    private static class getStrategyComment_resultStandardScheme extends StandardScheme<getStrategyComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStrategyComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStrategyComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStrategyComment_resultTupleSchemeFactory implements SchemeFactory {
      public getStrategyComment_resultTupleScheme getScheme() {
        return new getStrategyComment_resultTupleScheme();
      }
    }

    private static class getStrategyComment_resultTupleScheme extends TupleScheme<getStrategyComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStrategyComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStrategyComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryStrategyCommentByPage_args implements org.apache.thrift.TBase<queryStrategyCommentByPage_args, queryStrategyCommentByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryStrategyCommentByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStrategyCommentByPage_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("pageIndex", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStrategyCommentByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStrategyCommentByPage_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public int userId; // required
    public int pageIndex; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      USER_ID((short)2, "userId"),
      PAGE_INDEX((short)3, "pageIndex"),
      PAGE_SIZE((short)4, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // PAGE_INDEX
            return PAGE_INDEX;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private static final int __USERID_ISSET_ID = 1;
    private static final int __PAGEINDEX_ISSET_ID = 2;
    private static final int __PAGESIZE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("pageIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStrategyCommentByPage_args.class, metaDataMap);
    }

    public queryStrategyCommentByPage_args() {
    }

    public queryStrategyCommentByPage_args(
      int strategyId,
      int userId,
      int pageIndex,
      int pageSize)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.userId = userId;
      setUserIdIsSet(true);
      this.pageIndex = pageIndex;
      setPageIndexIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStrategyCommentByPage_args(queryStrategyCommentByPage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      this.userId = other.userId;
      this.pageIndex = other.pageIndex;
      this.pageSize = other.pageSize;
    }

    public queryStrategyCommentByPage_args deepCopy() {
      return new queryStrategyCommentByPage_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setUserIdIsSet(false);
      this.userId = 0;
      setPageIndexIsSet(false);
      this.pageIndex = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public queryStrategyCommentByPage_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public int getUserId() {
      return this.userId;
    }

    public queryStrategyCommentByPage_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getPageIndex() {
      return this.pageIndex;
    }

    public queryStrategyCommentByPage_args setPageIndex(int pageIndex) {
      this.pageIndex = pageIndex;
      setPageIndexIsSet(true);
      return this;
    }

    public void unsetPageIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
    }

    /** Returns true if field pageIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetPageIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
    }

    public void setPageIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGEINDEX_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public queryStrategyCommentByPage_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case PAGE_INDEX:
        if (value == null) {
          unsetPageIndex();
        } else {
          setPageIndex((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case USER_ID:
        return getUserId();

      case PAGE_INDEX:
        return getPageIndex();

      case PAGE_SIZE:
        return getPageSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case USER_ID:
        return isSetUserId();
      case PAGE_INDEX:
        return isSetPageIndex();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStrategyCommentByPage_args)
        return this.equals((queryStrategyCommentByPage_args)that);
      return false;
    }

    public boolean equals(queryStrategyCommentByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_pageIndex = true;
      boolean that_present_pageIndex = true;
      if (this_present_pageIndex || that_present_pageIndex) {
        if (!(this_present_pageIndex && that_present_pageIndex))
          return false;
        if (this.pageIndex != that.pageIndex)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_pageIndex = true;
      list.add(present_pageIndex);
      if (present_pageIndex)
        list.add(pageIndex);

      boolean present_pageSize = true;
      list.add(present_pageSize);
      if (present_pageSize)
        list.add(pageSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryStrategyCommentByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageIndex()).compareTo(other.isSetPageIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageIndex, other.pageIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStrategyCommentByPage_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageIndex:");
      sb.append(this.pageIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStrategyCommentByPage_argsStandardSchemeFactory implements SchemeFactory {
      public queryStrategyCommentByPage_argsStandardScheme getScheme() {
        return new queryStrategyCommentByPage_argsStandardScheme();
      }
    }

    private static class queryStrategyCommentByPage_argsStandardScheme extends StandardScheme<queryStrategyCommentByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStrategyCommentByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageIndex = iprot.readI32();
                struct.setPageIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStrategyCommentByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_INDEX_FIELD_DESC);
        oprot.writeI32(struct.pageIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStrategyCommentByPage_argsTupleSchemeFactory implements SchemeFactory {
      public queryStrategyCommentByPage_argsTupleScheme getScheme() {
        return new queryStrategyCommentByPage_argsTupleScheme();
      }
    }

    private static class queryStrategyCommentByPage_argsTupleScheme extends TupleScheme<queryStrategyCommentByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStrategyCommentByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetPageIndex()) {
          optionals.set(2);
        }
        if (struct.isSetPageSize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetPageIndex()) {
          oprot.writeI32(struct.pageIndex);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStrategyCommentByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageIndex = iprot.readI32();
          struct.setPageIndexIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class queryStrategyCommentByPage_result implements org.apache.thrift.TBase<queryStrategyCommentByPage_result, queryStrategyCommentByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryStrategyCommentByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStrategyCommentByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStrategyCommentByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStrategyCommentByPage_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStrategyCommentByPage_result.class, metaDataMap);
    }

    public queryStrategyCommentByPage_result() {
    }

    public queryStrategyCommentByPage_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStrategyCommentByPage_result(queryStrategyCommentByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryStrategyCommentByPage_result deepCopy() {
      return new queryStrategyCommentByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryStrategyCommentByPage_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStrategyCommentByPage_result)
        return this.equals((queryStrategyCommentByPage_result)that);
      return false;
    }

    public boolean equals(queryStrategyCommentByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryStrategyCommentByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStrategyCommentByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStrategyCommentByPage_resultStandardSchemeFactory implements SchemeFactory {
      public queryStrategyCommentByPage_resultStandardScheme getScheme() {
        return new queryStrategyCommentByPage_resultStandardScheme();
      }
    }

    private static class queryStrategyCommentByPage_resultStandardScheme extends StandardScheme<queryStrategyCommentByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStrategyCommentByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStrategyCommentByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStrategyCommentByPage_resultTupleSchemeFactory implements SchemeFactory {
      public queryStrategyCommentByPage_resultTupleScheme getScheme() {
        return new queryStrategyCommentByPage_resultTupleScheme();
      }
    }

    private static class queryStrategyCommentByPage_resultTupleScheme extends TupleScheme<queryStrategyCommentByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStrategyCommentByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStrategyCommentByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findStrategyCommentList_args implements org.apache.thrift.TBase<findStrategyCommentList_args, findStrategyCommentList_args._Fields>, java.io.Serializable, Cloneable, Comparable<findStrategyCommentList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStrategyCommentList_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("pageIndex", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStrategyCommentList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStrategyCommentList_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public int pageIndex; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      PAGE_INDEX((short)2, "pageIndex"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // PAGE_INDEX
            return PAGE_INDEX;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private static final int __PAGEINDEX_ISSET_ID = 1;
    private static final int __PAGESIZE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("pageIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStrategyCommentList_args.class, metaDataMap);
    }

    public findStrategyCommentList_args() {
    }

    public findStrategyCommentList_args(
      int strategyId,
      int pageIndex,
      int pageSize)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.pageIndex = pageIndex;
      setPageIndexIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStrategyCommentList_args(findStrategyCommentList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      this.pageIndex = other.pageIndex;
      this.pageSize = other.pageSize;
    }

    public findStrategyCommentList_args deepCopy() {
      return new findStrategyCommentList_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setPageIndexIsSet(false);
      this.pageIndex = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public findStrategyCommentList_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public int getPageIndex() {
      return this.pageIndex;
    }

    public findStrategyCommentList_args setPageIndex(int pageIndex) {
      this.pageIndex = pageIndex;
      setPageIndexIsSet(true);
      return this;
    }

    public void unsetPageIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
    }

    /** Returns true if field pageIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetPageIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
    }

    public void setPageIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGEINDEX_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public findStrategyCommentList_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case PAGE_INDEX:
        if (value == null) {
          unsetPageIndex();
        } else {
          setPageIndex((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case PAGE_INDEX:
        return getPageIndex();

      case PAGE_SIZE:
        return getPageSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case PAGE_INDEX:
        return isSetPageIndex();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStrategyCommentList_args)
        return this.equals((findStrategyCommentList_args)that);
      return false;
    }

    public boolean equals(findStrategyCommentList_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_pageIndex = true;
      boolean that_present_pageIndex = true;
      if (this_present_pageIndex || that_present_pageIndex) {
        if (!(this_present_pageIndex && that_present_pageIndex))
          return false;
        if (this.pageIndex != that.pageIndex)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_pageIndex = true;
      list.add(present_pageIndex);
      if (present_pageIndex)
        list.add(pageIndex);

      boolean present_pageSize = true;
      list.add(present_pageSize);
      if (present_pageSize)
        list.add(pageSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(findStrategyCommentList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageIndex()).compareTo(other.isSetPageIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageIndex, other.pageIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStrategyCommentList_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageIndex:");
      sb.append(this.pageIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStrategyCommentList_argsStandardSchemeFactory implements SchemeFactory {
      public findStrategyCommentList_argsStandardScheme getScheme() {
        return new findStrategyCommentList_argsStandardScheme();
      }
    }

    private static class findStrategyCommentList_argsStandardScheme extends StandardScheme<findStrategyCommentList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStrategyCommentList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageIndex = iprot.readI32();
                struct.setPageIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStrategyCommentList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_INDEX_FIELD_DESC);
        oprot.writeI32(struct.pageIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStrategyCommentList_argsTupleSchemeFactory implements SchemeFactory {
      public findStrategyCommentList_argsTupleScheme getScheme() {
        return new findStrategyCommentList_argsTupleScheme();
      }
    }

    private static class findStrategyCommentList_argsTupleScheme extends TupleScheme<findStrategyCommentList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStrategyCommentList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetPageIndex()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetPageIndex()) {
          oprot.writeI32(struct.pageIndex);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStrategyCommentList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageIndex = iprot.readI32();
          struct.setPageIndexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class findStrategyCommentList_result implements org.apache.thrift.TBase<findStrategyCommentList_result, findStrategyCommentList_result._Fields>, java.io.Serializable, Cloneable, Comparable<findStrategyCommentList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStrategyCommentList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStrategyCommentList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStrategyCommentList_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStrategyCommentList_result.class, metaDataMap);
    }

    public findStrategyCommentList_result() {
    }

    public findStrategyCommentList_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStrategyCommentList_result(findStrategyCommentList_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public findStrategyCommentList_result deepCopy() {
      return new findStrategyCommentList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findStrategyCommentList_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStrategyCommentList_result)
        return this.equals((findStrategyCommentList_result)that);
      return false;
    }

    public boolean equals(findStrategyCommentList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findStrategyCommentList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStrategyCommentList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStrategyCommentList_resultStandardSchemeFactory implements SchemeFactory {
      public findStrategyCommentList_resultStandardScheme getScheme() {
        return new findStrategyCommentList_resultStandardScheme();
      }
    }

    private static class findStrategyCommentList_resultStandardScheme extends StandardScheme<findStrategyCommentList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStrategyCommentList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStrategyCommentList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStrategyCommentList_resultTupleSchemeFactory implements SchemeFactory {
      public findStrategyCommentList_resultTupleScheme getScheme() {
        return new findStrategyCommentList_resultTupleScheme();
      }
    }

    private static class findStrategyCommentList_resultTupleScheme extends TupleScheme<findStrategyCommentList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStrategyCommentList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStrategyCommentList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateCommentStatus_args implements org.apache.thrift.TBase<updateCommentStatus_args, updateCommentStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCommentStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCommentStatus_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCommentStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCommentStatus_argsTupleSchemeFactory());
    }

    public int id; // required
    public int status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      STATUS((short)2, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __STATUS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCommentStatus_args.class, metaDataMap);
    }

    public updateCommentStatus_args() {
    }

    public updateCommentStatus_args(
      int id,
      int status)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.status = status;
      setStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCommentStatus_args(updateCommentStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      this.status = other.status;
    }

    public updateCommentStatus_args deepCopy() {
      return new updateCommentStatus_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      setStatusIsSet(false);
      this.status = 0;
    }

    public int getId() {
      return this.id;
    }

    public updateCommentStatus_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public int getStatus() {
      return this.status;
    }

    public updateCommentStatus_args setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCommentStatus_args)
        return this.equals((updateCommentStatus_args)that);
      return false;
    }

    public boolean equals(updateCommentStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_status = true;
      list.add(present_status);
      if (present_status)
        list.add(status);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateCommentStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCommentStatus_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCommentStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateCommentStatus_argsStandardScheme getScheme() {
        return new updateCommentStatus_argsStandardScheme();
      }
    }

    private static class updateCommentStatus_argsStandardScheme extends StandardScheme<updateCommentStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCommentStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCommentStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCommentStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateCommentStatus_argsTupleScheme getScheme() {
        return new updateCommentStatus_argsTupleScheme();
      }
    }

    private static class updateCommentStatus_argsTupleScheme extends TupleScheme<updateCommentStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCommentStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetStatus()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCommentStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class updateCommentStatus_result implements org.apache.thrift.TBase<updateCommentStatus_result, updateCommentStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCommentStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCommentStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCommentStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCommentStatus_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCommentStatus_result.class, metaDataMap);
    }

    public updateCommentStatus_result() {
    }

    public updateCommentStatus_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCommentStatus_result(updateCommentStatus_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateCommentStatus_result deepCopy() {
      return new updateCommentStatus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateCommentStatus_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCommentStatus_result)
        return this.equals((updateCommentStatus_result)that);
      return false;
    }

    public boolean equals(updateCommentStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateCommentStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCommentStatus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCommentStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateCommentStatus_resultStandardScheme getScheme() {
        return new updateCommentStatus_resultStandardScheme();
      }
    }

    private static class updateCommentStatus_resultStandardScheme extends StandardScheme<updateCommentStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCommentStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCommentStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCommentStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateCommentStatus_resultTupleScheme getScheme() {
        return new updateCommentStatus_resultTupleScheme();
      }
    }

    private static class updateCommentStatus_resultTupleScheme extends TupleScheme<updateCommentStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCommentStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCommentStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveStrategyScore_args implements org.apache.thrift.TBase<saveStrategyScore_args, saveStrategyScore_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveStrategyScore_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveStrategyScore_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyScore", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveStrategyScore_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveStrategyScore_argsTupleSchemeFactory());
    }

    public String strategyScore; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_SCORE((short)1, "strategyScore");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_SCORE
            return STRATEGY_SCORE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_SCORE, new org.apache.thrift.meta_data.FieldMetaData("strategyScore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveStrategyScore_args.class, metaDataMap);
    }

    public saveStrategyScore_args() {
    }

    public saveStrategyScore_args(
      String strategyScore)
    {
      this();
      this.strategyScore = strategyScore;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveStrategyScore_args(saveStrategyScore_args other) {
      if (other.isSetStrategyScore()) {
        this.strategyScore = other.strategyScore;
      }
    }

    public saveStrategyScore_args deepCopy() {
      return new saveStrategyScore_args(this);
    }

    @Override
    public void clear() {
      this.strategyScore = null;
    }

    public String getStrategyScore() {
      return this.strategyScore;
    }

    public saveStrategyScore_args setStrategyScore(String strategyScore) {
      this.strategyScore = strategyScore;
      return this;
    }

    public void unsetStrategyScore() {
      this.strategyScore = null;
    }

    /** Returns true if field strategyScore is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyScore() {
      return this.strategyScore != null;
    }

    public void setStrategyScoreIsSet(boolean value) {
      if (!value) {
        this.strategyScore = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_SCORE:
        if (value == null) {
          unsetStrategyScore();
        } else {
          setStrategyScore((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_SCORE:
        return getStrategyScore();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_SCORE:
        return isSetStrategyScore();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveStrategyScore_args)
        return this.equals((saveStrategyScore_args)that);
      return false;
    }

    public boolean equals(saveStrategyScore_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyScore = true && this.isSetStrategyScore();
      boolean that_present_strategyScore = true && that.isSetStrategyScore();
      if (this_present_strategyScore || that_present_strategyScore) {
        if (!(this_present_strategyScore && that_present_strategyScore))
          return false;
        if (!this.strategyScore.equals(that.strategyScore))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyScore = true && (isSetStrategyScore());
      list.add(present_strategyScore);
      if (present_strategyScore)
        list.add(strategyScore);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveStrategyScore_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyScore()).compareTo(other.isSetStrategyScore());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyScore()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyScore, other.strategyScore);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveStrategyScore_args(");
      boolean first = true;

      sb.append("strategyScore:");
      if (this.strategyScore == null) {
        sb.append("null");
      } else {
        sb.append(this.strategyScore);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveStrategyScore_argsStandardSchemeFactory implements SchemeFactory {
      public saveStrategyScore_argsStandardScheme getScheme() {
        return new saveStrategyScore_argsStandardScheme();
      }
    }

    private static class saveStrategyScore_argsStandardScheme extends StandardScheme<saveStrategyScore_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveStrategyScore_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_SCORE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strategyScore = iprot.readString();
                struct.setStrategyScoreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveStrategyScore_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.strategyScore != null) {
          oprot.writeFieldBegin(STRATEGY_SCORE_FIELD_DESC);
          oprot.writeString(struct.strategyScore);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveStrategyScore_argsTupleSchemeFactory implements SchemeFactory {
      public saveStrategyScore_argsTupleScheme getScheme() {
        return new saveStrategyScore_argsTupleScheme();
      }
    }

    private static class saveStrategyScore_argsTupleScheme extends TupleScheme<saveStrategyScore_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveStrategyScore_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyScore()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrategyScore()) {
          oprot.writeString(struct.strategyScore);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveStrategyScore_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strategyScore = iprot.readString();
          struct.setStrategyScoreIsSet(true);
        }
      }
    }

  }

  public static class saveStrategyScore_result implements org.apache.thrift.TBase<saveStrategyScore_result, saveStrategyScore_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveStrategyScore_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveStrategyScore_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveStrategyScore_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveStrategyScore_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveStrategyScore_result.class, metaDataMap);
    }

    public saveStrategyScore_result() {
    }

    public saveStrategyScore_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveStrategyScore_result(saveStrategyScore_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public saveStrategyScore_result deepCopy() {
      return new saveStrategyScore_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveStrategyScore_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveStrategyScore_result)
        return this.equals((saveStrategyScore_result)that);
      return false;
    }

    public boolean equals(saveStrategyScore_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveStrategyScore_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveStrategyScore_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveStrategyScore_resultStandardSchemeFactory implements SchemeFactory {
      public saveStrategyScore_resultStandardScheme getScheme() {
        return new saveStrategyScore_resultStandardScheme();
      }
    }

    private static class saveStrategyScore_resultStandardScheme extends StandardScheme<saveStrategyScore_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveStrategyScore_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveStrategyScore_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveStrategyScore_resultTupleSchemeFactory implements SchemeFactory {
      public saveStrategyScore_resultTupleScheme getScheme() {
        return new saveStrategyScore_resultTupleScheme();
      }
    }

    private static class saveStrategyScore_resultTupleScheme extends TupleScheme<saveStrategyScore_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveStrategyScore_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveStrategyScore_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStrategyScore_args implements org.apache.thrift.TBase<getStrategyScore_args, getStrategyScore_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStrategyScore_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStrategyScore_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStrategyScore_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStrategyScore_argsTupleSchemeFactory());
    }

    public int strategyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStrategyScore_args.class, metaDataMap);
    }

    public getStrategyScore_args() {
    }

    public getStrategyScore_args(
      int strategyId)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStrategyScore_args(getStrategyScore_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
    }

    public getStrategyScore_args deepCopy() {
      return new getStrategyScore_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public getStrategyScore_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStrategyScore_args)
        return this.equals((getStrategyScore_args)that);
      return false;
    }

    public boolean equals(getStrategyScore_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStrategyScore_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStrategyScore_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStrategyScore_argsStandardSchemeFactory implements SchemeFactory {
      public getStrategyScore_argsStandardScheme getScheme() {
        return new getStrategyScore_argsStandardScheme();
      }
    }

    private static class getStrategyScore_argsStandardScheme extends StandardScheme<getStrategyScore_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStrategyScore_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStrategyScore_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStrategyScore_argsTupleSchemeFactory implements SchemeFactory {
      public getStrategyScore_argsTupleScheme getScheme() {
        return new getStrategyScore_argsTupleScheme();
      }
    }

    private static class getStrategyScore_argsTupleScheme extends TupleScheme<getStrategyScore_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStrategyScore_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStrategyScore_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
      }
    }

  }

  public static class getStrategyScore_result implements org.apache.thrift.TBase<getStrategyScore_result, getStrategyScore_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStrategyScore_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStrategyScore_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStrategyScore_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStrategyScore_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStrategyScore_result.class, metaDataMap);
    }

    public getStrategyScore_result() {
    }

    public getStrategyScore_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStrategyScore_result(getStrategyScore_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getStrategyScore_result deepCopy() {
      return new getStrategyScore_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getStrategyScore_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStrategyScore_result)
        return this.equals((getStrategyScore_result)that);
      return false;
    }

    public boolean equals(getStrategyScore_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStrategyScore_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStrategyScore_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStrategyScore_resultStandardSchemeFactory implements SchemeFactory {
      public getStrategyScore_resultStandardScheme getScheme() {
        return new getStrategyScore_resultStandardScheme();
      }
    }

    private static class getStrategyScore_resultStandardScheme extends StandardScheme<getStrategyScore_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStrategyScore_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStrategyScore_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStrategyScore_resultTupleSchemeFactory implements SchemeFactory {
      public getStrategyScore_resultTupleScheme getScheme() {
        return new getStrategyScore_resultTupleScheme();
      }
    }

    private static class getStrategyScore_resultTupleScheme extends TupleScheme<getStrategyScore_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStrategyScore_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStrategyScore_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveStrategy_args implements org.apache.thrift.TBase<saveStrategy_args, saveStrategy_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveStrategy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveStrategy_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_FIELD_DESC = new org.apache.thrift.protocol.TField("strategy", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveStrategy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveStrategy_argsTupleSchemeFactory());
    }

    public String strategy; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY((short)1, "strategy");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY
            return STRATEGY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY, new org.apache.thrift.meta_data.FieldMetaData("strategy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveStrategy_args.class, metaDataMap);
    }

    public saveStrategy_args() {
    }

    public saveStrategy_args(
      String strategy)
    {
      this();
      this.strategy = strategy;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveStrategy_args(saveStrategy_args other) {
      if (other.isSetStrategy()) {
        this.strategy = other.strategy;
      }
    }

    public saveStrategy_args deepCopy() {
      return new saveStrategy_args(this);
    }

    @Override
    public void clear() {
      this.strategy = null;
    }

    public String getStrategy() {
      return this.strategy;
    }

    public saveStrategy_args setStrategy(String strategy) {
      this.strategy = strategy;
      return this;
    }

    public void unsetStrategy() {
      this.strategy = null;
    }

    /** Returns true if field strategy is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategy() {
      return this.strategy != null;
    }

    public void setStrategyIsSet(boolean value) {
      if (!value) {
        this.strategy = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY:
        if (value == null) {
          unsetStrategy();
        } else {
          setStrategy((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY:
        return getStrategy();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY:
        return isSetStrategy();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveStrategy_args)
        return this.equals((saveStrategy_args)that);
      return false;
    }

    public boolean equals(saveStrategy_args that) {
      if (that == null)
        return false;

      boolean this_present_strategy = true && this.isSetStrategy();
      boolean that_present_strategy = true && that.isSetStrategy();
      if (this_present_strategy || that_present_strategy) {
        if (!(this_present_strategy && that_present_strategy))
          return false;
        if (!this.strategy.equals(that.strategy))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategy = true && (isSetStrategy());
      list.add(present_strategy);
      if (present_strategy)
        list.add(strategy);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveStrategy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategy()).compareTo(other.isSetStrategy());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategy()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy, other.strategy);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveStrategy_args(");
      boolean first = true;

      sb.append("strategy:");
      if (this.strategy == null) {
        sb.append("null");
      } else {
        sb.append(this.strategy);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveStrategy_argsStandardSchemeFactory implements SchemeFactory {
      public saveStrategy_argsStandardScheme getScheme() {
        return new saveStrategy_argsStandardScheme();
      }
    }

    private static class saveStrategy_argsStandardScheme extends StandardScheme<saveStrategy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveStrategy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strategy = iprot.readString();
                struct.setStrategyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveStrategy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.strategy != null) {
          oprot.writeFieldBegin(STRATEGY_FIELD_DESC);
          oprot.writeString(struct.strategy);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveStrategy_argsTupleSchemeFactory implements SchemeFactory {
      public saveStrategy_argsTupleScheme getScheme() {
        return new saveStrategy_argsTupleScheme();
      }
    }

    private static class saveStrategy_argsTupleScheme extends TupleScheme<saveStrategy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveStrategy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategy()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrategy()) {
          oprot.writeString(struct.strategy);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveStrategy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strategy = iprot.readString();
          struct.setStrategyIsSet(true);
        }
      }
    }

  }

  public static class saveStrategy_result implements org.apache.thrift.TBase<saveStrategy_result, saveStrategy_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveStrategy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveStrategy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveStrategy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveStrategy_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveStrategy_result.class, metaDataMap);
    }

    public saveStrategy_result() {
    }

    public saveStrategy_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveStrategy_result(saveStrategy_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public saveStrategy_result deepCopy() {
      return new saveStrategy_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveStrategy_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveStrategy_result)
        return this.equals((saveStrategy_result)that);
      return false;
    }

    public boolean equals(saveStrategy_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveStrategy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveStrategy_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveStrategy_resultStandardSchemeFactory implements SchemeFactory {
      public saveStrategy_resultStandardScheme getScheme() {
        return new saveStrategy_resultStandardScheme();
      }
    }

    private static class saveStrategy_resultStandardScheme extends StandardScheme<saveStrategy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveStrategy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveStrategy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveStrategy_resultTupleSchemeFactory implements SchemeFactory {
      public saveStrategy_resultTupleScheme getScheme() {
        return new saveStrategy_resultTupleScheme();
      }
    }

    private static class saveStrategy_resultTupleScheme extends TupleScheme<saveStrategy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveStrategy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveStrategy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteStrategy_args implements org.apache.thrift.TBase<deleteStrategy_args, deleteStrategy_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteStrategy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteStrategy_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteStrategy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteStrategy_argsTupleSchemeFactory());
    }

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteStrategy_args.class, metaDataMap);
    }

    public deleteStrategy_args() {
    }

    public deleteStrategy_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteStrategy_args(deleteStrategy_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public deleteStrategy_args deepCopy() {
      return new deleteStrategy_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public deleteStrategy_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteStrategy_args)
        return this.equals((deleteStrategy_args)that);
      return false;
    }

    public boolean equals(deleteStrategy_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteStrategy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteStrategy_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteStrategy_argsStandardSchemeFactory implements SchemeFactory {
      public deleteStrategy_argsStandardScheme getScheme() {
        return new deleteStrategy_argsStandardScheme();
      }
    }

    private static class deleteStrategy_argsStandardScheme extends StandardScheme<deleteStrategy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteStrategy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteStrategy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteStrategy_argsTupleSchemeFactory implements SchemeFactory {
      public deleteStrategy_argsTupleScheme getScheme() {
        return new deleteStrategy_argsTupleScheme();
      }
    }

    private static class deleteStrategy_argsTupleScheme extends TupleScheme<deleteStrategy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteStrategy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteStrategy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class deleteStrategy_result implements org.apache.thrift.TBase<deleteStrategy_result, deleteStrategy_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteStrategy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteStrategy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteStrategy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteStrategy_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteStrategy_result.class, metaDataMap);
    }

    public deleteStrategy_result() {
    }

    public deleteStrategy_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteStrategy_result(deleteStrategy_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteStrategy_result deepCopy() {
      return new deleteStrategy_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteStrategy_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteStrategy_result)
        return this.equals((deleteStrategy_result)that);
      return false;
    }

    public boolean equals(deleteStrategy_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteStrategy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteStrategy_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteStrategy_resultStandardSchemeFactory implements SchemeFactory {
      public deleteStrategy_resultStandardScheme getScheme() {
        return new deleteStrategy_resultStandardScheme();
      }
    }

    private static class deleteStrategy_resultStandardScheme extends StandardScheme<deleteStrategy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteStrategy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteStrategy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteStrategy_resultTupleSchemeFactory implements SchemeFactory {
      public deleteStrategy_resultTupleScheme getScheme() {
        return new deleteStrategy_resultTupleScheme();
      }
    }

    private static class deleteStrategy_resultTupleScheme extends TupleScheme<deleteStrategy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteStrategy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteStrategy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateStrategy_args implements org.apache.thrift.TBase<updateStrategy_args, updateStrategy_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateStrategy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStrategy_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_FIELD_DESC = new org.apache.thrift.protocol.TField("strategy", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStrategy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStrategy_argsTupleSchemeFactory());
    }

    public String strategy; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY((short)1, "strategy");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY
            return STRATEGY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY, new org.apache.thrift.meta_data.FieldMetaData("strategy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStrategy_args.class, metaDataMap);
    }

    public updateStrategy_args() {
    }

    public updateStrategy_args(
      String strategy)
    {
      this();
      this.strategy = strategy;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStrategy_args(updateStrategy_args other) {
      if (other.isSetStrategy()) {
        this.strategy = other.strategy;
      }
    }

    public updateStrategy_args deepCopy() {
      return new updateStrategy_args(this);
    }

    @Override
    public void clear() {
      this.strategy = null;
    }

    public String getStrategy() {
      return this.strategy;
    }

    public updateStrategy_args setStrategy(String strategy) {
      this.strategy = strategy;
      return this;
    }

    public void unsetStrategy() {
      this.strategy = null;
    }

    /** Returns true if field strategy is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategy() {
      return this.strategy != null;
    }

    public void setStrategyIsSet(boolean value) {
      if (!value) {
        this.strategy = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY:
        if (value == null) {
          unsetStrategy();
        } else {
          setStrategy((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY:
        return getStrategy();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY:
        return isSetStrategy();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStrategy_args)
        return this.equals((updateStrategy_args)that);
      return false;
    }

    public boolean equals(updateStrategy_args that) {
      if (that == null)
        return false;

      boolean this_present_strategy = true && this.isSetStrategy();
      boolean that_present_strategy = true && that.isSetStrategy();
      if (this_present_strategy || that_present_strategy) {
        if (!(this_present_strategy && that_present_strategy))
          return false;
        if (!this.strategy.equals(that.strategy))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategy = true && (isSetStrategy());
      list.add(present_strategy);
      if (present_strategy)
        list.add(strategy);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateStrategy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategy()).compareTo(other.isSetStrategy());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategy()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy, other.strategy);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStrategy_args(");
      boolean first = true;

      sb.append("strategy:");
      if (this.strategy == null) {
        sb.append("null");
      } else {
        sb.append(this.strategy);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStrategy_argsStandardSchemeFactory implements SchemeFactory {
      public updateStrategy_argsStandardScheme getScheme() {
        return new updateStrategy_argsStandardScheme();
      }
    }

    private static class updateStrategy_argsStandardScheme extends StandardScheme<updateStrategy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStrategy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strategy = iprot.readString();
                struct.setStrategyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStrategy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.strategy != null) {
          oprot.writeFieldBegin(STRATEGY_FIELD_DESC);
          oprot.writeString(struct.strategy);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStrategy_argsTupleSchemeFactory implements SchemeFactory {
      public updateStrategy_argsTupleScheme getScheme() {
        return new updateStrategy_argsTupleScheme();
      }
    }

    private static class updateStrategy_argsTupleScheme extends TupleScheme<updateStrategy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStrategy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategy()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrategy()) {
          oprot.writeString(struct.strategy);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStrategy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strategy = iprot.readString();
          struct.setStrategyIsSet(true);
        }
      }
    }

  }

  public static class updateStrategy_result implements org.apache.thrift.TBase<updateStrategy_result, updateStrategy_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateStrategy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStrategy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStrategy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStrategy_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStrategy_result.class, metaDataMap);
    }

    public updateStrategy_result() {
    }

    public updateStrategy_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStrategy_result(updateStrategy_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateStrategy_result deepCopy() {
      return new updateStrategy_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateStrategy_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStrategy_result)
        return this.equals((updateStrategy_result)that);
      return false;
    }

    public boolean equals(updateStrategy_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateStrategy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStrategy_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStrategy_resultStandardSchemeFactory implements SchemeFactory {
      public updateStrategy_resultStandardScheme getScheme() {
        return new updateStrategy_resultStandardScheme();
      }
    }

    private static class updateStrategy_resultStandardScheme extends StandardScheme<updateStrategy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStrategy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStrategy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStrategy_resultTupleSchemeFactory implements SchemeFactory {
      public updateStrategy_resultTupleScheme getScheme() {
        return new updateStrategy_resultTupleScheme();
      }
    }

    private static class updateStrategy_resultTupleScheme extends TupleScheme<updateStrategy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStrategy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStrategy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStrategy_args implements org.apache.thrift.TBase<getStrategy_args, getStrategy_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStrategy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStrategy_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStrategy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStrategy_argsTupleSchemeFactory());
    }

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStrategy_args.class, metaDataMap);
    }

    public getStrategy_args() {
    }

    public getStrategy_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStrategy_args(getStrategy_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public getStrategy_args deepCopy() {
      return new getStrategy_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public getStrategy_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStrategy_args)
        return this.equals((getStrategy_args)that);
      return false;
    }

    public boolean equals(getStrategy_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStrategy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStrategy_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStrategy_argsStandardSchemeFactory implements SchemeFactory {
      public getStrategy_argsStandardScheme getScheme() {
        return new getStrategy_argsStandardScheme();
      }
    }

    private static class getStrategy_argsStandardScheme extends StandardScheme<getStrategy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStrategy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStrategy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStrategy_argsTupleSchemeFactory implements SchemeFactory {
      public getStrategy_argsTupleScheme getScheme() {
        return new getStrategy_argsTupleScheme();
      }
    }

    private static class getStrategy_argsTupleScheme extends TupleScheme<getStrategy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStrategy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStrategy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class getStrategy_result implements org.apache.thrift.TBase<getStrategy_result, getStrategy_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStrategy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStrategy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStrategy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStrategy_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStrategy_result.class, metaDataMap);
    }

    public getStrategy_result() {
    }

    public getStrategy_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStrategy_result(getStrategy_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getStrategy_result deepCopy() {
      return new getStrategy_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getStrategy_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStrategy_result)
        return this.equals((getStrategy_result)that);
      return false;
    }

    public boolean equals(getStrategy_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStrategy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStrategy_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStrategy_resultStandardSchemeFactory implements SchemeFactory {
      public getStrategy_resultStandardScheme getScheme() {
        return new getStrategy_resultStandardScheme();
      }
    }

    private static class getStrategy_resultStandardScheme extends StandardScheme<getStrategy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStrategy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStrategy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStrategy_resultTupleSchemeFactory implements SchemeFactory {
      public getStrategy_resultTupleScheme getScheme() {
        return new getStrategy_resultTupleScheme();
      }
    }

    private static class getStrategy_resultTupleScheme extends TupleScheme<getStrategy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStrategy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStrategy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryStrategyByPage_args implements org.apache.thrift.TBase<queryStrategyByPage_args, queryStrategyByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryStrategyByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStrategyByPage_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField DISPLAY_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("displayStatus", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField RUN_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("runStatus", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PAGE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("pageIndex", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStrategyByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStrategyByPage_argsTupleSchemeFactory());
    }

    public int id; // required
    public int type; // required
    public int displayStatus; // required
    public int runStatus; // required
    public int pageIndex; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      TYPE((short)2, "type"),
      DISPLAY_STATUS((short)3, "displayStatus"),
      RUN_STATUS((short)4, "runStatus"),
      PAGE_INDEX((short)5, "pageIndex"),
      PAGE_SIZE((short)6, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // TYPE
            return TYPE;
          case 3: // DISPLAY_STATUS
            return DISPLAY_STATUS;
          case 4: // RUN_STATUS
            return RUN_STATUS;
          case 5: // PAGE_INDEX
            return PAGE_INDEX;
          case 6: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __TYPE_ISSET_ID = 1;
    private static final int __DISPLAYSTATUS_ISSET_ID = 2;
    private static final int __RUNSTATUS_ISSET_ID = 3;
    private static final int __PAGEINDEX_ISSET_ID = 4;
    private static final int __PAGESIZE_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DISPLAY_STATUS, new org.apache.thrift.meta_data.FieldMetaData("displayStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RUN_STATUS, new org.apache.thrift.meta_data.FieldMetaData("runStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("pageIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStrategyByPage_args.class, metaDataMap);
    }

    public queryStrategyByPage_args() {
    }

    public queryStrategyByPage_args(
      int id,
      int type,
      int displayStatus,
      int runStatus,
      int pageIndex,
      int pageSize)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.type = type;
      setTypeIsSet(true);
      this.displayStatus = displayStatus;
      setDisplayStatusIsSet(true);
      this.runStatus = runStatus;
      setRunStatusIsSet(true);
      this.pageIndex = pageIndex;
      setPageIndexIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStrategyByPage_args(queryStrategyByPage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      this.type = other.type;
      this.displayStatus = other.displayStatus;
      this.runStatus = other.runStatus;
      this.pageIndex = other.pageIndex;
      this.pageSize = other.pageSize;
    }

    public queryStrategyByPage_args deepCopy() {
      return new queryStrategyByPage_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      setTypeIsSet(false);
      this.type = 0;
      setDisplayStatusIsSet(false);
      this.displayStatus = 0;
      setRunStatusIsSet(false);
      this.runStatus = 0;
      setPageIndexIsSet(false);
      this.pageIndex = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public int getId() {
      return this.id;
    }

    public queryStrategyByPage_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public int getType() {
      return this.type;
    }

    public queryStrategyByPage_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public int getDisplayStatus() {
      return this.displayStatus;
    }

    public queryStrategyByPage_args setDisplayStatus(int displayStatus) {
      this.displayStatus = displayStatus;
      setDisplayStatusIsSet(true);
      return this;
    }

    public void unsetDisplayStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISPLAYSTATUS_ISSET_ID);
    }

    /** Returns true if field displayStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __DISPLAYSTATUS_ISSET_ID);
    }

    public void setDisplayStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISPLAYSTATUS_ISSET_ID, value);
    }

    public int getRunStatus() {
      return this.runStatus;
    }

    public queryStrategyByPage_args setRunStatus(int runStatus) {
      this.runStatus = runStatus;
      setRunStatusIsSet(true);
      return this;
    }

    public void unsetRunStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUNSTATUS_ISSET_ID);
    }

    /** Returns true if field runStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetRunStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __RUNSTATUS_ISSET_ID);
    }

    public void setRunStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUNSTATUS_ISSET_ID, value);
    }

    public int getPageIndex() {
      return this.pageIndex;
    }

    public queryStrategyByPage_args setPageIndex(int pageIndex) {
      this.pageIndex = pageIndex;
      setPageIndexIsSet(true);
      return this;
    }

    public void unsetPageIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
    }

    /** Returns true if field pageIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetPageIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
    }

    public void setPageIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGEINDEX_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public queryStrategyByPage_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case DISPLAY_STATUS:
        if (value == null) {
          unsetDisplayStatus();
        } else {
          setDisplayStatus((Integer)value);
        }
        break;

      case RUN_STATUS:
        if (value == null) {
          unsetRunStatus();
        } else {
          setRunStatus((Integer)value);
        }
        break;

      case PAGE_INDEX:
        if (value == null) {
          unsetPageIndex();
        } else {
          setPageIndex((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case TYPE:
        return getType();

      case DISPLAY_STATUS:
        return getDisplayStatus();

      case RUN_STATUS:
        return getRunStatus();

      case PAGE_INDEX:
        return getPageIndex();

      case PAGE_SIZE:
        return getPageSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case TYPE:
        return isSetType();
      case DISPLAY_STATUS:
        return isSetDisplayStatus();
      case RUN_STATUS:
        return isSetRunStatus();
      case PAGE_INDEX:
        return isSetPageIndex();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStrategyByPage_args)
        return this.equals((queryStrategyByPage_args)that);
      return false;
    }

    public boolean equals(queryStrategyByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_displayStatus = true;
      boolean that_present_displayStatus = true;
      if (this_present_displayStatus || that_present_displayStatus) {
        if (!(this_present_displayStatus && that_present_displayStatus))
          return false;
        if (this.displayStatus != that.displayStatus)
          return false;
      }

      boolean this_present_runStatus = true;
      boolean that_present_runStatus = true;
      if (this_present_runStatus || that_present_runStatus) {
        if (!(this_present_runStatus && that_present_runStatus))
          return false;
        if (this.runStatus != that.runStatus)
          return false;
      }

      boolean this_present_pageIndex = true;
      boolean that_present_pageIndex = true;
      if (this_present_pageIndex || that_present_pageIndex) {
        if (!(this_present_pageIndex && that_present_pageIndex))
          return false;
        if (this.pageIndex != that.pageIndex)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_displayStatus = true;
      list.add(present_displayStatus);
      if (present_displayStatus)
        list.add(displayStatus);

      boolean present_runStatus = true;
      list.add(present_runStatus);
      if (present_runStatus)
        list.add(runStatus);

      boolean present_pageIndex = true;
      list.add(present_pageIndex);
      if (present_pageIndex)
        list.add(pageIndex);

      boolean present_pageSize = true;
      list.add(present_pageSize);
      if (present_pageSize)
        list.add(pageSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryStrategyByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDisplayStatus()).compareTo(other.isSetDisplayStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayStatus, other.displayStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRunStatus()).compareTo(other.isSetRunStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRunStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runStatus, other.runStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageIndex()).compareTo(other.isSetPageIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageIndex, other.pageIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStrategyByPage_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayStatus:");
      sb.append(this.displayStatus);
      first = false;
      if (!first) sb.append(", ");
      sb.append("runStatus:");
      sb.append(this.runStatus);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageIndex:");
      sb.append(this.pageIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStrategyByPage_argsStandardSchemeFactory implements SchemeFactory {
      public queryStrategyByPage_argsStandardScheme getScheme() {
        return new queryStrategyByPage_argsStandardScheme();
      }
    }

    private static class queryStrategyByPage_argsStandardScheme extends StandardScheme<queryStrategyByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStrategyByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DISPLAY_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.displayStatus = iprot.readI32();
                struct.setDisplayStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RUN_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.runStatus = iprot.readI32();
                struct.setRunStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PAGE_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageIndex = iprot.readI32();
                struct.setPageIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStrategyByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DISPLAY_STATUS_FIELD_DESC);
        oprot.writeI32(struct.displayStatus);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RUN_STATUS_FIELD_DESC);
        oprot.writeI32(struct.runStatus);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_INDEX_FIELD_DESC);
        oprot.writeI32(struct.pageIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStrategyByPage_argsTupleSchemeFactory implements SchemeFactory {
      public queryStrategyByPage_argsTupleScheme getScheme() {
        return new queryStrategyByPage_argsTupleScheme();
      }
    }

    private static class queryStrategyByPage_argsTupleScheme extends TupleScheme<queryStrategyByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStrategyByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        if (struct.isSetDisplayStatus()) {
          optionals.set(2);
        }
        if (struct.isSetRunStatus()) {
          optionals.set(3);
        }
        if (struct.isSetPageIndex()) {
          optionals.set(4);
        }
        if (struct.isSetPageSize()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetDisplayStatus()) {
          oprot.writeI32(struct.displayStatus);
        }
        if (struct.isSetRunStatus()) {
          oprot.writeI32(struct.runStatus);
        }
        if (struct.isSetPageIndex()) {
          oprot.writeI32(struct.pageIndex);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStrategyByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.displayStatus = iprot.readI32();
          struct.setDisplayStatusIsSet(true);
        }
        if (incoming.get(3)) {
          struct.runStatus = iprot.readI32();
          struct.setRunStatusIsSet(true);
        }
        if (incoming.get(4)) {
          struct.pageIndex = iprot.readI32();
          struct.setPageIndexIsSet(true);
        }
        if (incoming.get(5)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class queryStrategyByPage_result implements org.apache.thrift.TBase<queryStrategyByPage_result, queryStrategyByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryStrategyByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStrategyByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStrategyByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStrategyByPage_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStrategyByPage_result.class, metaDataMap);
    }

    public queryStrategyByPage_result() {
    }

    public queryStrategyByPage_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStrategyByPage_result(queryStrategyByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryStrategyByPage_result deepCopy() {
      return new queryStrategyByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryStrategyByPage_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStrategyByPage_result)
        return this.equals((queryStrategyByPage_result)that);
      return false;
    }

    public boolean equals(queryStrategyByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryStrategyByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStrategyByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStrategyByPage_resultStandardSchemeFactory implements SchemeFactory {
      public queryStrategyByPage_resultStandardScheme getScheme() {
        return new queryStrategyByPage_resultStandardScheme();
      }
    }

    private static class queryStrategyByPage_resultStandardScheme extends StandardScheme<queryStrategyByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStrategyByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStrategyByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStrategyByPage_resultTupleSchemeFactory implements SchemeFactory {
      public queryStrategyByPage_resultTupleScheme getScheme() {
        return new queryStrategyByPage_resultTupleScheme();
      }
    }

    private static class queryStrategyByPage_resultTupleScheme extends TupleScheme<queryStrategyByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStrategyByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStrategyByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateStrategyStatus_args implements org.apache.thrift.TBase<updateStrategyStatus_args, updateStrategyStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateStrategyStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStrategyStatus_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStrategyStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStrategyStatus_argsTupleSchemeFactory());
    }

    public int id; // required
    public int status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      STATUS((short)2, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __STATUS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStrategyStatus_args.class, metaDataMap);
    }

    public updateStrategyStatus_args() {
    }

    public updateStrategyStatus_args(
      int id,
      int status)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.status = status;
      setStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStrategyStatus_args(updateStrategyStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      this.status = other.status;
    }

    public updateStrategyStatus_args deepCopy() {
      return new updateStrategyStatus_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      setStatusIsSet(false);
      this.status = 0;
    }

    public int getId() {
      return this.id;
    }

    public updateStrategyStatus_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public int getStatus() {
      return this.status;
    }

    public updateStrategyStatus_args setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStrategyStatus_args)
        return this.equals((updateStrategyStatus_args)that);
      return false;
    }

    public boolean equals(updateStrategyStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_status = true;
      list.add(present_status);
      if (present_status)
        list.add(status);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateStrategyStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStrategyStatus_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStrategyStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateStrategyStatus_argsStandardScheme getScheme() {
        return new updateStrategyStatus_argsStandardScheme();
      }
    }

    private static class updateStrategyStatus_argsStandardScheme extends StandardScheme<updateStrategyStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStrategyStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStrategyStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStrategyStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateStrategyStatus_argsTupleScheme getScheme() {
        return new updateStrategyStatus_argsTupleScheme();
      }
    }

    private static class updateStrategyStatus_argsTupleScheme extends TupleScheme<updateStrategyStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStrategyStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetStatus()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStrategyStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class updateStrategyStatus_result implements org.apache.thrift.TBase<updateStrategyStatus_result, updateStrategyStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateStrategyStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStrategyStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStrategyStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStrategyStatus_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStrategyStatus_result.class, metaDataMap);
    }

    public updateStrategyStatus_result() {
    }

    public updateStrategyStatus_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStrategyStatus_result(updateStrategyStatus_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateStrategyStatus_result deepCopy() {
      return new updateStrategyStatus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateStrategyStatus_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStrategyStatus_result)
        return this.equals((updateStrategyStatus_result)that);
      return false;
    }

    public boolean equals(updateStrategyStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateStrategyStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStrategyStatus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStrategyStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateStrategyStatus_resultStandardScheme getScheme() {
        return new updateStrategyStatus_resultStandardScheme();
      }
    }

    private static class updateStrategyStatus_resultStandardScheme extends StandardScheme<updateStrategyStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStrategyStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStrategyStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStrategyStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateStrategyStatus_resultTupleScheme getScheme() {
        return new updateStrategyStatus_resultTupleScheme();
      }
    }

    private static class updateStrategyStatus_resultTupleScheme extends TupleScheme<updateStrategyStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStrategyStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStrategyStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveStrategyUser_args implements org.apache.thrift.TBase<saveStrategyUser_args, saveStrategyUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveStrategyUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveStrategyUser_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_FIELD_DESC = new org.apache.thrift.protocol.TField("strategy", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveStrategyUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveStrategyUser_argsTupleSchemeFactory());
    }

    public String strategy; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY((short)1, "strategy");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY
            return STRATEGY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY, new org.apache.thrift.meta_data.FieldMetaData("strategy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveStrategyUser_args.class, metaDataMap);
    }

    public saveStrategyUser_args() {
    }

    public saveStrategyUser_args(
      String strategy)
    {
      this();
      this.strategy = strategy;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveStrategyUser_args(saveStrategyUser_args other) {
      if (other.isSetStrategy()) {
        this.strategy = other.strategy;
      }
    }

    public saveStrategyUser_args deepCopy() {
      return new saveStrategyUser_args(this);
    }

    @Override
    public void clear() {
      this.strategy = null;
    }

    public String getStrategy() {
      return this.strategy;
    }

    public saveStrategyUser_args setStrategy(String strategy) {
      this.strategy = strategy;
      return this;
    }

    public void unsetStrategy() {
      this.strategy = null;
    }

    /** Returns true if field strategy is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategy() {
      return this.strategy != null;
    }

    public void setStrategyIsSet(boolean value) {
      if (!value) {
        this.strategy = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY:
        if (value == null) {
          unsetStrategy();
        } else {
          setStrategy((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY:
        return getStrategy();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY:
        return isSetStrategy();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveStrategyUser_args)
        return this.equals((saveStrategyUser_args)that);
      return false;
    }

    public boolean equals(saveStrategyUser_args that) {
      if (that == null)
        return false;

      boolean this_present_strategy = true && this.isSetStrategy();
      boolean that_present_strategy = true && that.isSetStrategy();
      if (this_present_strategy || that_present_strategy) {
        if (!(this_present_strategy && that_present_strategy))
          return false;
        if (!this.strategy.equals(that.strategy))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategy = true && (isSetStrategy());
      list.add(present_strategy);
      if (present_strategy)
        list.add(strategy);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveStrategyUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategy()).compareTo(other.isSetStrategy());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategy()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy, other.strategy);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveStrategyUser_args(");
      boolean first = true;

      sb.append("strategy:");
      if (this.strategy == null) {
        sb.append("null");
      } else {
        sb.append(this.strategy);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveStrategyUser_argsStandardSchemeFactory implements SchemeFactory {
      public saveStrategyUser_argsStandardScheme getScheme() {
        return new saveStrategyUser_argsStandardScheme();
      }
    }

    private static class saveStrategyUser_argsStandardScheme extends StandardScheme<saveStrategyUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveStrategyUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strategy = iprot.readString();
                struct.setStrategyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveStrategyUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.strategy != null) {
          oprot.writeFieldBegin(STRATEGY_FIELD_DESC);
          oprot.writeString(struct.strategy);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveStrategyUser_argsTupleSchemeFactory implements SchemeFactory {
      public saveStrategyUser_argsTupleScheme getScheme() {
        return new saveStrategyUser_argsTupleScheme();
      }
    }

    private static class saveStrategyUser_argsTupleScheme extends TupleScheme<saveStrategyUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveStrategyUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategy()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrategy()) {
          oprot.writeString(struct.strategy);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveStrategyUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strategy = iprot.readString();
          struct.setStrategyIsSet(true);
        }
      }
    }

  }

  public static class saveStrategyUser_result implements org.apache.thrift.TBase<saveStrategyUser_result, saveStrategyUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveStrategyUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveStrategyUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveStrategyUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveStrategyUser_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveStrategyUser_result.class, metaDataMap);
    }

    public saveStrategyUser_result() {
    }

    public saveStrategyUser_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveStrategyUser_result(saveStrategyUser_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public saveStrategyUser_result deepCopy() {
      return new saveStrategyUser_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveStrategyUser_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveStrategyUser_result)
        return this.equals((saveStrategyUser_result)that);
      return false;
    }

    public boolean equals(saveStrategyUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveStrategyUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveStrategyUser_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveStrategyUser_resultStandardSchemeFactory implements SchemeFactory {
      public saveStrategyUser_resultStandardScheme getScheme() {
        return new saveStrategyUser_resultStandardScheme();
      }
    }

    private static class saveStrategyUser_resultStandardScheme extends StandardScheme<saveStrategyUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveStrategyUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveStrategyUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveStrategyUser_resultTupleSchemeFactory implements SchemeFactory {
      public saveStrategyUser_resultTupleScheme getScheme() {
        return new saveStrategyUser_resultTupleScheme();
      }
    }

    private static class saveStrategyUser_resultTupleScheme extends TupleScheme<saveStrategyUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveStrategyUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveStrategyUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class expandExpireTime_args implements org.apache.thrift.TBase<expandExpireTime_args, expandExpireTime_args._Fields>, java.io.Serializable, Cloneable, Comparable<expandExpireTime_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("expandExpireTime_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("days", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("payType", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new expandExpireTime_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new expandExpireTime_argsTupleSchemeFactory());
    }

    public int userId; // required
    public int strategyId; // required
    public int days; // required
    public String payType; // required
    public double price; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      STRATEGY_ID((short)2, "strategyId"),
      DAYS((short)3, "days"),
      PAY_TYPE((short)4, "payType"),
      PRICE((short)5, "price");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // STRATEGY_ID
            return STRATEGY_ID;
          case 3: // DAYS
            return DAYS;
          case 4: // PAY_TYPE
            return PAY_TYPE;
          case 5: // PRICE
            return PRICE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __STRATEGYID_ISSET_ID = 1;
    private static final int __DAYS_ISSET_ID = 2;
    private static final int __PRICE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DAYS, new org.apache.thrift.meta_data.FieldMetaData("days", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("payType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(expandExpireTime_args.class, metaDataMap);
    }

    public expandExpireTime_args() {
    }

    public expandExpireTime_args(
      int userId,
      int strategyId,
      int days,
      String payType,
      double price)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.days = days;
      setDaysIsSet(true);
      this.payType = payType;
      this.price = price;
      setPriceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expandExpireTime_args(expandExpireTime_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.strategyId = other.strategyId;
      this.days = other.days;
      if (other.isSetPayType()) {
        this.payType = other.payType;
      }
      this.price = other.price;
    }

    public expandExpireTime_args deepCopy() {
      return new expandExpireTime_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setDaysIsSet(false);
      this.days = 0;
      this.payType = null;
      setPriceIsSet(false);
      this.price = 0.0;
    }

    public int getUserId() {
      return this.userId;
    }

    public expandExpireTime_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public expandExpireTime_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public int getDays() {
      return this.days;
    }

    public expandExpireTime_args setDays(int days) {
      this.days = days;
      setDaysIsSet(true);
      return this;
    }

    public void unsetDays() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAYS_ISSET_ID);
    }

    /** Returns true if field days is set (has been assigned a value) and false otherwise */
    public boolean isSetDays() {
      return EncodingUtils.testBit(__isset_bitfield, __DAYS_ISSET_ID);
    }

    public void setDaysIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAYS_ISSET_ID, value);
    }

    public String getPayType() {
      return this.payType;
    }

    public expandExpireTime_args setPayType(String payType) {
      this.payType = payType;
      return this;
    }

    public void unsetPayType() {
      this.payType = null;
    }

    /** Returns true if field payType is set (has been assigned a value) and false otherwise */
    public boolean isSetPayType() {
      return this.payType != null;
    }

    public void setPayTypeIsSet(boolean value) {
      if (!value) {
        this.payType = null;
      }
    }

    public double getPrice() {
      return this.price;
    }

    public expandExpireTime_args setPrice(double price) {
      this.price = price;
      setPriceIsSet(true);
      return this;
    }

    public void unsetPrice() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
    }

    /** Returns true if field price is set (has been assigned a value) and false otherwise */
    public boolean isSetPrice() {
      return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
    }

    public void setPriceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case DAYS:
        if (value == null) {
          unsetDays();
        } else {
          setDays((Integer)value);
        }
        break;

      case PAY_TYPE:
        if (value == null) {
          unsetPayType();
        } else {
          setPayType((String)value);
        }
        break;

      case PRICE:
        if (value == null) {
          unsetPrice();
        } else {
          setPrice((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case STRATEGY_ID:
        return getStrategyId();

      case DAYS:
        return getDays();

      case PAY_TYPE:
        return getPayType();

      case PRICE:
        return getPrice();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case STRATEGY_ID:
        return isSetStrategyId();
      case DAYS:
        return isSetDays();
      case PAY_TYPE:
        return isSetPayType();
      case PRICE:
        return isSetPrice();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expandExpireTime_args)
        return this.equals((expandExpireTime_args)that);
      return false;
    }

    public boolean equals(expandExpireTime_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_days = true;
      boolean that_present_days = true;
      if (this_present_days || that_present_days) {
        if (!(this_present_days && that_present_days))
          return false;
        if (this.days != that.days)
          return false;
      }

      boolean this_present_payType = true && this.isSetPayType();
      boolean that_present_payType = true && that.isSetPayType();
      if (this_present_payType || that_present_payType) {
        if (!(this_present_payType && that_present_payType))
          return false;
        if (!this.payType.equals(that.payType))
          return false;
      }

      boolean this_present_price = true;
      boolean that_present_price = true;
      if (this_present_price || that_present_price) {
        if (!(this_present_price && that_present_price))
          return false;
        if (this.price != that.price)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_days = true;
      list.add(present_days);
      if (present_days)
        list.add(days);

      boolean present_payType = true && (isSetPayType());
      list.add(present_payType);
      if (present_payType)
        list.add(payType);

      boolean present_price = true;
      list.add(present_price);
      if (present_price)
        list.add(price);

      return list.hashCode();
    }

    @Override
    public int compareTo(expandExpireTime_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDays()).compareTo(other.isSetDays());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDays()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.days, other.days);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPayType()).compareTo(other.isSetPayType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPayType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payType, other.payType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrice()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("expandExpireTime_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("days:");
      sb.append(this.days);
      first = false;
      if (!first) sb.append(", ");
      sb.append("payType:");
      if (this.payType == null) {
        sb.append("null");
      } else {
        sb.append(this.payType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("price:");
      sb.append(this.price);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class expandExpireTime_argsStandardSchemeFactory implements SchemeFactory {
      public expandExpireTime_argsStandardScheme getScheme() {
        return new expandExpireTime_argsStandardScheme();
      }
    }

    private static class expandExpireTime_argsStandardScheme extends StandardScheme<expandExpireTime_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, expandExpireTime_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DAYS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.days = iprot.readI32();
                struct.setDaysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAY_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.payType = iprot.readString();
                struct.setPayTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PRICE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.price = iprot.readDouble();
                struct.setPriceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, expandExpireTime_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DAYS_FIELD_DESC);
        oprot.writeI32(struct.days);
        oprot.writeFieldEnd();
        if (struct.payType != null) {
          oprot.writeFieldBegin(PAY_TYPE_FIELD_DESC);
          oprot.writeString(struct.payType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeDouble(struct.price);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class expandExpireTime_argsTupleSchemeFactory implements SchemeFactory {
      public expandExpireTime_argsTupleScheme getScheme() {
        return new expandExpireTime_argsTupleScheme();
      }
    }

    private static class expandExpireTime_argsTupleScheme extends TupleScheme<expandExpireTime_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, expandExpireTime_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetStrategyId()) {
          optionals.set(1);
        }
        if (struct.isSetDays()) {
          optionals.set(2);
        }
        if (struct.isSetPayType()) {
          optionals.set(3);
        }
        if (struct.isSetPrice()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetDays()) {
          oprot.writeI32(struct.days);
        }
        if (struct.isSetPayType()) {
          oprot.writeString(struct.payType);
        }
        if (struct.isSetPrice()) {
          oprot.writeDouble(struct.price);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, expandExpireTime_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.days = iprot.readI32();
          struct.setDaysIsSet(true);
        }
        if (incoming.get(3)) {
          struct.payType = iprot.readString();
          struct.setPayTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.price = iprot.readDouble();
          struct.setPriceIsSet(true);
        }
      }
    }

  }

  public static class expandExpireTime_result implements org.apache.thrift.TBase<expandExpireTime_result, expandExpireTime_result._Fields>, java.io.Serializable, Cloneable, Comparable<expandExpireTime_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("expandExpireTime_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new expandExpireTime_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new expandExpireTime_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(expandExpireTime_result.class, metaDataMap);
    }

    public expandExpireTime_result() {
    }

    public expandExpireTime_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expandExpireTime_result(expandExpireTime_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public expandExpireTime_result deepCopy() {
      return new expandExpireTime_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public expandExpireTime_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expandExpireTime_result)
        return this.equals((expandExpireTime_result)that);
      return false;
    }

    public boolean equals(expandExpireTime_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(expandExpireTime_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("expandExpireTime_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class expandExpireTime_resultStandardSchemeFactory implements SchemeFactory {
      public expandExpireTime_resultStandardScheme getScheme() {
        return new expandExpireTime_resultStandardScheme();
      }
    }

    private static class expandExpireTime_resultStandardScheme extends StandardScheme<expandExpireTime_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, expandExpireTime_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, expandExpireTime_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class expandExpireTime_resultTupleSchemeFactory implements SchemeFactory {
      public expandExpireTime_resultTupleScheme getScheme() {
        return new expandExpireTime_resultTupleScheme();
      }
    }

    private static class expandExpireTime_resultTupleScheme extends TupleScheme<expandExpireTime_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, expandExpireTime_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, expandExpireTime_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStrategyUser_args implements org.apache.thrift.TBase<getStrategyUser_args, getStrategyUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStrategyUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStrategyUser_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStrategyUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStrategyUser_argsTupleSchemeFactory());
    }

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStrategyUser_args.class, metaDataMap);
    }

    public getStrategyUser_args() {
    }

    public getStrategyUser_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStrategyUser_args(getStrategyUser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public getStrategyUser_args deepCopy() {
      return new getStrategyUser_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public getStrategyUser_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStrategyUser_args)
        return this.equals((getStrategyUser_args)that);
      return false;
    }

    public boolean equals(getStrategyUser_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStrategyUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStrategyUser_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStrategyUser_argsStandardSchemeFactory implements SchemeFactory {
      public getStrategyUser_argsStandardScheme getScheme() {
        return new getStrategyUser_argsStandardScheme();
      }
    }

    private static class getStrategyUser_argsStandardScheme extends StandardScheme<getStrategyUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStrategyUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStrategyUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStrategyUser_argsTupleSchemeFactory implements SchemeFactory {
      public getStrategyUser_argsTupleScheme getScheme() {
        return new getStrategyUser_argsTupleScheme();
      }
    }

    private static class getStrategyUser_argsTupleScheme extends TupleScheme<getStrategyUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStrategyUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStrategyUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class getStrategyUser_result implements org.apache.thrift.TBase<getStrategyUser_result, getStrategyUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStrategyUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStrategyUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStrategyUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStrategyUser_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStrategyUser_result.class, metaDataMap);
    }

    public getStrategyUser_result() {
    }

    public getStrategyUser_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStrategyUser_result(getStrategyUser_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getStrategyUser_result deepCopy() {
      return new getStrategyUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getStrategyUser_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStrategyUser_result)
        return this.equals((getStrategyUser_result)that);
      return false;
    }

    public boolean equals(getStrategyUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStrategyUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStrategyUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStrategyUser_resultStandardSchemeFactory implements SchemeFactory {
      public getStrategyUser_resultStandardScheme getScheme() {
        return new getStrategyUser_resultStandardScheme();
      }
    }

    private static class getStrategyUser_resultStandardScheme extends StandardScheme<getStrategyUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStrategyUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStrategyUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStrategyUser_resultTupleSchemeFactory implements SchemeFactory {
      public getStrategyUser_resultTupleScheme getScheme() {
        return new getStrategyUser_resultTupleScheme();
      }
    }

    private static class getStrategyUser_resultTupleScheme extends TupleScheme<getStrategyUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStrategyUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStrategyUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findStrategyByUserId_args implements org.apache.thrift.TBase<findStrategyByUserId_args, findStrategyByUserId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findStrategyByUserId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStrategyByUserId_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField EXPIRE_FIELD_DESC = new org.apache.thrift.protocol.TField("expire", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStrategyByUserId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStrategyByUserId_argsTupleSchemeFactory());
    }

    public int userId; // required
    public int expire; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      EXPIRE((short)2, "expire");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // EXPIRE
            return EXPIRE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __EXPIRE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EXPIRE, new org.apache.thrift.meta_data.FieldMetaData("expire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStrategyByUserId_args.class, metaDataMap);
    }

    public findStrategyByUserId_args() {
    }

    public findStrategyByUserId_args(
      int userId,
      int expire)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.expire = expire;
      setExpireIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStrategyByUserId_args(findStrategyByUserId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.expire = other.expire;
    }

    public findStrategyByUserId_args deepCopy() {
      return new findStrategyByUserId_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setExpireIsSet(false);
      this.expire = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public findStrategyByUserId_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getExpire() {
      return this.expire;
    }

    public findStrategyByUserId_args setExpire(int expire) {
      this.expire = expire;
      setExpireIsSet(true);
      return this;
    }

    public void unsetExpire() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIRE_ISSET_ID);
    }

    /** Returns true if field expire is set (has been assigned a value) and false otherwise */
    public boolean isSetExpire() {
      return EncodingUtils.testBit(__isset_bitfield, __EXPIRE_ISSET_ID);
    }

    public void setExpireIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIRE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case EXPIRE:
        if (value == null) {
          unsetExpire();
        } else {
          setExpire((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case EXPIRE:
        return getExpire();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case EXPIRE:
        return isSetExpire();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStrategyByUserId_args)
        return this.equals((findStrategyByUserId_args)that);
      return false;
    }

    public boolean equals(findStrategyByUserId_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_expire = true;
      boolean that_present_expire = true;
      if (this_present_expire || that_present_expire) {
        if (!(this_present_expire && that_present_expire))
          return false;
        if (this.expire != that.expire)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_expire = true;
      list.add(present_expire);
      if (present_expire)
        list.add(expire);

      return list.hashCode();
    }

    @Override
    public int compareTo(findStrategyByUserId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExpire()).compareTo(other.isSetExpire());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpire()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expire, other.expire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStrategyByUserId_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("expire:");
      sb.append(this.expire);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStrategyByUserId_argsStandardSchemeFactory implements SchemeFactory {
      public findStrategyByUserId_argsStandardScheme getScheme() {
        return new findStrategyByUserId_argsStandardScheme();
      }
    }

    private static class findStrategyByUserId_argsStandardScheme extends StandardScheme<findStrategyByUserId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStrategyByUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXPIRE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.expire = iprot.readI32();
                struct.setExpireIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStrategyByUserId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(EXPIRE_FIELD_DESC);
        oprot.writeI32(struct.expire);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStrategyByUserId_argsTupleSchemeFactory implements SchemeFactory {
      public findStrategyByUserId_argsTupleScheme getScheme() {
        return new findStrategyByUserId_argsTupleScheme();
      }
    }

    private static class findStrategyByUserId_argsTupleScheme extends TupleScheme<findStrategyByUserId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStrategyByUserId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetExpire()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetExpire()) {
          oprot.writeI32(struct.expire);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStrategyByUserId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.expire = iprot.readI32();
          struct.setExpireIsSet(true);
        }
      }
    }

  }

  public static class findStrategyByUserId_result implements org.apache.thrift.TBase<findStrategyByUserId_result, findStrategyByUserId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findStrategyByUserId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStrategyByUserId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStrategyByUserId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStrategyByUserId_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStrategyByUserId_result.class, metaDataMap);
    }

    public findStrategyByUserId_result() {
    }

    public findStrategyByUserId_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStrategyByUserId_result(findStrategyByUserId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public findStrategyByUserId_result deepCopy() {
      return new findStrategyByUserId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findStrategyByUserId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStrategyByUserId_result)
        return this.equals((findStrategyByUserId_result)that);
      return false;
    }

    public boolean equals(findStrategyByUserId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findStrategyByUserId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStrategyByUserId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStrategyByUserId_resultStandardSchemeFactory implements SchemeFactory {
      public findStrategyByUserId_resultStandardScheme getScheme() {
        return new findStrategyByUserId_resultStandardScheme();
      }
    }

    private static class findStrategyByUserId_resultStandardScheme extends StandardScheme<findStrategyByUserId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStrategyByUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStrategyByUserId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStrategyByUserId_resultTupleSchemeFactory implements SchemeFactory {
      public findStrategyByUserId_resultTupleScheme getScheme() {
        return new findStrategyByUserId_resultTupleScheme();
      }
    }

    private static class findStrategyByUserId_resultTupleScheme extends TupleScheme<findStrategyByUserId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStrategyByUserId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStrategyByUserId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryStrategyUserByPage_args implements org.apache.thrift.TBase<queryStrategyUserByPage_args, queryStrategyUserByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryStrategyUserByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStrategyUserByPage_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("pageIndex", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStrategyUserByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStrategyUserByPage_argsTupleSchemeFactory());
    }

    public int userId; // required
    public int strategyId; // required
    public int pageIndex; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      STRATEGY_ID((short)2, "strategyId"),
      PAGE_INDEX((short)3, "pageIndex"),
      PAGE_SIZE((short)4, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // STRATEGY_ID
            return STRATEGY_ID;
          case 3: // PAGE_INDEX
            return PAGE_INDEX;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __STRATEGYID_ISSET_ID = 1;
    private static final int __PAGEINDEX_ISSET_ID = 2;
    private static final int __PAGESIZE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("pageIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStrategyUserByPage_args.class, metaDataMap);
    }

    public queryStrategyUserByPage_args() {
    }

    public queryStrategyUserByPage_args(
      int userId,
      int strategyId,
      int pageIndex,
      int pageSize)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.pageIndex = pageIndex;
      setPageIndexIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStrategyUserByPage_args(queryStrategyUserByPage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.strategyId = other.strategyId;
      this.pageIndex = other.pageIndex;
      this.pageSize = other.pageSize;
    }

    public queryStrategyUserByPage_args deepCopy() {
      return new queryStrategyUserByPage_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setPageIndexIsSet(false);
      this.pageIndex = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public queryStrategyUserByPage_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public queryStrategyUserByPage_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public int getPageIndex() {
      return this.pageIndex;
    }

    public queryStrategyUserByPage_args setPageIndex(int pageIndex) {
      this.pageIndex = pageIndex;
      setPageIndexIsSet(true);
      return this;
    }

    public void unsetPageIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
    }

    /** Returns true if field pageIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetPageIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
    }

    public void setPageIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGEINDEX_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public queryStrategyUserByPage_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case PAGE_INDEX:
        if (value == null) {
          unsetPageIndex();
        } else {
          setPageIndex((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case STRATEGY_ID:
        return getStrategyId();

      case PAGE_INDEX:
        return getPageIndex();

      case PAGE_SIZE:
        return getPageSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case STRATEGY_ID:
        return isSetStrategyId();
      case PAGE_INDEX:
        return isSetPageIndex();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStrategyUserByPage_args)
        return this.equals((queryStrategyUserByPage_args)that);
      return false;
    }

    public boolean equals(queryStrategyUserByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_pageIndex = true;
      boolean that_present_pageIndex = true;
      if (this_present_pageIndex || that_present_pageIndex) {
        if (!(this_present_pageIndex && that_present_pageIndex))
          return false;
        if (this.pageIndex != that.pageIndex)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_pageIndex = true;
      list.add(present_pageIndex);
      if (present_pageIndex)
        list.add(pageIndex);

      boolean present_pageSize = true;
      list.add(present_pageSize);
      if (present_pageSize)
        list.add(pageSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryStrategyUserByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageIndex()).compareTo(other.isSetPageIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageIndex, other.pageIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStrategyUserByPage_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageIndex:");
      sb.append(this.pageIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStrategyUserByPage_argsStandardSchemeFactory implements SchemeFactory {
      public queryStrategyUserByPage_argsStandardScheme getScheme() {
        return new queryStrategyUserByPage_argsStandardScheme();
      }
    }

    private static class queryStrategyUserByPage_argsStandardScheme extends StandardScheme<queryStrategyUserByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStrategyUserByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageIndex = iprot.readI32();
                struct.setPageIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStrategyUserByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_INDEX_FIELD_DESC);
        oprot.writeI32(struct.pageIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStrategyUserByPage_argsTupleSchemeFactory implements SchemeFactory {
      public queryStrategyUserByPage_argsTupleScheme getScheme() {
        return new queryStrategyUserByPage_argsTupleScheme();
      }
    }

    private static class queryStrategyUserByPage_argsTupleScheme extends TupleScheme<queryStrategyUserByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStrategyUserByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetStrategyId()) {
          optionals.set(1);
        }
        if (struct.isSetPageIndex()) {
          optionals.set(2);
        }
        if (struct.isSetPageSize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetPageIndex()) {
          oprot.writeI32(struct.pageIndex);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStrategyUserByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageIndex = iprot.readI32();
          struct.setPageIndexIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class queryStrategyUserByPage_result implements org.apache.thrift.TBase<queryStrategyUserByPage_result, queryStrategyUserByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryStrategyUserByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStrategyUserByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStrategyUserByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStrategyUserByPage_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStrategyUserByPage_result.class, metaDataMap);
    }

    public queryStrategyUserByPage_result() {
    }

    public queryStrategyUserByPage_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStrategyUserByPage_result(queryStrategyUserByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryStrategyUserByPage_result deepCopy() {
      return new queryStrategyUserByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryStrategyUserByPage_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStrategyUserByPage_result)
        return this.equals((queryStrategyUserByPage_result)that);
      return false;
    }

    public boolean equals(queryStrategyUserByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryStrategyUserByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStrategyUserByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStrategyUserByPage_resultStandardSchemeFactory implements SchemeFactory {
      public queryStrategyUserByPage_resultStandardScheme getScheme() {
        return new queryStrategyUserByPage_resultStandardScheme();
      }
    }

    private static class queryStrategyUserByPage_resultStandardScheme extends StandardScheme<queryStrategyUserByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStrategyUserByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStrategyUserByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStrategyUserByPage_resultTupleSchemeFactory implements SchemeFactory {
      public queryStrategyUserByPage_resultTupleScheme getScheme() {
        return new queryStrategyUserByPage_resultTupleScheme();
      }
    }

    private static class queryStrategyUserByPage_resultTupleScheme extends TupleScheme<queryStrategyUserByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStrategyUserByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStrategyUserByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class batchSaveStrategyUserStock_args implements org.apache.thrift.TBase<batchSaveStrategyUserStock_args, batchSaveStrategyUserStock_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchSaveStrategyUserStock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchSaveStrategyUserStock_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField RELATION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("relationList", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchSaveStrategyUserStock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchSaveStrategyUserStock_argsTupleSchemeFactory());
    }

    public int userId; // required
    public int strategyId; // required
    public String relationList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      STRATEGY_ID((short)2, "strategyId"),
      RELATION_LIST((short)3, "relationList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // STRATEGY_ID
            return STRATEGY_ID;
          case 3: // RELATION_LIST
            return RELATION_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __STRATEGYID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RELATION_LIST, new org.apache.thrift.meta_data.FieldMetaData("relationList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchSaveStrategyUserStock_args.class, metaDataMap);
    }

    public batchSaveStrategyUserStock_args() {
    }

    public batchSaveStrategyUserStock_args(
      int userId,
      int strategyId,
      String relationList)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.relationList = relationList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchSaveStrategyUserStock_args(batchSaveStrategyUserStock_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.strategyId = other.strategyId;
      if (other.isSetRelationList()) {
        this.relationList = other.relationList;
      }
    }

    public batchSaveStrategyUserStock_args deepCopy() {
      return new batchSaveStrategyUserStock_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      this.relationList = null;
    }

    public int getUserId() {
      return this.userId;
    }

    public batchSaveStrategyUserStock_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public batchSaveStrategyUserStock_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public String getRelationList() {
      return this.relationList;
    }

    public batchSaveStrategyUserStock_args setRelationList(String relationList) {
      this.relationList = relationList;
      return this;
    }

    public void unsetRelationList() {
      this.relationList = null;
    }

    /** Returns true if field relationList is set (has been assigned a value) and false otherwise */
    public boolean isSetRelationList() {
      return this.relationList != null;
    }

    public void setRelationListIsSet(boolean value) {
      if (!value) {
        this.relationList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case RELATION_LIST:
        if (value == null) {
          unsetRelationList();
        } else {
          setRelationList((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case STRATEGY_ID:
        return getStrategyId();

      case RELATION_LIST:
        return getRelationList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case STRATEGY_ID:
        return isSetStrategyId();
      case RELATION_LIST:
        return isSetRelationList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchSaveStrategyUserStock_args)
        return this.equals((batchSaveStrategyUserStock_args)that);
      return false;
    }

    public boolean equals(batchSaveStrategyUserStock_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_relationList = true && this.isSetRelationList();
      boolean that_present_relationList = true && that.isSetRelationList();
      if (this_present_relationList || that_present_relationList) {
        if (!(this_present_relationList && that_present_relationList))
          return false;
        if (!this.relationList.equals(that.relationList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_relationList = true && (isSetRelationList());
      list.add(present_relationList);
      if (present_relationList)
        list.add(relationList);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchSaveStrategyUserStock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRelationList()).compareTo(other.isSetRelationList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRelationList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationList, other.relationList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchSaveStrategyUserStock_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("relationList:");
      if (this.relationList == null) {
        sb.append("null");
      } else {
        sb.append(this.relationList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchSaveStrategyUserStock_argsStandardSchemeFactory implements SchemeFactory {
      public batchSaveStrategyUserStock_argsStandardScheme getScheme() {
        return new batchSaveStrategyUserStock_argsStandardScheme();
      }
    }

    private static class batchSaveStrategyUserStock_argsStandardScheme extends StandardScheme<batchSaveStrategyUserStock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchSaveStrategyUserStock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RELATION_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.relationList = iprot.readString();
                struct.setRelationListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchSaveStrategyUserStock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        if (struct.relationList != null) {
          oprot.writeFieldBegin(RELATION_LIST_FIELD_DESC);
          oprot.writeString(struct.relationList);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchSaveStrategyUserStock_argsTupleSchemeFactory implements SchemeFactory {
      public batchSaveStrategyUserStock_argsTupleScheme getScheme() {
        return new batchSaveStrategyUserStock_argsTupleScheme();
      }
    }

    private static class batchSaveStrategyUserStock_argsTupleScheme extends TupleScheme<batchSaveStrategyUserStock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchSaveStrategyUserStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetStrategyId()) {
          optionals.set(1);
        }
        if (struct.isSetRelationList()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetRelationList()) {
          oprot.writeString(struct.relationList);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchSaveStrategyUserStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.relationList = iprot.readString();
          struct.setRelationListIsSet(true);
        }
      }
    }

  }

  public static class batchSaveStrategyUserStock_result implements org.apache.thrift.TBase<batchSaveStrategyUserStock_result, batchSaveStrategyUserStock_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchSaveStrategyUserStock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchSaveStrategyUserStock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchSaveStrategyUserStock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchSaveStrategyUserStock_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchSaveStrategyUserStock_result.class, metaDataMap);
    }

    public batchSaveStrategyUserStock_result() {
    }

    public batchSaveStrategyUserStock_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchSaveStrategyUserStock_result(batchSaveStrategyUserStock_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public batchSaveStrategyUserStock_result deepCopy() {
      return new batchSaveStrategyUserStock_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public batchSaveStrategyUserStock_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchSaveStrategyUserStock_result)
        return this.equals((batchSaveStrategyUserStock_result)that);
      return false;
    }

    public boolean equals(batchSaveStrategyUserStock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchSaveStrategyUserStock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchSaveStrategyUserStock_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchSaveStrategyUserStock_resultStandardSchemeFactory implements SchemeFactory {
      public batchSaveStrategyUserStock_resultStandardScheme getScheme() {
        return new batchSaveStrategyUserStock_resultStandardScheme();
      }
    }

    private static class batchSaveStrategyUserStock_resultStandardScheme extends StandardScheme<batchSaveStrategyUserStock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchSaveStrategyUserStock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchSaveStrategyUserStock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchSaveStrategyUserStock_resultTupleSchemeFactory implements SchemeFactory {
      public batchSaveStrategyUserStock_resultTupleScheme getScheme() {
        return new batchSaveStrategyUserStock_resultTupleScheme();
      }
    }

    private static class batchSaveStrategyUserStock_resultTupleScheme extends TupleScheme<batchSaveStrategyUserStock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchSaveStrategyUserStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchSaveStrategyUserStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findStockByStrategyAndUser_args implements org.apache.thrift.TBase<findStockByStrategyAndUser_args, findStockByStrategyAndUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<findStockByStrategyAndUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStockByStrategyAndUser_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStockByStrategyAndUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStockByStrategyAndUser_argsTupleSchemeFactory());
    }

    public int userId; // required
    public int strategyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      STRATEGY_ID((short)2, "strategyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // STRATEGY_ID
            return STRATEGY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __STRATEGYID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStockByStrategyAndUser_args.class, metaDataMap);
    }

    public findStockByStrategyAndUser_args() {
    }

    public findStockByStrategyAndUser_args(
      int userId,
      int strategyId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStockByStrategyAndUser_args(findStockByStrategyAndUser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.strategyId = other.strategyId;
    }

    public findStockByStrategyAndUser_args deepCopy() {
      return new findStockByStrategyAndUser_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setStrategyIdIsSet(false);
      this.strategyId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public findStockByStrategyAndUser_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public findStockByStrategyAndUser_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case STRATEGY_ID:
        return getStrategyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case STRATEGY_ID:
        return isSetStrategyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStockByStrategyAndUser_args)
        return this.equals((findStockByStrategyAndUser_args)that);
      return false;
    }

    public boolean equals(findStockByStrategyAndUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findStockByStrategyAndUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStockByStrategyAndUser_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStockByStrategyAndUser_argsStandardSchemeFactory implements SchemeFactory {
      public findStockByStrategyAndUser_argsStandardScheme getScheme() {
        return new findStockByStrategyAndUser_argsStandardScheme();
      }
    }

    private static class findStockByStrategyAndUser_argsStandardScheme extends StandardScheme<findStockByStrategyAndUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStockByStrategyAndUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStockByStrategyAndUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStockByStrategyAndUser_argsTupleSchemeFactory implements SchemeFactory {
      public findStockByStrategyAndUser_argsTupleScheme getScheme() {
        return new findStockByStrategyAndUser_argsTupleScheme();
      }
    }

    private static class findStockByStrategyAndUser_argsTupleScheme extends TupleScheme<findStockByStrategyAndUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStockByStrategyAndUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetStrategyId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStockByStrategyAndUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
      }
    }

  }

  public static class findStockByStrategyAndUser_result implements org.apache.thrift.TBase<findStockByStrategyAndUser_result, findStockByStrategyAndUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<findStockByStrategyAndUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStockByStrategyAndUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStockByStrategyAndUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStockByStrategyAndUser_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStockByStrategyAndUser_result.class, metaDataMap);
    }

    public findStockByStrategyAndUser_result() {
    }

    public findStockByStrategyAndUser_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStockByStrategyAndUser_result(findStockByStrategyAndUser_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public findStockByStrategyAndUser_result deepCopy() {
      return new findStockByStrategyAndUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findStockByStrategyAndUser_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStockByStrategyAndUser_result)
        return this.equals((findStockByStrategyAndUser_result)that);
      return false;
    }

    public boolean equals(findStockByStrategyAndUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findStockByStrategyAndUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStockByStrategyAndUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStockByStrategyAndUser_resultStandardSchemeFactory implements SchemeFactory {
      public findStockByStrategyAndUser_resultStandardScheme getScheme() {
        return new findStockByStrategyAndUser_resultStandardScheme();
      }
    }

    private static class findStockByStrategyAndUser_resultStandardScheme extends StandardScheme<findStockByStrategyAndUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStockByStrategyAndUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStockByStrategyAndUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStockByStrategyAndUser_resultTupleSchemeFactory implements SchemeFactory {
      public findStockByStrategyAndUser_resultTupleScheme getScheme() {
        return new findStockByStrategyAndUser_resultTupleScheme();
      }
    }

    private static class findStockByStrategyAndUser_resultTupleScheme extends TupleScheme<findStockByStrategyAndUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStockByStrategyAndUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStockByStrategyAndUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveUserLoop_args implements org.apache.thrift.TBase<saveUserLoop_args, saveUserLoop_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveUserLoop_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveUserLoop_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveUserLoop_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveUserLoop_argsTupleSchemeFactory());
    }

    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveUserLoop_args.class, metaDataMap);
    }

    public saveUserLoop_args() {
    }

    public saveUserLoop_args(
      int userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveUserLoop_args(saveUserLoop_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public saveUserLoop_args deepCopy() {
      return new saveUserLoop_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public saveUserLoop_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveUserLoop_args)
        return this.equals((saveUserLoop_args)that);
      return false;
    }

    public boolean equals(saveUserLoop_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveUserLoop_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveUserLoop_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveUserLoop_argsStandardSchemeFactory implements SchemeFactory {
      public saveUserLoop_argsStandardScheme getScheme() {
        return new saveUserLoop_argsStandardScheme();
      }
    }

    private static class saveUserLoop_argsStandardScheme extends StandardScheme<saveUserLoop_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveUserLoop_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveUserLoop_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveUserLoop_argsTupleSchemeFactory implements SchemeFactory {
      public saveUserLoop_argsTupleScheme getScheme() {
        return new saveUserLoop_argsTupleScheme();
      }
    }

    private static class saveUserLoop_argsTupleScheme extends TupleScheme<saveUserLoop_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveUserLoop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveUserLoop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class saveUserLoop_result implements org.apache.thrift.TBase<saveUserLoop_result, saveUserLoop_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveUserLoop_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveUserLoop_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveUserLoop_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveUserLoop_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveUserLoop_result.class, metaDataMap);
    }

    public saveUserLoop_result() {
    }

    public saveUserLoop_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveUserLoop_result(saveUserLoop_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public saveUserLoop_result deepCopy() {
      return new saveUserLoop_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveUserLoop_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveUserLoop_result)
        return this.equals((saveUserLoop_result)that);
      return false;
    }

    public boolean equals(saveUserLoop_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveUserLoop_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveUserLoop_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveUserLoop_resultStandardSchemeFactory implements SchemeFactory {
      public saveUserLoop_resultStandardScheme getScheme() {
        return new saveUserLoop_resultStandardScheme();
      }
    }

    private static class saveUserLoop_resultStandardScheme extends StandardScheme<saveUserLoop_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveUserLoop_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveUserLoop_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveUserLoop_resultTupleSchemeFactory implements SchemeFactory {
      public saveUserLoop_resultTupleScheme getScheme() {
        return new saveUserLoop_resultTupleScheme();
      }
    }

    private static class saveUserLoop_resultTupleScheme extends TupleScheme<saveUserLoop_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveUserLoop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveUserLoop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteAllUserLoop_args implements org.apache.thrift.TBase<deleteAllUserLoop_args, deleteAllUserLoop_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAllUserLoop_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAllUserLoop_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteAllUserLoop_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteAllUserLoop_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAllUserLoop_args.class, metaDataMap);
    }

    public deleteAllUserLoop_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAllUserLoop_args(deleteAllUserLoop_args other) {
    }

    public deleteAllUserLoop_args deepCopy() {
      return new deleteAllUserLoop_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAllUserLoop_args)
        return this.equals((deleteAllUserLoop_args)that);
      return false;
    }

    public boolean equals(deleteAllUserLoop_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteAllUserLoop_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteAllUserLoop_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAllUserLoop_argsStandardSchemeFactory implements SchemeFactory {
      public deleteAllUserLoop_argsStandardScheme getScheme() {
        return new deleteAllUserLoop_argsStandardScheme();
      }
    }

    private static class deleteAllUserLoop_argsStandardScheme extends StandardScheme<deleteAllUserLoop_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAllUserLoop_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAllUserLoop_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAllUserLoop_argsTupleSchemeFactory implements SchemeFactory {
      public deleteAllUserLoop_argsTupleScheme getScheme() {
        return new deleteAllUserLoop_argsTupleScheme();
      }
    }

    private static class deleteAllUserLoop_argsTupleScheme extends TupleScheme<deleteAllUserLoop_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAllUserLoop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAllUserLoop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteAllUserLoop_result implements org.apache.thrift.TBase<deleteAllUserLoop_result, deleteAllUserLoop_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAllUserLoop_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAllUserLoop_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteAllUserLoop_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteAllUserLoop_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAllUserLoop_result.class, metaDataMap);
    }

    public deleteAllUserLoop_result() {
    }

    public deleteAllUserLoop_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAllUserLoop_result(deleteAllUserLoop_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteAllUserLoop_result deepCopy() {
      return new deleteAllUserLoop_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteAllUserLoop_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAllUserLoop_result)
        return this.equals((deleteAllUserLoop_result)that);
      return false;
    }

    public boolean equals(deleteAllUserLoop_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteAllUserLoop_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteAllUserLoop_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAllUserLoop_resultStandardSchemeFactory implements SchemeFactory {
      public deleteAllUserLoop_resultStandardScheme getScheme() {
        return new deleteAllUserLoop_resultStandardScheme();
      }
    }

    private static class deleteAllUserLoop_resultStandardScheme extends StandardScheme<deleteAllUserLoop_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAllUserLoop_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAllUserLoop_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAllUserLoop_resultTupleSchemeFactory implements SchemeFactory {
      public deleteAllUserLoop_resultTupleScheme getScheme() {
        return new deleteAllUserLoop_resultTupleScheme();
      }
    }

    private static class deleteAllUserLoop_resultTupleScheme extends TupleScheme<deleteAllUserLoop_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAllUserLoop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAllUserLoop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class incrLoopNum_args implements org.apache.thrift.TBase<incrLoopNum_args, incrLoopNum_args._Fields>, java.io.Serializable, Cloneable, Comparable<incrLoopNum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("incrLoopNum_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new incrLoopNum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new incrLoopNum_argsTupleSchemeFactory());
    }

    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(incrLoopNum_args.class, metaDataMap);
    }

    public incrLoopNum_args() {
    }

    public incrLoopNum_args(
      int userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public incrLoopNum_args(incrLoopNum_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public incrLoopNum_args deepCopy() {
      return new incrLoopNum_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public incrLoopNum_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof incrLoopNum_args)
        return this.equals((incrLoopNum_args)that);
      return false;
    }

    public boolean equals(incrLoopNum_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(incrLoopNum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("incrLoopNum_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class incrLoopNum_argsStandardSchemeFactory implements SchemeFactory {
      public incrLoopNum_argsStandardScheme getScheme() {
        return new incrLoopNum_argsStandardScheme();
      }
    }

    private static class incrLoopNum_argsStandardScheme extends StandardScheme<incrLoopNum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, incrLoopNum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, incrLoopNum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class incrLoopNum_argsTupleSchemeFactory implements SchemeFactory {
      public incrLoopNum_argsTupleScheme getScheme() {
        return new incrLoopNum_argsTupleScheme();
      }
    }

    private static class incrLoopNum_argsTupleScheme extends TupleScheme<incrLoopNum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, incrLoopNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, incrLoopNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class incrLoopNum_result implements org.apache.thrift.TBase<incrLoopNum_result, incrLoopNum_result._Fields>, java.io.Serializable, Cloneable, Comparable<incrLoopNum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("incrLoopNum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new incrLoopNum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new incrLoopNum_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(incrLoopNum_result.class, metaDataMap);
    }

    public incrLoopNum_result() {
    }

    public incrLoopNum_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public incrLoopNum_result(incrLoopNum_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public incrLoopNum_result deepCopy() {
      return new incrLoopNum_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public incrLoopNum_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof incrLoopNum_result)
        return this.equals((incrLoopNum_result)that);
      return false;
    }

    public boolean equals(incrLoopNum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(incrLoopNum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("incrLoopNum_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class incrLoopNum_resultStandardSchemeFactory implements SchemeFactory {
      public incrLoopNum_resultStandardScheme getScheme() {
        return new incrLoopNum_resultStandardScheme();
      }
    }

    private static class incrLoopNum_resultStandardScheme extends StandardScheme<incrLoopNum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, incrLoopNum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, incrLoopNum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class incrLoopNum_resultTupleSchemeFactory implements SchemeFactory {
      public incrLoopNum_resultTupleScheme getScheme() {
        return new incrLoopNum_resultTupleScheme();
      }
    }

    private static class incrLoopNum_resultTupleScheme extends TupleScheme<incrLoopNum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, incrLoopNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, incrLoopNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class incrFinishNum_args implements org.apache.thrift.TBase<incrFinishNum_args, incrFinishNum_args._Fields>, java.io.Serializable, Cloneable, Comparable<incrFinishNum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("incrFinishNum_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField STOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("stocks", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new incrFinishNum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new incrFinishNum_argsTupleSchemeFactory());
    }

    public int userId; // required
    public int strategyId; // required
    public String stocks; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      STRATEGY_ID((short)2, "strategyId"),
      STOCKS((short)3, "stocks");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // STRATEGY_ID
            return STRATEGY_ID;
          case 3: // STOCKS
            return STOCKS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __STRATEGYID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCKS, new org.apache.thrift.meta_data.FieldMetaData("stocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(incrFinishNum_args.class, metaDataMap);
    }

    public incrFinishNum_args() {
    }

    public incrFinishNum_args(
      int userId,
      int strategyId,
      String stocks)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.stocks = stocks;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public incrFinishNum_args(incrFinishNum_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.strategyId = other.strategyId;
      if (other.isSetStocks()) {
        this.stocks = other.stocks;
      }
    }

    public incrFinishNum_args deepCopy() {
      return new incrFinishNum_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      this.stocks = null;
    }

    public int getUserId() {
      return this.userId;
    }

    public incrFinishNum_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public incrFinishNum_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public String getStocks() {
      return this.stocks;
    }

    public incrFinishNum_args setStocks(String stocks) {
      this.stocks = stocks;
      return this;
    }

    public void unsetStocks() {
      this.stocks = null;
    }

    /** Returns true if field stocks is set (has been assigned a value) and false otherwise */
    public boolean isSetStocks() {
      return this.stocks != null;
    }

    public void setStocksIsSet(boolean value) {
      if (!value) {
        this.stocks = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case STOCKS:
        if (value == null) {
          unsetStocks();
        } else {
          setStocks((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case STRATEGY_ID:
        return getStrategyId();

      case STOCKS:
        return getStocks();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case STRATEGY_ID:
        return isSetStrategyId();
      case STOCKS:
        return isSetStocks();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof incrFinishNum_args)
        return this.equals((incrFinishNum_args)that);
      return false;
    }

    public boolean equals(incrFinishNum_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_stocks = true && this.isSetStocks();
      boolean that_present_stocks = true && that.isSetStocks();
      if (this_present_stocks || that_present_stocks) {
        if (!(this_present_stocks && that_present_stocks))
          return false;
        if (!this.stocks.equals(that.stocks))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_stocks = true && (isSetStocks());
      list.add(present_stocks);
      if (present_stocks)
        list.add(stocks);

      return list.hashCode();
    }

    @Override
    public int compareTo(incrFinishNum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStocks()).compareTo(other.isSetStocks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStocks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stocks, other.stocks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("incrFinishNum_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stocks:");
      if (this.stocks == null) {
        sb.append("null");
      } else {
        sb.append(this.stocks);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class incrFinishNum_argsStandardSchemeFactory implements SchemeFactory {
      public incrFinishNum_argsStandardScheme getScheme() {
        return new incrFinishNum_argsStandardScheme();
      }
    }

    private static class incrFinishNum_argsStandardScheme extends StandardScheme<incrFinishNum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, incrFinishNum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STOCKS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stocks = iprot.readString();
                struct.setStocksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, incrFinishNum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        if (struct.stocks != null) {
          oprot.writeFieldBegin(STOCKS_FIELD_DESC);
          oprot.writeString(struct.stocks);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class incrFinishNum_argsTupleSchemeFactory implements SchemeFactory {
      public incrFinishNum_argsTupleScheme getScheme() {
        return new incrFinishNum_argsTupleScheme();
      }
    }

    private static class incrFinishNum_argsTupleScheme extends TupleScheme<incrFinishNum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, incrFinishNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetStrategyId()) {
          optionals.set(1);
        }
        if (struct.isSetStocks()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStocks()) {
          oprot.writeString(struct.stocks);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, incrFinishNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.stocks = iprot.readString();
          struct.setStocksIsSet(true);
        }
      }
    }

  }

  public static class incrFinishNum_result implements org.apache.thrift.TBase<incrFinishNum_result, incrFinishNum_result._Fields>, java.io.Serializable, Cloneable, Comparable<incrFinishNum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("incrFinishNum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new incrFinishNum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new incrFinishNum_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(incrFinishNum_result.class, metaDataMap);
    }

    public incrFinishNum_result() {
    }

    public incrFinishNum_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public incrFinishNum_result(incrFinishNum_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public incrFinishNum_result deepCopy() {
      return new incrFinishNum_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public incrFinishNum_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof incrFinishNum_result)
        return this.equals((incrFinishNum_result)that);
      return false;
    }

    public boolean equals(incrFinishNum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(incrFinishNum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("incrFinishNum_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class incrFinishNum_resultStandardSchemeFactory implements SchemeFactory {
      public incrFinishNum_resultStandardScheme getScheme() {
        return new incrFinishNum_resultStandardScheme();
      }
    }

    private static class incrFinishNum_resultStandardScheme extends StandardScheme<incrFinishNum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, incrFinishNum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, incrFinishNum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class incrFinishNum_resultTupleSchemeFactory implements SchemeFactory {
      public incrFinishNum_resultTupleScheme getScheme() {
        return new incrFinishNum_resultTupleScheme();
      }
    }

    private static class incrFinishNum_resultTupleScheme extends TupleScheme<incrFinishNum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, incrFinishNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, incrFinishNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findUserLoopByUserId_args implements org.apache.thrift.TBase<findUserLoopByUserId_args, findUserLoopByUserId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUserLoopByUserId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserLoopByUserId_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUserLoopByUserId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUserLoopByUserId_argsTupleSchemeFactory());
    }

    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserLoopByUserId_args.class, metaDataMap);
    }

    public findUserLoopByUserId_args() {
    }

    public findUserLoopByUserId_args(
      int userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserLoopByUserId_args(findUserLoopByUserId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public findUserLoopByUserId_args deepCopy() {
      return new findUserLoopByUserId_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public findUserLoopByUserId_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserLoopByUserId_args)
        return this.equals((findUserLoopByUserId_args)that);
      return false;
    }

    public boolean equals(findUserLoopByUserId_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findUserLoopByUserId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUserLoopByUserId_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserLoopByUserId_argsStandardSchemeFactory implements SchemeFactory {
      public findUserLoopByUserId_argsStandardScheme getScheme() {
        return new findUserLoopByUserId_argsStandardScheme();
      }
    }

    private static class findUserLoopByUserId_argsStandardScheme extends StandardScheme<findUserLoopByUserId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserLoopByUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserLoopByUserId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserLoopByUserId_argsTupleSchemeFactory implements SchemeFactory {
      public findUserLoopByUserId_argsTupleScheme getScheme() {
        return new findUserLoopByUserId_argsTupleScheme();
      }
    }

    private static class findUserLoopByUserId_argsTupleScheme extends TupleScheme<findUserLoopByUserId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserLoopByUserId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserLoopByUserId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class findUserLoopByUserId_result implements org.apache.thrift.TBase<findUserLoopByUserId_result, findUserLoopByUserId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUserLoopByUserId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserLoopByUserId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUserLoopByUserId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUserLoopByUserId_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserLoopByUserId_result.class, metaDataMap);
    }

    public findUserLoopByUserId_result() {
    }

    public findUserLoopByUserId_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserLoopByUserId_result(findUserLoopByUserId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public findUserLoopByUserId_result deepCopy() {
      return new findUserLoopByUserId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findUserLoopByUserId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserLoopByUserId_result)
        return this.equals((findUserLoopByUserId_result)that);
      return false;
    }

    public boolean equals(findUserLoopByUserId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findUserLoopByUserId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUserLoopByUserId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserLoopByUserId_resultStandardSchemeFactory implements SchemeFactory {
      public findUserLoopByUserId_resultStandardScheme getScheme() {
        return new findUserLoopByUserId_resultStandardScheme();
      }
    }

    private static class findUserLoopByUserId_resultStandardScheme extends StandardScheme<findUserLoopByUserId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserLoopByUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserLoopByUserId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserLoopByUserId_resultTupleSchemeFactory implements SchemeFactory {
      public findUserLoopByUserId_resultTupleScheme getScheme() {
        return new findUserLoopByUserId_resultTupleScheme();
      }
    }

    private static class findUserLoopByUserId_resultTupleScheme extends TupleScheme<findUserLoopByUserId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserLoopByUserId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserLoopByUserId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class batchInsertStrategyStockOneProfit_args implements org.apache.thrift.TBase<batchInsertStrategyStockOneProfit_args, batchInsertStrategyStockOneProfit_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchInsertStrategyStockOneProfit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchInsertStrategyStockOneProfit_args");

    private static final org.apache.thrift.protocol.TField THRIFT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("thriftList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchInsertStrategyStockOneProfit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchInsertStrategyStockOneProfit_argsTupleSchemeFactory());
    }

    public List<StrategyStockOneProfitThrift> thriftList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      THRIFT_LIST((short)1, "thriftList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // THRIFT_LIST
            return THRIFT_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.THRIFT_LIST, new org.apache.thrift.meta_data.FieldMetaData("thriftList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StrategyStockOneProfitThrift.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchInsertStrategyStockOneProfit_args.class, metaDataMap);
    }

    public batchInsertStrategyStockOneProfit_args() {
    }

    public batchInsertStrategyStockOneProfit_args(
      List<StrategyStockOneProfitThrift> thriftList)
    {
      this();
      this.thriftList = thriftList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchInsertStrategyStockOneProfit_args(batchInsertStrategyStockOneProfit_args other) {
      if (other.isSetThriftList()) {
        List<StrategyStockOneProfitThrift> __this__thriftList = new ArrayList<StrategyStockOneProfitThrift>(other.thriftList.size());
        for (StrategyStockOneProfitThrift other_element : other.thriftList) {
          __this__thriftList.add(new StrategyStockOneProfitThrift(other_element));
        }
        this.thriftList = __this__thriftList;
      }
    }

    public batchInsertStrategyStockOneProfit_args deepCopy() {
      return new batchInsertStrategyStockOneProfit_args(this);
    }

    @Override
    public void clear() {
      this.thriftList = null;
    }

    public int getThriftListSize() {
      return (this.thriftList == null) ? 0 : this.thriftList.size();
    }

    public java.util.Iterator<StrategyStockOneProfitThrift> getThriftListIterator() {
      return (this.thriftList == null) ? null : this.thriftList.iterator();
    }

    public void addToThriftList(StrategyStockOneProfitThrift elem) {
      if (this.thriftList == null) {
        this.thriftList = new ArrayList<StrategyStockOneProfitThrift>();
      }
      this.thriftList.add(elem);
    }

    public List<StrategyStockOneProfitThrift> getThriftList() {
      return this.thriftList;
    }

    public batchInsertStrategyStockOneProfit_args setThriftList(List<StrategyStockOneProfitThrift> thriftList) {
      this.thriftList = thriftList;
      return this;
    }

    public void unsetThriftList() {
      this.thriftList = null;
    }

    /** Returns true if field thriftList is set (has been assigned a value) and false otherwise */
    public boolean isSetThriftList() {
      return this.thriftList != null;
    }

    public void setThriftListIsSet(boolean value) {
      if (!value) {
        this.thriftList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case THRIFT_LIST:
        if (value == null) {
          unsetThriftList();
        } else {
          setThriftList((List<StrategyStockOneProfitThrift>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case THRIFT_LIST:
        return getThriftList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case THRIFT_LIST:
        return isSetThriftList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchInsertStrategyStockOneProfit_args)
        return this.equals((batchInsertStrategyStockOneProfit_args)that);
      return false;
    }

    public boolean equals(batchInsertStrategyStockOneProfit_args that) {
      if (that == null)
        return false;

      boolean this_present_thriftList = true && this.isSetThriftList();
      boolean that_present_thriftList = true && that.isSetThriftList();
      if (this_present_thriftList || that_present_thriftList) {
        if (!(this_present_thriftList && that_present_thriftList))
          return false;
        if (!this.thriftList.equals(that.thriftList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_thriftList = true && (isSetThriftList());
      list.add(present_thriftList);
      if (present_thriftList)
        list.add(thriftList);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchInsertStrategyStockOneProfit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetThriftList()).compareTo(other.isSetThriftList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThriftList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thriftList, other.thriftList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchInsertStrategyStockOneProfit_args(");
      boolean first = true;

      sb.append("thriftList:");
      if (this.thriftList == null) {
        sb.append("null");
      } else {
        sb.append(this.thriftList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchInsertStrategyStockOneProfit_argsStandardSchemeFactory implements SchemeFactory {
      public batchInsertStrategyStockOneProfit_argsStandardScheme getScheme() {
        return new batchInsertStrategyStockOneProfit_argsStandardScheme();
      }
    }

    private static class batchInsertStrategyStockOneProfit_argsStandardScheme extends StandardScheme<batchInsertStrategyStockOneProfit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchInsertStrategyStockOneProfit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // THRIFT_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.thriftList = new ArrayList<StrategyStockOneProfitThrift>(_list0.size);
                  StrategyStockOneProfitThrift _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new StrategyStockOneProfitThrift();
                    _elem1.read(iprot);
                    struct.thriftList.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setThriftListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchInsertStrategyStockOneProfit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.thriftList != null) {
          oprot.writeFieldBegin(THRIFT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.thriftList.size()));
            for (StrategyStockOneProfitThrift _iter3 : struct.thriftList)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchInsertStrategyStockOneProfit_argsTupleSchemeFactory implements SchemeFactory {
      public batchInsertStrategyStockOneProfit_argsTupleScheme getScheme() {
        return new batchInsertStrategyStockOneProfit_argsTupleScheme();
      }
    }

    private static class batchInsertStrategyStockOneProfit_argsTupleScheme extends TupleScheme<batchInsertStrategyStockOneProfit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchInsertStrategyStockOneProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetThriftList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetThriftList()) {
          {
            oprot.writeI32(struct.thriftList.size());
            for (StrategyStockOneProfitThrift _iter4 : struct.thriftList)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchInsertStrategyStockOneProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.thriftList = new ArrayList<StrategyStockOneProfitThrift>(_list5.size);
            StrategyStockOneProfitThrift _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new StrategyStockOneProfitThrift();
              _elem6.read(iprot);
              struct.thriftList.add(_elem6);
            }
          }
          struct.setThriftListIsSet(true);
        }
      }
    }

  }

  public static class batchInsertStrategyStockOneProfit_result implements org.apache.thrift.TBase<batchInsertStrategyStockOneProfit_result, batchInsertStrategyStockOneProfit_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchInsertStrategyStockOneProfit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchInsertStrategyStockOneProfit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchInsertStrategyStockOneProfit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchInsertStrategyStockOneProfit_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchInsertStrategyStockOneProfit_result.class, metaDataMap);
    }

    public batchInsertStrategyStockOneProfit_result() {
    }

    public batchInsertStrategyStockOneProfit_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchInsertStrategyStockOneProfit_result(batchInsertStrategyStockOneProfit_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public batchInsertStrategyStockOneProfit_result deepCopy() {
      return new batchInsertStrategyStockOneProfit_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public batchInsertStrategyStockOneProfit_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchInsertStrategyStockOneProfit_result)
        return this.equals((batchInsertStrategyStockOneProfit_result)that);
      return false;
    }

    public boolean equals(batchInsertStrategyStockOneProfit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchInsertStrategyStockOneProfit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchInsertStrategyStockOneProfit_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchInsertStrategyStockOneProfit_resultStandardSchemeFactory implements SchemeFactory {
      public batchInsertStrategyStockOneProfit_resultStandardScheme getScheme() {
        return new batchInsertStrategyStockOneProfit_resultStandardScheme();
      }
    }

    private static class batchInsertStrategyStockOneProfit_resultStandardScheme extends StandardScheme<batchInsertStrategyStockOneProfit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchInsertStrategyStockOneProfit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchInsertStrategyStockOneProfit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchInsertStrategyStockOneProfit_resultTupleSchemeFactory implements SchemeFactory {
      public batchInsertStrategyStockOneProfit_resultTupleScheme getScheme() {
        return new batchInsertStrategyStockOneProfit_resultTupleScheme();
      }
    }

    private static class batchInsertStrategyStockOneProfit_resultTupleScheme extends TupleScheme<batchInsertStrategyStockOneProfit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchInsertStrategyStockOneProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchInsertStrategyStockOneProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class truncateStrategyStockOneProfit_args implements org.apache.thrift.TBase<truncateStrategyStockOneProfit_args, truncateStrategyStockOneProfit_args._Fields>, java.io.Serializable, Cloneable, Comparable<truncateStrategyStockOneProfit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("truncateStrategyStockOneProfit_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new truncateStrategyStockOneProfit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new truncateStrategyStockOneProfit_argsTupleSchemeFactory());
    }

    public int strategyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(truncateStrategyStockOneProfit_args.class, metaDataMap);
    }

    public truncateStrategyStockOneProfit_args() {
    }

    public truncateStrategyStockOneProfit_args(
      int strategyId)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public truncateStrategyStockOneProfit_args(truncateStrategyStockOneProfit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
    }

    public truncateStrategyStockOneProfit_args deepCopy() {
      return new truncateStrategyStockOneProfit_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public truncateStrategyStockOneProfit_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof truncateStrategyStockOneProfit_args)
        return this.equals((truncateStrategyStockOneProfit_args)that);
      return false;
    }

    public boolean equals(truncateStrategyStockOneProfit_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(truncateStrategyStockOneProfit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("truncateStrategyStockOneProfit_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class truncateStrategyStockOneProfit_argsStandardSchemeFactory implements SchemeFactory {
      public truncateStrategyStockOneProfit_argsStandardScheme getScheme() {
        return new truncateStrategyStockOneProfit_argsStandardScheme();
      }
    }

    private static class truncateStrategyStockOneProfit_argsStandardScheme extends StandardScheme<truncateStrategyStockOneProfit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, truncateStrategyStockOneProfit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, truncateStrategyStockOneProfit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class truncateStrategyStockOneProfit_argsTupleSchemeFactory implements SchemeFactory {
      public truncateStrategyStockOneProfit_argsTupleScheme getScheme() {
        return new truncateStrategyStockOneProfit_argsTupleScheme();
      }
    }

    private static class truncateStrategyStockOneProfit_argsTupleScheme extends TupleScheme<truncateStrategyStockOneProfit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, truncateStrategyStockOneProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, truncateStrategyStockOneProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
      }
    }

  }

  public static class truncateStrategyStockOneProfit_result implements org.apache.thrift.TBase<truncateStrategyStockOneProfit_result, truncateStrategyStockOneProfit_result._Fields>, java.io.Serializable, Cloneable, Comparable<truncateStrategyStockOneProfit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("truncateStrategyStockOneProfit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new truncateStrategyStockOneProfit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new truncateStrategyStockOneProfit_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(truncateStrategyStockOneProfit_result.class, metaDataMap);
    }

    public truncateStrategyStockOneProfit_result() {
    }

    public truncateStrategyStockOneProfit_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public truncateStrategyStockOneProfit_result(truncateStrategyStockOneProfit_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public truncateStrategyStockOneProfit_result deepCopy() {
      return new truncateStrategyStockOneProfit_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public truncateStrategyStockOneProfit_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof truncateStrategyStockOneProfit_result)
        return this.equals((truncateStrategyStockOneProfit_result)that);
      return false;
    }

    public boolean equals(truncateStrategyStockOneProfit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(truncateStrategyStockOneProfit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("truncateStrategyStockOneProfit_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class truncateStrategyStockOneProfit_resultStandardSchemeFactory implements SchemeFactory {
      public truncateStrategyStockOneProfit_resultStandardScheme getScheme() {
        return new truncateStrategyStockOneProfit_resultStandardScheme();
      }
    }

    private static class truncateStrategyStockOneProfit_resultStandardScheme extends StandardScheme<truncateStrategyStockOneProfit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, truncateStrategyStockOneProfit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, truncateStrategyStockOneProfit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class truncateStrategyStockOneProfit_resultTupleSchemeFactory implements SchemeFactory {
      public truncateStrategyStockOneProfit_resultTupleScheme getScheme() {
        return new truncateStrategyStockOneProfit_resultTupleScheme();
      }
    }

    private static class truncateStrategyStockOneProfit_resultTupleScheme extends TupleScheme<truncateStrategyStockOneProfit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, truncateStrategyStockOneProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, truncateStrategyStockOneProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryStrategyStockOneProfit_args implements org.apache.thrift.TBase<queryStrategyStockOneProfit_args, queryStrategyStockOneProfit_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryStrategyStockOneProfit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStrategyStockOneProfit_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("stocks", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStrategyStockOneProfit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStrategyStockOneProfit_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public String stocks; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      STOCKS((short)2, "stocks");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // STOCKS
            return STOCKS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCKS, new org.apache.thrift.meta_data.FieldMetaData("stocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStrategyStockOneProfit_args.class, metaDataMap);
    }

    public queryStrategyStockOneProfit_args() {
    }

    public queryStrategyStockOneProfit_args(
      int strategyId,
      String stocks)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.stocks = stocks;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStrategyStockOneProfit_args(queryStrategyStockOneProfit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      if (other.isSetStocks()) {
        this.stocks = other.stocks;
      }
    }

    public queryStrategyStockOneProfit_args deepCopy() {
      return new queryStrategyStockOneProfit_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      this.stocks = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public queryStrategyStockOneProfit_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public String getStocks() {
      return this.stocks;
    }

    public queryStrategyStockOneProfit_args setStocks(String stocks) {
      this.stocks = stocks;
      return this;
    }

    public void unsetStocks() {
      this.stocks = null;
    }

    /** Returns true if field stocks is set (has been assigned a value) and false otherwise */
    public boolean isSetStocks() {
      return this.stocks != null;
    }

    public void setStocksIsSet(boolean value) {
      if (!value) {
        this.stocks = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case STOCKS:
        if (value == null) {
          unsetStocks();
        } else {
          setStocks((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case STOCKS:
        return getStocks();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case STOCKS:
        return isSetStocks();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStrategyStockOneProfit_args)
        return this.equals((queryStrategyStockOneProfit_args)that);
      return false;
    }

    public boolean equals(queryStrategyStockOneProfit_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_stocks = true && this.isSetStocks();
      boolean that_present_stocks = true && that.isSetStocks();
      if (this_present_stocks || that_present_stocks) {
        if (!(this_present_stocks && that_present_stocks))
          return false;
        if (!this.stocks.equals(that.stocks))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_stocks = true && (isSetStocks());
      list.add(present_stocks);
      if (present_stocks)
        list.add(stocks);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryStrategyStockOneProfit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStocks()).compareTo(other.isSetStocks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStocks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stocks, other.stocks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStrategyStockOneProfit_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stocks:");
      if (this.stocks == null) {
        sb.append("null");
      } else {
        sb.append(this.stocks);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStrategyStockOneProfit_argsStandardSchemeFactory implements SchemeFactory {
      public queryStrategyStockOneProfit_argsStandardScheme getScheme() {
        return new queryStrategyStockOneProfit_argsStandardScheme();
      }
    }

    private static class queryStrategyStockOneProfit_argsStandardScheme extends StandardScheme<queryStrategyStockOneProfit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStrategyStockOneProfit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOCKS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stocks = iprot.readString();
                struct.setStocksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStrategyStockOneProfit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        if (struct.stocks != null) {
          oprot.writeFieldBegin(STOCKS_FIELD_DESC);
          oprot.writeString(struct.stocks);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStrategyStockOneProfit_argsTupleSchemeFactory implements SchemeFactory {
      public queryStrategyStockOneProfit_argsTupleScheme getScheme() {
        return new queryStrategyStockOneProfit_argsTupleScheme();
      }
    }

    private static class queryStrategyStockOneProfit_argsTupleScheme extends TupleScheme<queryStrategyStockOneProfit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStrategyStockOneProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetStocks()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStocks()) {
          oprot.writeString(struct.stocks);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStrategyStockOneProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stocks = iprot.readString();
          struct.setStocksIsSet(true);
        }
      }
    }

  }

  public static class queryStrategyStockOneProfit_result implements org.apache.thrift.TBase<queryStrategyStockOneProfit_result, queryStrategyStockOneProfit_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryStrategyStockOneProfit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStrategyStockOneProfit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStrategyStockOneProfit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStrategyStockOneProfit_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStrategyStockOneProfit_result.class, metaDataMap);
    }

    public queryStrategyStockOneProfit_result() {
    }

    public queryStrategyStockOneProfit_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStrategyStockOneProfit_result(queryStrategyStockOneProfit_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryStrategyStockOneProfit_result deepCopy() {
      return new queryStrategyStockOneProfit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryStrategyStockOneProfit_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStrategyStockOneProfit_result)
        return this.equals((queryStrategyStockOneProfit_result)that);
      return false;
    }

    public boolean equals(queryStrategyStockOneProfit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryStrategyStockOneProfit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStrategyStockOneProfit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStrategyStockOneProfit_resultStandardSchemeFactory implements SchemeFactory {
      public queryStrategyStockOneProfit_resultStandardScheme getScheme() {
        return new queryStrategyStockOneProfit_resultStandardScheme();
      }
    }

    private static class queryStrategyStockOneProfit_resultStandardScheme extends StandardScheme<queryStrategyStockOneProfit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStrategyStockOneProfit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStrategyStockOneProfit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStrategyStockOneProfit_resultTupleSchemeFactory implements SchemeFactory {
      public queryStrategyStockOneProfit_resultTupleScheme getScheme() {
        return new queryStrategyStockOneProfit_resultTupleScheme();
      }
    }

    private static class queryStrategyStockOneProfit_resultTupleScheme extends TupleScheme<queryStrategyStockOneProfit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStrategyStockOneProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStrategyStockOneProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class batchInsertStrategyStockThreeProfit_args implements org.apache.thrift.TBase<batchInsertStrategyStockThreeProfit_args, batchInsertStrategyStockThreeProfit_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchInsertStrategyStockThreeProfit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchInsertStrategyStockThreeProfit_args");

    private static final org.apache.thrift.protocol.TField THRIFT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("thriftList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchInsertStrategyStockThreeProfit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchInsertStrategyStockThreeProfit_argsTupleSchemeFactory());
    }

    public List<StrategyStockThreeProfitThrift> thriftList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      THRIFT_LIST((short)1, "thriftList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // THRIFT_LIST
            return THRIFT_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.THRIFT_LIST, new org.apache.thrift.meta_data.FieldMetaData("thriftList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StrategyStockThreeProfitThrift.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchInsertStrategyStockThreeProfit_args.class, metaDataMap);
    }

    public batchInsertStrategyStockThreeProfit_args() {
    }

    public batchInsertStrategyStockThreeProfit_args(
      List<StrategyStockThreeProfitThrift> thriftList)
    {
      this();
      this.thriftList = thriftList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchInsertStrategyStockThreeProfit_args(batchInsertStrategyStockThreeProfit_args other) {
      if (other.isSetThriftList()) {
        List<StrategyStockThreeProfitThrift> __this__thriftList = new ArrayList<StrategyStockThreeProfitThrift>(other.thriftList.size());
        for (StrategyStockThreeProfitThrift other_element : other.thriftList) {
          __this__thriftList.add(new StrategyStockThreeProfitThrift(other_element));
        }
        this.thriftList = __this__thriftList;
      }
    }

    public batchInsertStrategyStockThreeProfit_args deepCopy() {
      return new batchInsertStrategyStockThreeProfit_args(this);
    }

    @Override
    public void clear() {
      this.thriftList = null;
    }

    public int getThriftListSize() {
      return (this.thriftList == null) ? 0 : this.thriftList.size();
    }

    public java.util.Iterator<StrategyStockThreeProfitThrift> getThriftListIterator() {
      return (this.thriftList == null) ? null : this.thriftList.iterator();
    }

    public void addToThriftList(StrategyStockThreeProfitThrift elem) {
      if (this.thriftList == null) {
        this.thriftList = new ArrayList<StrategyStockThreeProfitThrift>();
      }
      this.thriftList.add(elem);
    }

    public List<StrategyStockThreeProfitThrift> getThriftList() {
      return this.thriftList;
    }

    public batchInsertStrategyStockThreeProfit_args setThriftList(List<StrategyStockThreeProfitThrift> thriftList) {
      this.thriftList = thriftList;
      return this;
    }

    public void unsetThriftList() {
      this.thriftList = null;
    }

    /** Returns true if field thriftList is set (has been assigned a value) and false otherwise */
    public boolean isSetThriftList() {
      return this.thriftList != null;
    }

    public void setThriftListIsSet(boolean value) {
      if (!value) {
        this.thriftList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case THRIFT_LIST:
        if (value == null) {
          unsetThriftList();
        } else {
          setThriftList((List<StrategyStockThreeProfitThrift>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case THRIFT_LIST:
        return getThriftList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case THRIFT_LIST:
        return isSetThriftList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchInsertStrategyStockThreeProfit_args)
        return this.equals((batchInsertStrategyStockThreeProfit_args)that);
      return false;
    }

    public boolean equals(batchInsertStrategyStockThreeProfit_args that) {
      if (that == null)
        return false;

      boolean this_present_thriftList = true && this.isSetThriftList();
      boolean that_present_thriftList = true && that.isSetThriftList();
      if (this_present_thriftList || that_present_thriftList) {
        if (!(this_present_thriftList && that_present_thriftList))
          return false;
        if (!this.thriftList.equals(that.thriftList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_thriftList = true && (isSetThriftList());
      list.add(present_thriftList);
      if (present_thriftList)
        list.add(thriftList);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchInsertStrategyStockThreeProfit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetThriftList()).compareTo(other.isSetThriftList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThriftList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thriftList, other.thriftList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchInsertStrategyStockThreeProfit_args(");
      boolean first = true;

      sb.append("thriftList:");
      if (this.thriftList == null) {
        sb.append("null");
      } else {
        sb.append(this.thriftList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchInsertStrategyStockThreeProfit_argsStandardSchemeFactory implements SchemeFactory {
      public batchInsertStrategyStockThreeProfit_argsStandardScheme getScheme() {
        return new batchInsertStrategyStockThreeProfit_argsStandardScheme();
      }
    }

    private static class batchInsertStrategyStockThreeProfit_argsStandardScheme extends StandardScheme<batchInsertStrategyStockThreeProfit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchInsertStrategyStockThreeProfit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // THRIFT_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.thriftList = new ArrayList<StrategyStockThreeProfitThrift>(_list8.size);
                  StrategyStockThreeProfitThrift _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new StrategyStockThreeProfitThrift();
                    _elem9.read(iprot);
                    struct.thriftList.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setThriftListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchInsertStrategyStockThreeProfit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.thriftList != null) {
          oprot.writeFieldBegin(THRIFT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.thriftList.size()));
            for (StrategyStockThreeProfitThrift _iter11 : struct.thriftList)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchInsertStrategyStockThreeProfit_argsTupleSchemeFactory implements SchemeFactory {
      public batchInsertStrategyStockThreeProfit_argsTupleScheme getScheme() {
        return new batchInsertStrategyStockThreeProfit_argsTupleScheme();
      }
    }

    private static class batchInsertStrategyStockThreeProfit_argsTupleScheme extends TupleScheme<batchInsertStrategyStockThreeProfit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchInsertStrategyStockThreeProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetThriftList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetThriftList()) {
          {
            oprot.writeI32(struct.thriftList.size());
            for (StrategyStockThreeProfitThrift _iter12 : struct.thriftList)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchInsertStrategyStockThreeProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.thriftList = new ArrayList<StrategyStockThreeProfitThrift>(_list13.size);
            StrategyStockThreeProfitThrift _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new StrategyStockThreeProfitThrift();
              _elem14.read(iprot);
              struct.thriftList.add(_elem14);
            }
          }
          struct.setThriftListIsSet(true);
        }
      }
    }

  }

  public static class batchInsertStrategyStockThreeProfit_result implements org.apache.thrift.TBase<batchInsertStrategyStockThreeProfit_result, batchInsertStrategyStockThreeProfit_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchInsertStrategyStockThreeProfit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchInsertStrategyStockThreeProfit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchInsertStrategyStockThreeProfit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchInsertStrategyStockThreeProfit_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchInsertStrategyStockThreeProfit_result.class, metaDataMap);
    }

    public batchInsertStrategyStockThreeProfit_result() {
    }

    public batchInsertStrategyStockThreeProfit_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchInsertStrategyStockThreeProfit_result(batchInsertStrategyStockThreeProfit_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public batchInsertStrategyStockThreeProfit_result deepCopy() {
      return new batchInsertStrategyStockThreeProfit_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public batchInsertStrategyStockThreeProfit_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchInsertStrategyStockThreeProfit_result)
        return this.equals((batchInsertStrategyStockThreeProfit_result)that);
      return false;
    }

    public boolean equals(batchInsertStrategyStockThreeProfit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchInsertStrategyStockThreeProfit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchInsertStrategyStockThreeProfit_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchInsertStrategyStockThreeProfit_resultStandardSchemeFactory implements SchemeFactory {
      public batchInsertStrategyStockThreeProfit_resultStandardScheme getScheme() {
        return new batchInsertStrategyStockThreeProfit_resultStandardScheme();
      }
    }

    private static class batchInsertStrategyStockThreeProfit_resultStandardScheme extends StandardScheme<batchInsertStrategyStockThreeProfit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchInsertStrategyStockThreeProfit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchInsertStrategyStockThreeProfit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchInsertStrategyStockThreeProfit_resultTupleSchemeFactory implements SchemeFactory {
      public batchInsertStrategyStockThreeProfit_resultTupleScheme getScheme() {
        return new batchInsertStrategyStockThreeProfit_resultTupleScheme();
      }
    }

    private static class batchInsertStrategyStockThreeProfit_resultTupleScheme extends TupleScheme<batchInsertStrategyStockThreeProfit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchInsertStrategyStockThreeProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchInsertStrategyStockThreeProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class truncateStrategyStockThreeProfit_args implements org.apache.thrift.TBase<truncateStrategyStockThreeProfit_args, truncateStrategyStockThreeProfit_args._Fields>, java.io.Serializable, Cloneable, Comparable<truncateStrategyStockThreeProfit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("truncateStrategyStockThreeProfit_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new truncateStrategyStockThreeProfit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new truncateStrategyStockThreeProfit_argsTupleSchemeFactory());
    }

    public int strategyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(truncateStrategyStockThreeProfit_args.class, metaDataMap);
    }

    public truncateStrategyStockThreeProfit_args() {
    }

    public truncateStrategyStockThreeProfit_args(
      int strategyId)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public truncateStrategyStockThreeProfit_args(truncateStrategyStockThreeProfit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
    }

    public truncateStrategyStockThreeProfit_args deepCopy() {
      return new truncateStrategyStockThreeProfit_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public truncateStrategyStockThreeProfit_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof truncateStrategyStockThreeProfit_args)
        return this.equals((truncateStrategyStockThreeProfit_args)that);
      return false;
    }

    public boolean equals(truncateStrategyStockThreeProfit_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(truncateStrategyStockThreeProfit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("truncateStrategyStockThreeProfit_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class truncateStrategyStockThreeProfit_argsStandardSchemeFactory implements SchemeFactory {
      public truncateStrategyStockThreeProfit_argsStandardScheme getScheme() {
        return new truncateStrategyStockThreeProfit_argsStandardScheme();
      }
    }

    private static class truncateStrategyStockThreeProfit_argsStandardScheme extends StandardScheme<truncateStrategyStockThreeProfit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, truncateStrategyStockThreeProfit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, truncateStrategyStockThreeProfit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class truncateStrategyStockThreeProfit_argsTupleSchemeFactory implements SchemeFactory {
      public truncateStrategyStockThreeProfit_argsTupleScheme getScheme() {
        return new truncateStrategyStockThreeProfit_argsTupleScheme();
      }
    }

    private static class truncateStrategyStockThreeProfit_argsTupleScheme extends TupleScheme<truncateStrategyStockThreeProfit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, truncateStrategyStockThreeProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, truncateStrategyStockThreeProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
      }
    }

  }

  public static class truncateStrategyStockThreeProfit_result implements org.apache.thrift.TBase<truncateStrategyStockThreeProfit_result, truncateStrategyStockThreeProfit_result._Fields>, java.io.Serializable, Cloneable, Comparable<truncateStrategyStockThreeProfit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("truncateStrategyStockThreeProfit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new truncateStrategyStockThreeProfit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new truncateStrategyStockThreeProfit_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(truncateStrategyStockThreeProfit_result.class, metaDataMap);
    }

    public truncateStrategyStockThreeProfit_result() {
    }

    public truncateStrategyStockThreeProfit_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public truncateStrategyStockThreeProfit_result(truncateStrategyStockThreeProfit_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public truncateStrategyStockThreeProfit_result deepCopy() {
      return new truncateStrategyStockThreeProfit_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public truncateStrategyStockThreeProfit_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof truncateStrategyStockThreeProfit_result)
        return this.equals((truncateStrategyStockThreeProfit_result)that);
      return false;
    }

    public boolean equals(truncateStrategyStockThreeProfit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(truncateStrategyStockThreeProfit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("truncateStrategyStockThreeProfit_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class truncateStrategyStockThreeProfit_resultStandardSchemeFactory implements SchemeFactory {
      public truncateStrategyStockThreeProfit_resultStandardScheme getScheme() {
        return new truncateStrategyStockThreeProfit_resultStandardScheme();
      }
    }

    private static class truncateStrategyStockThreeProfit_resultStandardScheme extends StandardScheme<truncateStrategyStockThreeProfit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, truncateStrategyStockThreeProfit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, truncateStrategyStockThreeProfit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class truncateStrategyStockThreeProfit_resultTupleSchemeFactory implements SchemeFactory {
      public truncateStrategyStockThreeProfit_resultTupleScheme getScheme() {
        return new truncateStrategyStockThreeProfit_resultTupleScheme();
      }
    }

    private static class truncateStrategyStockThreeProfit_resultTupleScheme extends TupleScheme<truncateStrategyStockThreeProfit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, truncateStrategyStockThreeProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, truncateStrategyStockThreeProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryStrategyStockThreeProfit_args implements org.apache.thrift.TBase<queryStrategyStockThreeProfit_args, queryStrategyStockThreeProfit_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryStrategyStockThreeProfit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStrategyStockThreeProfit_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("stocks", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStrategyStockThreeProfit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStrategyStockThreeProfit_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public String stocks; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      STOCKS((short)2, "stocks");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // STOCKS
            return STOCKS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCKS, new org.apache.thrift.meta_data.FieldMetaData("stocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStrategyStockThreeProfit_args.class, metaDataMap);
    }

    public queryStrategyStockThreeProfit_args() {
    }

    public queryStrategyStockThreeProfit_args(
      int strategyId,
      String stocks)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.stocks = stocks;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStrategyStockThreeProfit_args(queryStrategyStockThreeProfit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      if (other.isSetStocks()) {
        this.stocks = other.stocks;
      }
    }

    public queryStrategyStockThreeProfit_args deepCopy() {
      return new queryStrategyStockThreeProfit_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      this.stocks = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public queryStrategyStockThreeProfit_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public String getStocks() {
      return this.stocks;
    }

    public queryStrategyStockThreeProfit_args setStocks(String stocks) {
      this.stocks = stocks;
      return this;
    }

    public void unsetStocks() {
      this.stocks = null;
    }

    /** Returns true if field stocks is set (has been assigned a value) and false otherwise */
    public boolean isSetStocks() {
      return this.stocks != null;
    }

    public void setStocksIsSet(boolean value) {
      if (!value) {
        this.stocks = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case STOCKS:
        if (value == null) {
          unsetStocks();
        } else {
          setStocks((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case STOCKS:
        return getStocks();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case STOCKS:
        return isSetStocks();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStrategyStockThreeProfit_args)
        return this.equals((queryStrategyStockThreeProfit_args)that);
      return false;
    }

    public boolean equals(queryStrategyStockThreeProfit_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_stocks = true && this.isSetStocks();
      boolean that_present_stocks = true && that.isSetStocks();
      if (this_present_stocks || that_present_stocks) {
        if (!(this_present_stocks && that_present_stocks))
          return false;
        if (!this.stocks.equals(that.stocks))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_stocks = true && (isSetStocks());
      list.add(present_stocks);
      if (present_stocks)
        list.add(stocks);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryStrategyStockThreeProfit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStocks()).compareTo(other.isSetStocks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStocks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stocks, other.stocks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStrategyStockThreeProfit_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stocks:");
      if (this.stocks == null) {
        sb.append("null");
      } else {
        sb.append(this.stocks);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStrategyStockThreeProfit_argsStandardSchemeFactory implements SchemeFactory {
      public queryStrategyStockThreeProfit_argsStandardScheme getScheme() {
        return new queryStrategyStockThreeProfit_argsStandardScheme();
      }
    }

    private static class queryStrategyStockThreeProfit_argsStandardScheme extends StandardScheme<queryStrategyStockThreeProfit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStrategyStockThreeProfit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOCKS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stocks = iprot.readString();
                struct.setStocksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStrategyStockThreeProfit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        if (struct.stocks != null) {
          oprot.writeFieldBegin(STOCKS_FIELD_DESC);
          oprot.writeString(struct.stocks);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStrategyStockThreeProfit_argsTupleSchemeFactory implements SchemeFactory {
      public queryStrategyStockThreeProfit_argsTupleScheme getScheme() {
        return new queryStrategyStockThreeProfit_argsTupleScheme();
      }
    }

    private static class queryStrategyStockThreeProfit_argsTupleScheme extends TupleScheme<queryStrategyStockThreeProfit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStrategyStockThreeProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetStocks()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStocks()) {
          oprot.writeString(struct.stocks);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStrategyStockThreeProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stocks = iprot.readString();
          struct.setStocksIsSet(true);
        }
      }
    }

  }

  public static class queryStrategyStockThreeProfit_result implements org.apache.thrift.TBase<queryStrategyStockThreeProfit_result, queryStrategyStockThreeProfit_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryStrategyStockThreeProfit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStrategyStockThreeProfit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStrategyStockThreeProfit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStrategyStockThreeProfit_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStrategyStockThreeProfit_result.class, metaDataMap);
    }

    public queryStrategyStockThreeProfit_result() {
    }

    public queryStrategyStockThreeProfit_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStrategyStockThreeProfit_result(queryStrategyStockThreeProfit_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryStrategyStockThreeProfit_result deepCopy() {
      return new queryStrategyStockThreeProfit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryStrategyStockThreeProfit_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStrategyStockThreeProfit_result)
        return this.equals((queryStrategyStockThreeProfit_result)that);
      return false;
    }

    public boolean equals(queryStrategyStockThreeProfit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryStrategyStockThreeProfit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStrategyStockThreeProfit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStrategyStockThreeProfit_resultStandardSchemeFactory implements SchemeFactory {
      public queryStrategyStockThreeProfit_resultStandardScheme getScheme() {
        return new queryStrategyStockThreeProfit_resultStandardScheme();
      }
    }

    private static class queryStrategyStockThreeProfit_resultStandardScheme extends StandardScheme<queryStrategyStockThreeProfit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStrategyStockThreeProfit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStrategyStockThreeProfit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStrategyStockThreeProfit_resultTupleSchemeFactory implements SchemeFactory {
      public queryStrategyStockThreeProfit_resultTupleScheme getScheme() {
        return new queryStrategyStockThreeProfit_resultTupleScheme();
      }
    }

    private static class queryStrategyStockThreeProfit_resultTupleScheme extends TupleScheme<queryStrategyStockThreeProfit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStrategyStockThreeProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStrategyStockThreeProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findStrategyStockOneProfit_args implements org.apache.thrift.TBase<findStrategyStockOneProfit_args, findStrategyStockOneProfit_args._Fields>, java.io.Serializable, Cloneable, Comparable<findStrategyStockOneProfit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStrategyStockOneProfit_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STOCK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stockCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStrategyStockOneProfit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStrategyStockOneProfit_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public String stockCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      STOCK_CODE((short)2, "stockCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // STOCK_CODE
            return STOCK_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCK_CODE, new org.apache.thrift.meta_data.FieldMetaData("stockCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStrategyStockOneProfit_args.class, metaDataMap);
    }

    public findStrategyStockOneProfit_args() {
    }

    public findStrategyStockOneProfit_args(
      int strategyId,
      String stockCode)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.stockCode = stockCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStrategyStockOneProfit_args(findStrategyStockOneProfit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      if (other.isSetStockCode()) {
        this.stockCode = other.stockCode;
      }
    }

    public findStrategyStockOneProfit_args deepCopy() {
      return new findStrategyStockOneProfit_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      this.stockCode = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public findStrategyStockOneProfit_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public String getStockCode() {
      return this.stockCode;
    }

    public findStrategyStockOneProfit_args setStockCode(String stockCode) {
      this.stockCode = stockCode;
      return this;
    }

    public void unsetStockCode() {
      this.stockCode = null;
    }

    /** Returns true if field stockCode is set (has been assigned a value) and false otherwise */
    public boolean isSetStockCode() {
      return this.stockCode != null;
    }

    public void setStockCodeIsSet(boolean value) {
      if (!value) {
        this.stockCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case STOCK_CODE:
        if (value == null) {
          unsetStockCode();
        } else {
          setStockCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case STOCK_CODE:
        return getStockCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case STOCK_CODE:
        return isSetStockCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStrategyStockOneProfit_args)
        return this.equals((findStrategyStockOneProfit_args)that);
      return false;
    }

    public boolean equals(findStrategyStockOneProfit_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_stockCode = true && this.isSetStockCode();
      boolean that_present_stockCode = true && that.isSetStockCode();
      if (this_present_stockCode || that_present_stockCode) {
        if (!(this_present_stockCode && that_present_stockCode))
          return false;
        if (!this.stockCode.equals(that.stockCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_stockCode = true && (isSetStockCode());
      list.add(present_stockCode);
      if (present_stockCode)
        list.add(stockCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(findStrategyStockOneProfit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStockCode()).compareTo(other.isSetStockCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStockCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockCode, other.stockCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStrategyStockOneProfit_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stockCode:");
      if (this.stockCode == null) {
        sb.append("null");
      } else {
        sb.append(this.stockCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStrategyStockOneProfit_argsStandardSchemeFactory implements SchemeFactory {
      public findStrategyStockOneProfit_argsStandardScheme getScheme() {
        return new findStrategyStockOneProfit_argsStandardScheme();
      }
    }

    private static class findStrategyStockOneProfit_argsStandardScheme extends StandardScheme<findStrategyStockOneProfit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStrategyStockOneProfit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOCK_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stockCode = iprot.readString();
                struct.setStockCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStrategyStockOneProfit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        if (struct.stockCode != null) {
          oprot.writeFieldBegin(STOCK_CODE_FIELD_DESC);
          oprot.writeString(struct.stockCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStrategyStockOneProfit_argsTupleSchemeFactory implements SchemeFactory {
      public findStrategyStockOneProfit_argsTupleScheme getScheme() {
        return new findStrategyStockOneProfit_argsTupleScheme();
      }
    }

    private static class findStrategyStockOneProfit_argsTupleScheme extends TupleScheme<findStrategyStockOneProfit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStrategyStockOneProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetStockCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStockCode()) {
          oprot.writeString(struct.stockCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStrategyStockOneProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stockCode = iprot.readString();
          struct.setStockCodeIsSet(true);
        }
      }
    }

  }

  public static class findStrategyStockOneProfit_result implements org.apache.thrift.TBase<findStrategyStockOneProfit_result, findStrategyStockOneProfit_result._Fields>, java.io.Serializable, Cloneable, Comparable<findStrategyStockOneProfit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStrategyStockOneProfit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStrategyStockOneProfit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStrategyStockOneProfit_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStrategyStockOneProfit_result.class, metaDataMap);
    }

    public findStrategyStockOneProfit_result() {
    }

    public findStrategyStockOneProfit_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStrategyStockOneProfit_result(findStrategyStockOneProfit_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public findStrategyStockOneProfit_result deepCopy() {
      return new findStrategyStockOneProfit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findStrategyStockOneProfit_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStrategyStockOneProfit_result)
        return this.equals((findStrategyStockOneProfit_result)that);
      return false;
    }

    public boolean equals(findStrategyStockOneProfit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findStrategyStockOneProfit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStrategyStockOneProfit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStrategyStockOneProfit_resultStandardSchemeFactory implements SchemeFactory {
      public findStrategyStockOneProfit_resultStandardScheme getScheme() {
        return new findStrategyStockOneProfit_resultStandardScheme();
      }
    }

    private static class findStrategyStockOneProfit_resultStandardScheme extends StandardScheme<findStrategyStockOneProfit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStrategyStockOneProfit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStrategyStockOneProfit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStrategyStockOneProfit_resultTupleSchemeFactory implements SchemeFactory {
      public findStrategyStockOneProfit_resultTupleScheme getScheme() {
        return new findStrategyStockOneProfit_resultTupleScheme();
      }
    }

    private static class findStrategyStockOneProfit_resultTupleScheme extends TupleScheme<findStrategyStockOneProfit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStrategyStockOneProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStrategyStockOneProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOneYearAverageProfit_args implements org.apache.thrift.TBase<getOneYearAverageProfit_args, getOneYearAverageProfit_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOneYearAverageProfit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOneYearAverageProfit_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("stocks", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOneYearAverageProfit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOneYearAverageProfit_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public String stocks; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      STOCKS((short)2, "stocks");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // STOCKS
            return STOCKS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCKS, new org.apache.thrift.meta_data.FieldMetaData("stocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOneYearAverageProfit_args.class, metaDataMap);
    }

    public getOneYearAverageProfit_args() {
    }

    public getOneYearAverageProfit_args(
      int strategyId,
      String stocks)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.stocks = stocks;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOneYearAverageProfit_args(getOneYearAverageProfit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      if (other.isSetStocks()) {
        this.stocks = other.stocks;
      }
    }

    public getOneYearAverageProfit_args deepCopy() {
      return new getOneYearAverageProfit_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      this.stocks = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public getOneYearAverageProfit_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public String getStocks() {
      return this.stocks;
    }

    public getOneYearAverageProfit_args setStocks(String stocks) {
      this.stocks = stocks;
      return this;
    }

    public void unsetStocks() {
      this.stocks = null;
    }

    /** Returns true if field stocks is set (has been assigned a value) and false otherwise */
    public boolean isSetStocks() {
      return this.stocks != null;
    }

    public void setStocksIsSet(boolean value) {
      if (!value) {
        this.stocks = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case STOCKS:
        if (value == null) {
          unsetStocks();
        } else {
          setStocks((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case STOCKS:
        return getStocks();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case STOCKS:
        return isSetStocks();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOneYearAverageProfit_args)
        return this.equals((getOneYearAverageProfit_args)that);
      return false;
    }

    public boolean equals(getOneYearAverageProfit_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_stocks = true && this.isSetStocks();
      boolean that_present_stocks = true && that.isSetStocks();
      if (this_present_stocks || that_present_stocks) {
        if (!(this_present_stocks && that_present_stocks))
          return false;
        if (!this.stocks.equals(that.stocks))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_stocks = true && (isSetStocks());
      list.add(present_stocks);
      if (present_stocks)
        list.add(stocks);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOneYearAverageProfit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStocks()).compareTo(other.isSetStocks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStocks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stocks, other.stocks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOneYearAverageProfit_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stocks:");
      if (this.stocks == null) {
        sb.append("null");
      } else {
        sb.append(this.stocks);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOneYearAverageProfit_argsStandardSchemeFactory implements SchemeFactory {
      public getOneYearAverageProfit_argsStandardScheme getScheme() {
        return new getOneYearAverageProfit_argsStandardScheme();
      }
    }

    private static class getOneYearAverageProfit_argsStandardScheme extends StandardScheme<getOneYearAverageProfit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOneYearAverageProfit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOCKS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stocks = iprot.readString();
                struct.setStocksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOneYearAverageProfit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        if (struct.stocks != null) {
          oprot.writeFieldBegin(STOCKS_FIELD_DESC);
          oprot.writeString(struct.stocks);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOneYearAverageProfit_argsTupleSchemeFactory implements SchemeFactory {
      public getOneYearAverageProfit_argsTupleScheme getScheme() {
        return new getOneYearAverageProfit_argsTupleScheme();
      }
    }

    private static class getOneYearAverageProfit_argsTupleScheme extends TupleScheme<getOneYearAverageProfit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOneYearAverageProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetStocks()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStocks()) {
          oprot.writeString(struct.stocks);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOneYearAverageProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stocks = iprot.readString();
          struct.setStocksIsSet(true);
        }
      }
    }

  }

  public static class getOneYearAverageProfit_result implements org.apache.thrift.TBase<getOneYearAverageProfit_result, getOneYearAverageProfit_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOneYearAverageProfit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOneYearAverageProfit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOneYearAverageProfit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOneYearAverageProfit_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOneYearAverageProfit_result.class, metaDataMap);
    }

    public getOneYearAverageProfit_result() {
    }

    public getOneYearAverageProfit_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOneYearAverageProfit_result(getOneYearAverageProfit_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getOneYearAverageProfit_result deepCopy() {
      return new getOneYearAverageProfit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getOneYearAverageProfit_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOneYearAverageProfit_result)
        return this.equals((getOneYearAverageProfit_result)that);
      return false;
    }

    public boolean equals(getOneYearAverageProfit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOneYearAverageProfit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOneYearAverageProfit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOneYearAverageProfit_resultStandardSchemeFactory implements SchemeFactory {
      public getOneYearAverageProfit_resultStandardScheme getScheme() {
        return new getOneYearAverageProfit_resultStandardScheme();
      }
    }

    private static class getOneYearAverageProfit_resultStandardScheme extends StandardScheme<getOneYearAverageProfit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOneYearAverageProfit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOneYearAverageProfit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOneYearAverageProfit_resultTupleSchemeFactory implements SchemeFactory {
      public getOneYearAverageProfit_resultTupleScheme getScheme() {
        return new getOneYearAverageProfit_resultTupleScheme();
      }
    }

    private static class getOneYearAverageProfit_resultTupleScheme extends TupleScheme<getOneYearAverageProfit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOneYearAverageProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOneYearAverageProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getThreeYearAverageProfit_args implements org.apache.thrift.TBase<getThreeYearAverageProfit_args, getThreeYearAverageProfit_args._Fields>, java.io.Serializable, Cloneable, Comparable<getThreeYearAverageProfit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getThreeYearAverageProfit_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("stocks", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getThreeYearAverageProfit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getThreeYearAverageProfit_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public String stocks; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      STOCKS((short)2, "stocks");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // STOCKS
            return STOCKS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCKS, new org.apache.thrift.meta_data.FieldMetaData("stocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getThreeYearAverageProfit_args.class, metaDataMap);
    }

    public getThreeYearAverageProfit_args() {
    }

    public getThreeYearAverageProfit_args(
      int strategyId,
      String stocks)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.stocks = stocks;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getThreeYearAverageProfit_args(getThreeYearAverageProfit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      if (other.isSetStocks()) {
        this.stocks = other.stocks;
      }
    }

    public getThreeYearAverageProfit_args deepCopy() {
      return new getThreeYearAverageProfit_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      this.stocks = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public getThreeYearAverageProfit_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public String getStocks() {
      return this.stocks;
    }

    public getThreeYearAverageProfit_args setStocks(String stocks) {
      this.stocks = stocks;
      return this;
    }

    public void unsetStocks() {
      this.stocks = null;
    }

    /** Returns true if field stocks is set (has been assigned a value) and false otherwise */
    public boolean isSetStocks() {
      return this.stocks != null;
    }

    public void setStocksIsSet(boolean value) {
      if (!value) {
        this.stocks = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case STOCKS:
        if (value == null) {
          unsetStocks();
        } else {
          setStocks((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case STOCKS:
        return getStocks();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case STOCKS:
        return isSetStocks();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getThreeYearAverageProfit_args)
        return this.equals((getThreeYearAverageProfit_args)that);
      return false;
    }

    public boolean equals(getThreeYearAverageProfit_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_stocks = true && this.isSetStocks();
      boolean that_present_stocks = true && that.isSetStocks();
      if (this_present_stocks || that_present_stocks) {
        if (!(this_present_stocks && that_present_stocks))
          return false;
        if (!this.stocks.equals(that.stocks))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_stocks = true && (isSetStocks());
      list.add(present_stocks);
      if (present_stocks)
        list.add(stocks);

      return list.hashCode();
    }

    @Override
    public int compareTo(getThreeYearAverageProfit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStocks()).compareTo(other.isSetStocks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStocks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stocks, other.stocks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getThreeYearAverageProfit_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stocks:");
      if (this.stocks == null) {
        sb.append("null");
      } else {
        sb.append(this.stocks);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getThreeYearAverageProfit_argsStandardSchemeFactory implements SchemeFactory {
      public getThreeYearAverageProfit_argsStandardScheme getScheme() {
        return new getThreeYearAverageProfit_argsStandardScheme();
      }
    }

    private static class getThreeYearAverageProfit_argsStandardScheme extends StandardScheme<getThreeYearAverageProfit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getThreeYearAverageProfit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOCKS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stocks = iprot.readString();
                struct.setStocksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getThreeYearAverageProfit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        if (struct.stocks != null) {
          oprot.writeFieldBegin(STOCKS_FIELD_DESC);
          oprot.writeString(struct.stocks);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getThreeYearAverageProfit_argsTupleSchemeFactory implements SchemeFactory {
      public getThreeYearAverageProfit_argsTupleScheme getScheme() {
        return new getThreeYearAverageProfit_argsTupleScheme();
      }
    }

    private static class getThreeYearAverageProfit_argsTupleScheme extends TupleScheme<getThreeYearAverageProfit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getThreeYearAverageProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetStocks()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStocks()) {
          oprot.writeString(struct.stocks);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getThreeYearAverageProfit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stocks = iprot.readString();
          struct.setStocksIsSet(true);
        }
      }
    }

  }

  public static class getThreeYearAverageProfit_result implements org.apache.thrift.TBase<getThreeYearAverageProfit_result, getThreeYearAverageProfit_result._Fields>, java.io.Serializable, Cloneable, Comparable<getThreeYearAverageProfit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getThreeYearAverageProfit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getThreeYearAverageProfit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getThreeYearAverageProfit_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getThreeYearAverageProfit_result.class, metaDataMap);
    }

    public getThreeYearAverageProfit_result() {
    }

    public getThreeYearAverageProfit_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getThreeYearAverageProfit_result(getThreeYearAverageProfit_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getThreeYearAverageProfit_result deepCopy() {
      return new getThreeYearAverageProfit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getThreeYearAverageProfit_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getThreeYearAverageProfit_result)
        return this.equals((getThreeYearAverageProfit_result)that);
      return false;
    }

    public boolean equals(getThreeYearAverageProfit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getThreeYearAverageProfit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getThreeYearAverageProfit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getThreeYearAverageProfit_resultStandardSchemeFactory implements SchemeFactory {
      public getThreeYearAverageProfit_resultStandardScheme getScheme() {
        return new getThreeYearAverageProfit_resultStandardScheme();
      }
    }

    private static class getThreeYearAverageProfit_resultStandardScheme extends StandardScheme<getThreeYearAverageProfit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getThreeYearAverageProfit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getThreeYearAverageProfit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getThreeYearAverageProfit_resultTupleSchemeFactory implements SchemeFactory {
      public getThreeYearAverageProfit_resultTupleScheme getScheme() {
        return new getThreeYearAverageProfit_resultTupleScheme();
      }
    }

    private static class getThreeYearAverageProfit_resultTupleScheme extends TupleScheme<getThreeYearAverageProfit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getThreeYearAverageProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getThreeYearAverageProfit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveStrategyStockBlacklist_args implements org.apache.thrift.TBase<saveStrategyStockBlacklist_args, saveStrategyStockBlacklist_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveStrategyStockBlacklist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveStrategyStockBlacklist_args");

    private static final org.apache.thrift.protocol.TField SSB_FIELD_DESC = new org.apache.thrift.protocol.TField("ssb", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveStrategyStockBlacklist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveStrategyStockBlacklist_argsTupleSchemeFactory());
    }

    public String ssb; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SSB((short)1, "ssb");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SSB
            return SSB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SSB, new org.apache.thrift.meta_data.FieldMetaData("ssb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveStrategyStockBlacklist_args.class, metaDataMap);
    }

    public saveStrategyStockBlacklist_args() {
    }

    public saveStrategyStockBlacklist_args(
      String ssb)
    {
      this();
      this.ssb = ssb;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveStrategyStockBlacklist_args(saveStrategyStockBlacklist_args other) {
      if (other.isSetSsb()) {
        this.ssb = other.ssb;
      }
    }

    public saveStrategyStockBlacklist_args deepCopy() {
      return new saveStrategyStockBlacklist_args(this);
    }

    @Override
    public void clear() {
      this.ssb = null;
    }

    public String getSsb() {
      return this.ssb;
    }

    public saveStrategyStockBlacklist_args setSsb(String ssb) {
      this.ssb = ssb;
      return this;
    }

    public void unsetSsb() {
      this.ssb = null;
    }

    /** Returns true if field ssb is set (has been assigned a value) and false otherwise */
    public boolean isSetSsb() {
      return this.ssb != null;
    }

    public void setSsbIsSet(boolean value) {
      if (!value) {
        this.ssb = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SSB:
        if (value == null) {
          unsetSsb();
        } else {
          setSsb((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SSB:
        return getSsb();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SSB:
        return isSetSsb();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveStrategyStockBlacklist_args)
        return this.equals((saveStrategyStockBlacklist_args)that);
      return false;
    }

    public boolean equals(saveStrategyStockBlacklist_args that) {
      if (that == null)
        return false;

      boolean this_present_ssb = true && this.isSetSsb();
      boolean that_present_ssb = true && that.isSetSsb();
      if (this_present_ssb || that_present_ssb) {
        if (!(this_present_ssb && that_present_ssb))
          return false;
        if (!this.ssb.equals(that.ssb))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ssb = true && (isSetSsb());
      list.add(present_ssb);
      if (present_ssb)
        list.add(ssb);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveStrategyStockBlacklist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSsb()).compareTo(other.isSetSsb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSsb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ssb, other.ssb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveStrategyStockBlacklist_args(");
      boolean first = true;

      sb.append("ssb:");
      if (this.ssb == null) {
        sb.append("null");
      } else {
        sb.append(this.ssb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveStrategyStockBlacklist_argsStandardSchemeFactory implements SchemeFactory {
      public saveStrategyStockBlacklist_argsStandardScheme getScheme() {
        return new saveStrategyStockBlacklist_argsStandardScheme();
      }
    }

    private static class saveStrategyStockBlacklist_argsStandardScheme extends StandardScheme<saveStrategyStockBlacklist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveStrategyStockBlacklist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SSB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ssb = iprot.readString();
                struct.setSsbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveStrategyStockBlacklist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ssb != null) {
          oprot.writeFieldBegin(SSB_FIELD_DESC);
          oprot.writeString(struct.ssb);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveStrategyStockBlacklist_argsTupleSchemeFactory implements SchemeFactory {
      public saveStrategyStockBlacklist_argsTupleScheme getScheme() {
        return new saveStrategyStockBlacklist_argsTupleScheme();
      }
    }

    private static class saveStrategyStockBlacklist_argsTupleScheme extends TupleScheme<saveStrategyStockBlacklist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveStrategyStockBlacklist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSsb()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSsb()) {
          oprot.writeString(struct.ssb);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveStrategyStockBlacklist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ssb = iprot.readString();
          struct.setSsbIsSet(true);
        }
      }
    }

  }

  public static class saveStrategyStockBlacklist_result implements org.apache.thrift.TBase<saveStrategyStockBlacklist_result, saveStrategyStockBlacklist_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveStrategyStockBlacklist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveStrategyStockBlacklist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveStrategyStockBlacklist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveStrategyStockBlacklist_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveStrategyStockBlacklist_result.class, metaDataMap);
    }

    public saveStrategyStockBlacklist_result() {
    }

    public saveStrategyStockBlacklist_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveStrategyStockBlacklist_result(saveStrategyStockBlacklist_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public saveStrategyStockBlacklist_result deepCopy() {
      return new saveStrategyStockBlacklist_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveStrategyStockBlacklist_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveStrategyStockBlacklist_result)
        return this.equals((saveStrategyStockBlacklist_result)that);
      return false;
    }

    public boolean equals(saveStrategyStockBlacklist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveStrategyStockBlacklist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveStrategyStockBlacklist_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveStrategyStockBlacklist_resultStandardSchemeFactory implements SchemeFactory {
      public saveStrategyStockBlacklist_resultStandardScheme getScheme() {
        return new saveStrategyStockBlacklist_resultStandardScheme();
      }
    }

    private static class saveStrategyStockBlacklist_resultStandardScheme extends StandardScheme<saveStrategyStockBlacklist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveStrategyStockBlacklist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveStrategyStockBlacklist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveStrategyStockBlacklist_resultTupleSchemeFactory implements SchemeFactory {
      public saveStrategyStockBlacklist_resultTupleScheme getScheme() {
        return new saveStrategyStockBlacklist_resultTupleScheme();
      }
    }

    private static class saveStrategyStockBlacklist_resultTupleScheme extends TupleScheme<saveStrategyStockBlacklist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveStrategyStockBlacklist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveStrategyStockBlacklist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStrategyStockBlacklist_args implements org.apache.thrift.TBase<getStrategyStockBlacklist_args, getStrategyStockBlacklist_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStrategyStockBlacklist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStrategyStockBlacklist_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStrategyStockBlacklist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStrategyStockBlacklist_argsTupleSchemeFactory());
    }

    public int strategyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStrategyStockBlacklist_args.class, metaDataMap);
    }

    public getStrategyStockBlacklist_args() {
    }

    public getStrategyStockBlacklist_args(
      int strategyId)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStrategyStockBlacklist_args(getStrategyStockBlacklist_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
    }

    public getStrategyStockBlacklist_args deepCopy() {
      return new getStrategyStockBlacklist_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public getStrategyStockBlacklist_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStrategyStockBlacklist_args)
        return this.equals((getStrategyStockBlacklist_args)that);
      return false;
    }

    public boolean equals(getStrategyStockBlacklist_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStrategyStockBlacklist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStrategyStockBlacklist_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStrategyStockBlacklist_argsStandardSchemeFactory implements SchemeFactory {
      public getStrategyStockBlacklist_argsStandardScheme getScheme() {
        return new getStrategyStockBlacklist_argsStandardScheme();
      }
    }

    private static class getStrategyStockBlacklist_argsStandardScheme extends StandardScheme<getStrategyStockBlacklist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStrategyStockBlacklist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStrategyStockBlacklist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStrategyStockBlacklist_argsTupleSchemeFactory implements SchemeFactory {
      public getStrategyStockBlacklist_argsTupleScheme getScheme() {
        return new getStrategyStockBlacklist_argsTupleScheme();
      }
    }

    private static class getStrategyStockBlacklist_argsTupleScheme extends TupleScheme<getStrategyStockBlacklist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStrategyStockBlacklist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStrategyStockBlacklist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
      }
    }

  }

  public static class getStrategyStockBlacklist_result implements org.apache.thrift.TBase<getStrategyStockBlacklist_result, getStrategyStockBlacklist_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStrategyStockBlacklist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStrategyStockBlacklist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStrategyStockBlacklist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStrategyStockBlacklist_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStrategyStockBlacklist_result.class, metaDataMap);
    }

    public getStrategyStockBlacklist_result() {
    }

    public getStrategyStockBlacklist_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStrategyStockBlacklist_result(getStrategyStockBlacklist_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getStrategyStockBlacklist_result deepCopy() {
      return new getStrategyStockBlacklist_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getStrategyStockBlacklist_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStrategyStockBlacklist_result)
        return this.equals((getStrategyStockBlacklist_result)that);
      return false;
    }

    public boolean equals(getStrategyStockBlacklist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStrategyStockBlacklist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStrategyStockBlacklist_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStrategyStockBlacklist_resultStandardSchemeFactory implements SchemeFactory {
      public getStrategyStockBlacklist_resultStandardScheme getScheme() {
        return new getStrategyStockBlacklist_resultStandardScheme();
      }
    }

    private static class getStrategyStockBlacklist_resultStandardScheme extends StandardScheme<getStrategyStockBlacklist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStrategyStockBlacklist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStrategyStockBlacklist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStrategyStockBlacklist_resultTupleSchemeFactory implements SchemeFactory {
      public getStrategyStockBlacklist_resultTupleScheme getScheme() {
        return new getStrategyStockBlacklist_resultTupleScheme();
      }
    }

    private static class getStrategyStockBlacklist_resultTupleScheme extends TupleScheme<getStrategyStockBlacklist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStrategyStockBlacklist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStrategyStockBlacklist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateStockBlack_args implements org.apache.thrift.TBase<updateStockBlack_args, updateStockBlack_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateStockBlack_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStockBlack_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STOCK_CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("stockCodes", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStockBlack_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStockBlack_argsTupleSchemeFactory());
    }

    public int id; // required
    public String stockCodes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      STOCK_CODES((short)2, "stockCodes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // STOCK_CODES
            return STOCK_CODES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCK_CODES, new org.apache.thrift.meta_data.FieldMetaData("stockCodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStockBlack_args.class, metaDataMap);
    }

    public updateStockBlack_args() {
    }

    public updateStockBlack_args(
      int id,
      String stockCodes)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.stockCodes = stockCodes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStockBlack_args(updateStockBlack_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetStockCodes()) {
        this.stockCodes = other.stockCodes;
      }
    }

    public updateStockBlack_args deepCopy() {
      return new updateStockBlack_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.stockCodes = null;
    }

    public int getId() {
      return this.id;
    }

    public updateStockBlack_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getStockCodes() {
      return this.stockCodes;
    }

    public updateStockBlack_args setStockCodes(String stockCodes) {
      this.stockCodes = stockCodes;
      return this;
    }

    public void unsetStockCodes() {
      this.stockCodes = null;
    }

    /** Returns true if field stockCodes is set (has been assigned a value) and false otherwise */
    public boolean isSetStockCodes() {
      return this.stockCodes != null;
    }

    public void setStockCodesIsSet(boolean value) {
      if (!value) {
        this.stockCodes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case STOCK_CODES:
        if (value == null) {
          unsetStockCodes();
        } else {
          setStockCodes((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case STOCK_CODES:
        return getStockCodes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case STOCK_CODES:
        return isSetStockCodes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStockBlack_args)
        return this.equals((updateStockBlack_args)that);
      return false;
    }

    public boolean equals(updateStockBlack_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_stockCodes = true && this.isSetStockCodes();
      boolean that_present_stockCodes = true && that.isSetStockCodes();
      if (this_present_stockCodes || that_present_stockCodes) {
        if (!(this_present_stockCodes && that_present_stockCodes))
          return false;
        if (!this.stockCodes.equals(that.stockCodes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_stockCodes = true && (isSetStockCodes());
      list.add(present_stockCodes);
      if (present_stockCodes)
        list.add(stockCodes);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateStockBlack_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStockCodes()).compareTo(other.isSetStockCodes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStockCodes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockCodes, other.stockCodes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStockBlack_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stockCodes:");
      if (this.stockCodes == null) {
        sb.append("null");
      } else {
        sb.append(this.stockCodes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStockBlack_argsStandardSchemeFactory implements SchemeFactory {
      public updateStockBlack_argsStandardScheme getScheme() {
        return new updateStockBlack_argsStandardScheme();
      }
    }

    private static class updateStockBlack_argsStandardScheme extends StandardScheme<updateStockBlack_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStockBlack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOCK_CODES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stockCodes = iprot.readString();
                struct.setStockCodesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStockBlack_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        if (struct.stockCodes != null) {
          oprot.writeFieldBegin(STOCK_CODES_FIELD_DESC);
          oprot.writeString(struct.stockCodes);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStockBlack_argsTupleSchemeFactory implements SchemeFactory {
      public updateStockBlack_argsTupleScheme getScheme() {
        return new updateStockBlack_argsTupleScheme();
      }
    }

    private static class updateStockBlack_argsTupleScheme extends TupleScheme<updateStockBlack_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStockBlack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetStockCodes()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetStockCodes()) {
          oprot.writeString(struct.stockCodes);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStockBlack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stockCodes = iprot.readString();
          struct.setStockCodesIsSet(true);
        }
      }
    }

  }

  public static class updateStockBlack_result implements org.apache.thrift.TBase<updateStockBlack_result, updateStockBlack_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateStockBlack_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStockBlack_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStockBlack_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStockBlack_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStockBlack_result.class, metaDataMap);
    }

    public updateStockBlack_result() {
    }

    public updateStockBlack_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStockBlack_result(updateStockBlack_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateStockBlack_result deepCopy() {
      return new updateStockBlack_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateStockBlack_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStockBlack_result)
        return this.equals((updateStockBlack_result)that);
      return false;
    }

    public boolean equals(updateStockBlack_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateStockBlack_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStockBlack_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStockBlack_resultStandardSchemeFactory implements SchemeFactory {
      public updateStockBlack_resultStandardScheme getScheme() {
        return new updateStockBlack_resultStandardScheme();
      }
    }

    private static class updateStockBlack_resultStandardScheme extends StandardScheme<updateStockBlack_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStockBlack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStockBlack_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStockBlack_resultTupleSchemeFactory implements SchemeFactory {
      public updateStockBlack_resultTupleScheme getScheme() {
        return new updateStockBlack_resultTupleScheme();
      }
    }

    private static class updateStockBlack_resultTupleScheme extends TupleScheme<updateStockBlack_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStockBlack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStockBlack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendTradeMq_args implements org.apache.thrift.TBase<sendTradeMq_args, sendTradeMq_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendTradeMq_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendTradeMq_args");

    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("json", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendTradeMq_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendTradeMq_argsTupleSchemeFactory());
    }

    public int type; // required
    public String json; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TYPE((short)1, "type"),
      JSON((short)2, "json");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE
            return TYPE;
          case 2: // JSON
            return JSON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendTradeMq_args.class, metaDataMap);
    }

    public sendTradeMq_args() {
    }

    public sendTradeMq_args(
      int type,
      String json)
    {
      this();
      this.type = type;
      setTypeIsSet(true);
      this.json = json;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendTradeMq_args(sendTradeMq_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.type = other.type;
      if (other.isSetJson()) {
        this.json = other.json;
      }
    }

    public sendTradeMq_args deepCopy() {
      return new sendTradeMq_args(this);
    }

    @Override
    public void clear() {
      setTypeIsSet(false);
      this.type = 0;
      this.json = null;
    }

    public int getType() {
      return this.type;
    }

    public sendTradeMq_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public String getJson() {
      return this.json;
    }

    public sendTradeMq_args setJson(String json) {
      this.json = json;
      return this;
    }

    public void unsetJson() {
      this.json = null;
    }

    /** Returns true if field json is set (has been assigned a value) and false otherwise */
    public boolean isSetJson() {
      return this.json != null;
    }

    public void setJsonIsSet(boolean value) {
      if (!value) {
        this.json = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case JSON:
        if (value == null) {
          unsetJson();
        } else {
          setJson((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE:
        return getType();

      case JSON:
        return getJson();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TYPE:
        return isSetType();
      case JSON:
        return isSetJson();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendTradeMq_args)
        return this.equals((sendTradeMq_args)that);
      return false;
    }

    public boolean equals(sendTradeMq_args that) {
      if (that == null)
        return false;

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_json = true && this.isSetJson();
      boolean that_present_json = true && that.isSetJson();
      if (this_present_json || that_present_json) {
        if (!(this_present_json && that_present_json))
          return false;
        if (!this.json.equals(that.json))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_json = true && (isSetJson());
      list.add(present_json);
      if (present_json)
        list.add(json);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendTradeMq_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJson()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendTradeMq_args(");
      boolean first = true;

      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("json:");
      if (this.json == null) {
        sb.append("null");
      } else {
        sb.append(this.json);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendTradeMq_argsStandardSchemeFactory implements SchemeFactory {
      public sendTradeMq_argsStandardScheme getScheme() {
        return new sendTradeMq_argsStandardScheme();
      }
    }

    private static class sendTradeMq_argsStandardScheme extends StandardScheme<sendTradeMq_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendTradeMq_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.json = iprot.readString();
                struct.setJsonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendTradeMq_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        if (struct.json != null) {
          oprot.writeFieldBegin(JSON_FIELD_DESC);
          oprot.writeString(struct.json);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendTradeMq_argsTupleSchemeFactory implements SchemeFactory {
      public sendTradeMq_argsTupleScheme getScheme() {
        return new sendTradeMq_argsTupleScheme();
      }
    }

    private static class sendTradeMq_argsTupleScheme extends TupleScheme<sendTradeMq_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendTradeMq_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetType()) {
          optionals.set(0);
        }
        if (struct.isSetJson()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetJson()) {
          oprot.writeString(struct.json);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendTradeMq_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.json = iprot.readString();
          struct.setJsonIsSet(true);
        }
      }
    }

  }

  public static class sendTradeMq_result implements org.apache.thrift.TBase<sendTradeMq_result, sendTradeMq_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendTradeMq_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendTradeMq_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendTradeMq_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendTradeMq_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendTradeMq_result.class, metaDataMap);
    }

    public sendTradeMq_result() {
    }

    public sendTradeMq_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendTradeMq_result(sendTradeMq_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public sendTradeMq_result deepCopy() {
      return new sendTradeMq_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public sendTradeMq_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendTradeMq_result)
        return this.equals((sendTradeMq_result)that);
      return false;
    }

    public boolean equals(sendTradeMq_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendTradeMq_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendTradeMq_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendTradeMq_resultStandardSchemeFactory implements SchemeFactory {
      public sendTradeMq_resultStandardScheme getScheme() {
        return new sendTradeMq_resultStandardScheme();
      }
    }

    private static class sendTradeMq_resultStandardScheme extends StandardScheme<sendTradeMq_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendTradeMq_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendTradeMq_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendTradeMq_resultTupleSchemeFactory implements SchemeFactory {
      public sendTradeMq_resultTupleScheme getScheme() {
        return new sendTradeMq_resultTupleScheme();
      }
    }

    private static class sendTradeMq_resultTupleScheme extends TupleScheme<sendTradeMq_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendTradeMq_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendTradeMq_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPermissionNum_args implements org.apache.thrift.TBase<getPermissionNum_args, getPermissionNum_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPermissionNum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPermissionNum_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPermissionNum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPermissionNum_argsTupleSchemeFactory());
    }

    public int userId; // required
    public int strategyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      STRATEGY_ID((short)2, "strategyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // STRATEGY_ID
            return STRATEGY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __STRATEGYID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPermissionNum_args.class, metaDataMap);
    }

    public getPermissionNum_args() {
    }

    public getPermissionNum_args(
      int userId,
      int strategyId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPermissionNum_args(getPermissionNum_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.strategyId = other.strategyId;
    }

    public getPermissionNum_args deepCopy() {
      return new getPermissionNum_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setStrategyIdIsSet(false);
      this.strategyId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public getPermissionNum_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public getPermissionNum_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case STRATEGY_ID:
        return getStrategyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case STRATEGY_ID:
        return isSetStrategyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPermissionNum_args)
        return this.equals((getPermissionNum_args)that);
      return false;
    }

    public boolean equals(getPermissionNum_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPermissionNum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPermissionNum_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPermissionNum_argsStandardSchemeFactory implements SchemeFactory {
      public getPermissionNum_argsStandardScheme getScheme() {
        return new getPermissionNum_argsStandardScheme();
      }
    }

    private static class getPermissionNum_argsStandardScheme extends StandardScheme<getPermissionNum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPermissionNum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPermissionNum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPermissionNum_argsTupleSchemeFactory implements SchemeFactory {
      public getPermissionNum_argsTupleScheme getScheme() {
        return new getPermissionNum_argsTupleScheme();
      }
    }

    private static class getPermissionNum_argsTupleScheme extends TupleScheme<getPermissionNum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPermissionNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetStrategyId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPermissionNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
      }
    }

  }

  public static class getPermissionNum_result implements org.apache.thrift.TBase<getPermissionNum_result, getPermissionNum_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPermissionNum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPermissionNum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPermissionNum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPermissionNum_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPermissionNum_result.class, metaDataMap);
    }

    public getPermissionNum_result() {
    }

    public getPermissionNum_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPermissionNum_result(getPermissionNum_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getPermissionNum_result deepCopy() {
      return new getPermissionNum_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getPermissionNum_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPermissionNum_result)
        return this.equals((getPermissionNum_result)that);
      return false;
    }

    public boolean equals(getPermissionNum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPermissionNum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPermissionNum_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPermissionNum_resultStandardSchemeFactory implements SchemeFactory {
      public getPermissionNum_resultStandardScheme getScheme() {
        return new getPermissionNum_resultStandardScheme();
      }
    }

    private static class getPermissionNum_resultStandardScheme extends StandardScheme<getPermissionNum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPermissionNum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPermissionNum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPermissionNum_resultTupleSchemeFactory implements SchemeFactory {
      public getPermissionNum_resultTupleScheme getScheme() {
        return new getPermissionNum_resultTupleScheme();
      }
    }

    private static class getPermissionNum_resultTupleScheme extends TupleScheme<getPermissionNum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPermissionNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPermissionNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addRecommendHotStock_args implements org.apache.thrift.TBase<addRecommendHotStock_args, addRecommendHotStock_args._Fields>, java.io.Serializable, Cloneable, Comparable<addRecommendHotStock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRecommendHotStock_args");

    private static final org.apache.thrift.protocol.TField RECOMMEND_HOT_STOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("recommendHotStock", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRecommendHotStock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRecommendHotStock_argsTupleSchemeFactory());
    }

    public String recommendHotStock; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECOMMEND_HOT_STOCK((short)1, "recommendHotStock");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECOMMEND_HOT_STOCK
            return RECOMMEND_HOT_STOCK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECOMMEND_HOT_STOCK, new org.apache.thrift.meta_data.FieldMetaData("recommendHotStock", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRecommendHotStock_args.class, metaDataMap);
    }

    public addRecommendHotStock_args() {
    }

    public addRecommendHotStock_args(
      String recommendHotStock)
    {
      this();
      this.recommendHotStock = recommendHotStock;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRecommendHotStock_args(addRecommendHotStock_args other) {
      if (other.isSetRecommendHotStock()) {
        this.recommendHotStock = other.recommendHotStock;
      }
    }

    public addRecommendHotStock_args deepCopy() {
      return new addRecommendHotStock_args(this);
    }

    @Override
    public void clear() {
      this.recommendHotStock = null;
    }

    public String getRecommendHotStock() {
      return this.recommendHotStock;
    }

    public addRecommendHotStock_args setRecommendHotStock(String recommendHotStock) {
      this.recommendHotStock = recommendHotStock;
      return this;
    }

    public void unsetRecommendHotStock() {
      this.recommendHotStock = null;
    }

    /** Returns true if field recommendHotStock is set (has been assigned a value) and false otherwise */
    public boolean isSetRecommendHotStock() {
      return this.recommendHotStock != null;
    }

    public void setRecommendHotStockIsSet(boolean value) {
      if (!value) {
        this.recommendHotStock = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RECOMMEND_HOT_STOCK:
        if (value == null) {
          unsetRecommendHotStock();
        } else {
          setRecommendHotStock((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RECOMMEND_HOT_STOCK:
        return getRecommendHotStock();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RECOMMEND_HOT_STOCK:
        return isSetRecommendHotStock();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRecommendHotStock_args)
        return this.equals((addRecommendHotStock_args)that);
      return false;
    }

    public boolean equals(addRecommendHotStock_args that) {
      if (that == null)
        return false;

      boolean this_present_recommendHotStock = true && this.isSetRecommendHotStock();
      boolean that_present_recommendHotStock = true && that.isSetRecommendHotStock();
      if (this_present_recommendHotStock || that_present_recommendHotStock) {
        if (!(this_present_recommendHotStock && that_present_recommendHotStock))
          return false;
        if (!this.recommendHotStock.equals(that.recommendHotStock))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_recommendHotStock = true && (isSetRecommendHotStock());
      list.add(present_recommendHotStock);
      if (present_recommendHotStock)
        list.add(recommendHotStock);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRecommendHotStock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRecommendHotStock()).compareTo(other.isSetRecommendHotStock());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecommendHotStock()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommendHotStock, other.recommendHotStock);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRecommendHotStock_args(");
      boolean first = true;

      sb.append("recommendHotStock:");
      if (this.recommendHotStock == null) {
        sb.append("null");
      } else {
        sb.append(this.recommendHotStock);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRecommendHotStock_argsStandardSchemeFactory implements SchemeFactory {
      public addRecommendHotStock_argsStandardScheme getScheme() {
        return new addRecommendHotStock_argsStandardScheme();
      }
    }

    private static class addRecommendHotStock_argsStandardScheme extends StandardScheme<addRecommendHotStock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRecommendHotStock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECOMMEND_HOT_STOCK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.recommendHotStock = iprot.readString();
                struct.setRecommendHotStockIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRecommendHotStock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.recommendHotStock != null) {
          oprot.writeFieldBegin(RECOMMEND_HOT_STOCK_FIELD_DESC);
          oprot.writeString(struct.recommendHotStock);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRecommendHotStock_argsTupleSchemeFactory implements SchemeFactory {
      public addRecommendHotStock_argsTupleScheme getScheme() {
        return new addRecommendHotStock_argsTupleScheme();
      }
    }

    private static class addRecommendHotStock_argsTupleScheme extends TupleScheme<addRecommendHotStock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRecommendHotStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRecommendHotStock()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRecommendHotStock()) {
          oprot.writeString(struct.recommendHotStock);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRecommendHotStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.recommendHotStock = iprot.readString();
          struct.setRecommendHotStockIsSet(true);
        }
      }
    }

  }

  public static class addRecommendHotStock_result implements org.apache.thrift.TBase<addRecommendHotStock_result, addRecommendHotStock_result._Fields>, java.io.Serializable, Cloneable, Comparable<addRecommendHotStock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRecommendHotStock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRecommendHotStock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRecommendHotStock_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRecommendHotStock_result.class, metaDataMap);
    }

    public addRecommendHotStock_result() {
    }

    public addRecommendHotStock_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRecommendHotStock_result(addRecommendHotStock_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addRecommendHotStock_result deepCopy() {
      return new addRecommendHotStock_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addRecommendHotStock_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRecommendHotStock_result)
        return this.equals((addRecommendHotStock_result)that);
      return false;
    }

    public boolean equals(addRecommendHotStock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRecommendHotStock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRecommendHotStock_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRecommendHotStock_resultStandardSchemeFactory implements SchemeFactory {
      public addRecommendHotStock_resultStandardScheme getScheme() {
        return new addRecommendHotStock_resultStandardScheme();
      }
    }

    private static class addRecommendHotStock_resultStandardScheme extends StandardScheme<addRecommendHotStock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRecommendHotStock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRecommendHotStock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRecommendHotStock_resultTupleSchemeFactory implements SchemeFactory {
      public addRecommendHotStock_resultTupleScheme getScheme() {
        return new addRecommendHotStock_resultTupleScheme();
      }
    }

    private static class addRecommendHotStock_resultTupleScheme extends TupleScheme<addRecommendHotStock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRecommendHotStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRecommendHotStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class batchAddRecommendHotStock_args implements org.apache.thrift.TBase<batchAddRecommendHotStock_args, batchAddRecommendHotStock_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchAddRecommendHotStock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchAddRecommendHotStock_args");

    private static final org.apache.thrift.protocol.TField RECOMMEND_HOT_STOCK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("recommendHotStockList", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchAddRecommendHotStock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchAddRecommendHotStock_argsTupleSchemeFactory());
    }

    public String recommendHotStockList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECOMMEND_HOT_STOCK_LIST((short)1, "recommendHotStockList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECOMMEND_HOT_STOCK_LIST
            return RECOMMEND_HOT_STOCK_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECOMMEND_HOT_STOCK_LIST, new org.apache.thrift.meta_data.FieldMetaData("recommendHotStockList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchAddRecommendHotStock_args.class, metaDataMap);
    }

    public batchAddRecommendHotStock_args() {
    }

    public batchAddRecommendHotStock_args(
      String recommendHotStockList)
    {
      this();
      this.recommendHotStockList = recommendHotStockList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchAddRecommendHotStock_args(batchAddRecommendHotStock_args other) {
      if (other.isSetRecommendHotStockList()) {
        this.recommendHotStockList = other.recommendHotStockList;
      }
    }

    public batchAddRecommendHotStock_args deepCopy() {
      return new batchAddRecommendHotStock_args(this);
    }

    @Override
    public void clear() {
      this.recommendHotStockList = null;
    }

    public String getRecommendHotStockList() {
      return this.recommendHotStockList;
    }

    public batchAddRecommendHotStock_args setRecommendHotStockList(String recommendHotStockList) {
      this.recommendHotStockList = recommendHotStockList;
      return this;
    }

    public void unsetRecommendHotStockList() {
      this.recommendHotStockList = null;
    }

    /** Returns true if field recommendHotStockList is set (has been assigned a value) and false otherwise */
    public boolean isSetRecommendHotStockList() {
      return this.recommendHotStockList != null;
    }

    public void setRecommendHotStockListIsSet(boolean value) {
      if (!value) {
        this.recommendHotStockList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RECOMMEND_HOT_STOCK_LIST:
        if (value == null) {
          unsetRecommendHotStockList();
        } else {
          setRecommendHotStockList((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RECOMMEND_HOT_STOCK_LIST:
        return getRecommendHotStockList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RECOMMEND_HOT_STOCK_LIST:
        return isSetRecommendHotStockList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchAddRecommendHotStock_args)
        return this.equals((batchAddRecommendHotStock_args)that);
      return false;
    }

    public boolean equals(batchAddRecommendHotStock_args that) {
      if (that == null)
        return false;

      boolean this_present_recommendHotStockList = true && this.isSetRecommendHotStockList();
      boolean that_present_recommendHotStockList = true && that.isSetRecommendHotStockList();
      if (this_present_recommendHotStockList || that_present_recommendHotStockList) {
        if (!(this_present_recommendHotStockList && that_present_recommendHotStockList))
          return false;
        if (!this.recommendHotStockList.equals(that.recommendHotStockList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_recommendHotStockList = true && (isSetRecommendHotStockList());
      list.add(present_recommendHotStockList);
      if (present_recommendHotStockList)
        list.add(recommendHotStockList);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchAddRecommendHotStock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRecommendHotStockList()).compareTo(other.isSetRecommendHotStockList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecommendHotStockList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommendHotStockList, other.recommendHotStockList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchAddRecommendHotStock_args(");
      boolean first = true;

      sb.append("recommendHotStockList:");
      if (this.recommendHotStockList == null) {
        sb.append("null");
      } else {
        sb.append(this.recommendHotStockList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchAddRecommendHotStock_argsStandardSchemeFactory implements SchemeFactory {
      public batchAddRecommendHotStock_argsStandardScheme getScheme() {
        return new batchAddRecommendHotStock_argsStandardScheme();
      }
    }

    private static class batchAddRecommendHotStock_argsStandardScheme extends StandardScheme<batchAddRecommendHotStock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchAddRecommendHotStock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECOMMEND_HOT_STOCK_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.recommendHotStockList = iprot.readString();
                struct.setRecommendHotStockListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchAddRecommendHotStock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.recommendHotStockList != null) {
          oprot.writeFieldBegin(RECOMMEND_HOT_STOCK_LIST_FIELD_DESC);
          oprot.writeString(struct.recommendHotStockList);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchAddRecommendHotStock_argsTupleSchemeFactory implements SchemeFactory {
      public batchAddRecommendHotStock_argsTupleScheme getScheme() {
        return new batchAddRecommendHotStock_argsTupleScheme();
      }
    }

    private static class batchAddRecommendHotStock_argsTupleScheme extends TupleScheme<batchAddRecommendHotStock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchAddRecommendHotStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRecommendHotStockList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRecommendHotStockList()) {
          oprot.writeString(struct.recommendHotStockList);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchAddRecommendHotStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.recommendHotStockList = iprot.readString();
          struct.setRecommendHotStockListIsSet(true);
        }
      }
    }

  }

  public static class batchAddRecommendHotStock_result implements org.apache.thrift.TBase<batchAddRecommendHotStock_result, batchAddRecommendHotStock_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchAddRecommendHotStock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchAddRecommendHotStock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchAddRecommendHotStock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchAddRecommendHotStock_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchAddRecommendHotStock_result.class, metaDataMap);
    }

    public batchAddRecommendHotStock_result() {
    }

    public batchAddRecommendHotStock_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchAddRecommendHotStock_result(batchAddRecommendHotStock_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public batchAddRecommendHotStock_result deepCopy() {
      return new batchAddRecommendHotStock_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public batchAddRecommendHotStock_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchAddRecommendHotStock_result)
        return this.equals((batchAddRecommendHotStock_result)that);
      return false;
    }

    public boolean equals(batchAddRecommendHotStock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchAddRecommendHotStock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchAddRecommendHotStock_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchAddRecommendHotStock_resultStandardSchemeFactory implements SchemeFactory {
      public batchAddRecommendHotStock_resultStandardScheme getScheme() {
        return new batchAddRecommendHotStock_resultStandardScheme();
      }
    }

    private static class batchAddRecommendHotStock_resultStandardScheme extends StandardScheme<batchAddRecommendHotStock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchAddRecommendHotStock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchAddRecommendHotStock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchAddRecommendHotStock_resultTupleSchemeFactory implements SchemeFactory {
      public batchAddRecommendHotStock_resultTupleScheme getScheme() {
        return new batchAddRecommendHotStock_resultTupleScheme();
      }
    }

    private static class batchAddRecommendHotStock_resultTupleScheme extends TupleScheme<batchAddRecommendHotStock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchAddRecommendHotStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchAddRecommendHotStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delRecommendHotStock_args implements org.apache.thrift.TBase<delRecommendHotStock_args, delRecommendHotStock_args._Fields>, java.io.Serializable, Cloneable, Comparable<delRecommendHotStock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delRecommendHotStock_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delRecommendHotStock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delRecommendHotStock_argsTupleSchemeFactory());
    }

    public int strategyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delRecommendHotStock_args.class, metaDataMap);
    }

    public delRecommendHotStock_args() {
    }

    public delRecommendHotStock_args(
      int strategyId)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delRecommendHotStock_args(delRecommendHotStock_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
    }

    public delRecommendHotStock_args deepCopy() {
      return new delRecommendHotStock_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public delRecommendHotStock_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delRecommendHotStock_args)
        return this.equals((delRecommendHotStock_args)that);
      return false;
    }

    public boolean equals(delRecommendHotStock_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(delRecommendHotStock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delRecommendHotStock_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delRecommendHotStock_argsStandardSchemeFactory implements SchemeFactory {
      public delRecommendHotStock_argsStandardScheme getScheme() {
        return new delRecommendHotStock_argsStandardScheme();
      }
    }

    private static class delRecommendHotStock_argsStandardScheme extends StandardScheme<delRecommendHotStock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delRecommendHotStock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delRecommendHotStock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delRecommendHotStock_argsTupleSchemeFactory implements SchemeFactory {
      public delRecommendHotStock_argsTupleScheme getScheme() {
        return new delRecommendHotStock_argsTupleScheme();
      }
    }

    private static class delRecommendHotStock_argsTupleScheme extends TupleScheme<delRecommendHotStock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delRecommendHotStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delRecommendHotStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
      }
    }

  }

  public static class delRecommendHotStock_result implements org.apache.thrift.TBase<delRecommendHotStock_result, delRecommendHotStock_result._Fields>, java.io.Serializable, Cloneable, Comparable<delRecommendHotStock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delRecommendHotStock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delRecommendHotStock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delRecommendHotStock_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delRecommendHotStock_result.class, metaDataMap);
    }

    public delRecommendHotStock_result() {
    }

    public delRecommendHotStock_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delRecommendHotStock_result(delRecommendHotStock_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delRecommendHotStock_result deepCopy() {
      return new delRecommendHotStock_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delRecommendHotStock_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delRecommendHotStock_result)
        return this.equals((delRecommendHotStock_result)that);
      return false;
    }

    public boolean equals(delRecommendHotStock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delRecommendHotStock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delRecommendHotStock_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delRecommendHotStock_resultStandardSchemeFactory implements SchemeFactory {
      public delRecommendHotStock_resultStandardScheme getScheme() {
        return new delRecommendHotStock_resultStandardScheme();
      }
    }

    private static class delRecommendHotStock_resultStandardScheme extends StandardScheme<delRecommendHotStock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delRecommendHotStock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delRecommendHotStock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delRecommendHotStock_resultTupleSchemeFactory implements SchemeFactory {
      public delRecommendHotStock_resultTupleScheme getScheme() {
        return new delRecommendHotStock_resultTupleScheme();
      }
    }

    private static class delRecommendHotStock_resultTupleScheme extends TupleScheme<delRecommendHotStock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delRecommendHotStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delRecommendHotStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRecommendHotStockList_args implements org.apache.thrift.TBase<getRecommendHotStockList_args, getRecommendHotStockList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecommendHotStockList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecommendHotStockList_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecommendHotStockList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecommendHotStockList_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public int type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      TYPE((short)2, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private static final int __TYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecommendHotStockList_args.class, metaDataMap);
    }

    public getRecommendHotStockList_args() {
    }

    public getRecommendHotStockList_args(
      int strategyId,
      int type)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.type = type;
      setTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecommendHotStockList_args(getRecommendHotStockList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      this.type = other.type;
    }

    public getRecommendHotStockList_args deepCopy() {
      return new getRecommendHotStockList_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setTypeIsSet(false);
      this.type = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public getRecommendHotStockList_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public int getType() {
      return this.type;
    }

    public getRecommendHotStockList_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case TYPE:
        return getType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecommendHotStockList_args)
        return this.equals((getRecommendHotStockList_args)that);
      return false;
    }

    public boolean equals(getRecommendHotStockList_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecommendHotStockList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecommendHotStockList_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecommendHotStockList_argsStandardSchemeFactory implements SchemeFactory {
      public getRecommendHotStockList_argsStandardScheme getScheme() {
        return new getRecommendHotStockList_argsStandardScheme();
      }
    }

    private static class getRecommendHotStockList_argsStandardScheme extends StandardScheme<getRecommendHotStockList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecommendHotStockList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecommendHotStockList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecommendHotStockList_argsTupleSchemeFactory implements SchemeFactory {
      public getRecommendHotStockList_argsTupleScheme getScheme() {
        return new getRecommendHotStockList_argsTupleScheme();
      }
    }

    private static class getRecommendHotStockList_argsTupleScheme extends TupleScheme<getRecommendHotStockList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecommendHotStockList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecommendHotStockList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
      }
    }

  }

  public static class getRecommendHotStockList_result implements org.apache.thrift.TBase<getRecommendHotStockList_result, getRecommendHotStockList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecommendHotStockList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecommendHotStockList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecommendHotStockList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecommendHotStockList_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecommendHotStockList_result.class, metaDataMap);
    }

    public getRecommendHotStockList_result() {
    }

    public getRecommendHotStockList_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecommendHotStockList_result(getRecommendHotStockList_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getRecommendHotStockList_result deepCopy() {
      return new getRecommendHotStockList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getRecommendHotStockList_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecommendHotStockList_result)
        return this.equals((getRecommendHotStockList_result)that);
      return false;
    }

    public boolean equals(getRecommendHotStockList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecommendHotStockList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecommendHotStockList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecommendHotStockList_resultStandardSchemeFactory implements SchemeFactory {
      public getRecommendHotStockList_resultStandardScheme getScheme() {
        return new getRecommendHotStockList_resultStandardScheme();
      }
    }

    private static class getRecommendHotStockList_resultStandardScheme extends StandardScheme<getRecommendHotStockList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecommendHotStockList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecommendHotStockList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecommendHotStockList_resultTupleSchemeFactory implements SchemeFactory {
      public getRecommendHotStockList_resultTupleScheme getScheme() {
        return new getRecommendHotStockList_resultTupleScheme();
      }
    }

    private static class getRecommendHotStockList_resultTupleScheme extends TupleScheme<getRecommendHotStockList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecommendHotStockList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecommendHotStockList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryStrategyReport_args implements org.apache.thrift.TBase<queryStrategyReport_args, queryStrategyReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryStrategyReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStrategyReport_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("stocks", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStrategyReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStrategyReport_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public String stocks; // required
    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      STOCKS((short)2, "stocks"),
      USER_ID((short)3, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // STOCKS
            return STOCKS;
          case 3: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private static final int __USERID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCKS, new org.apache.thrift.meta_data.FieldMetaData("stocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStrategyReport_args.class, metaDataMap);
    }

    public queryStrategyReport_args() {
    }

    public queryStrategyReport_args(
      int strategyId,
      String stocks,
      int userId)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.stocks = stocks;
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStrategyReport_args(queryStrategyReport_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      if (other.isSetStocks()) {
        this.stocks = other.stocks;
      }
      this.userId = other.userId;
    }

    public queryStrategyReport_args deepCopy() {
      return new queryStrategyReport_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      this.stocks = null;
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public queryStrategyReport_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public String getStocks() {
      return this.stocks;
    }

    public queryStrategyReport_args setStocks(String stocks) {
      this.stocks = stocks;
      return this;
    }

    public void unsetStocks() {
      this.stocks = null;
    }

    /** Returns true if field stocks is set (has been assigned a value) and false otherwise */
    public boolean isSetStocks() {
      return this.stocks != null;
    }

    public void setStocksIsSet(boolean value) {
      if (!value) {
        this.stocks = null;
      }
    }

    public int getUserId() {
      return this.userId;
    }

    public queryStrategyReport_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case STOCKS:
        if (value == null) {
          unsetStocks();
        } else {
          setStocks((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case STOCKS:
        return getStocks();

      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case STOCKS:
        return isSetStocks();
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStrategyReport_args)
        return this.equals((queryStrategyReport_args)that);
      return false;
    }

    public boolean equals(queryStrategyReport_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_stocks = true && this.isSetStocks();
      boolean that_present_stocks = true && that.isSetStocks();
      if (this_present_stocks || that_present_stocks) {
        if (!(this_present_stocks && that_present_stocks))
          return false;
        if (!this.stocks.equals(that.stocks))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_stocks = true && (isSetStocks());
      list.add(present_stocks);
      if (present_stocks)
        list.add(stocks);

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryStrategyReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStocks()).compareTo(other.isSetStocks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStocks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stocks, other.stocks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStrategyReport_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stocks:");
      if (this.stocks == null) {
        sb.append("null");
      } else {
        sb.append(this.stocks);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStrategyReport_argsStandardSchemeFactory implements SchemeFactory {
      public queryStrategyReport_argsStandardScheme getScheme() {
        return new queryStrategyReport_argsStandardScheme();
      }
    }

    private static class queryStrategyReport_argsStandardScheme extends StandardScheme<queryStrategyReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStrategyReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOCKS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stocks = iprot.readString();
                struct.setStocksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStrategyReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        if (struct.stocks != null) {
          oprot.writeFieldBegin(STOCKS_FIELD_DESC);
          oprot.writeString(struct.stocks);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStrategyReport_argsTupleSchemeFactory implements SchemeFactory {
      public queryStrategyReport_argsTupleScheme getScheme() {
        return new queryStrategyReport_argsTupleScheme();
      }
    }

    private static class queryStrategyReport_argsTupleScheme extends TupleScheme<queryStrategyReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStrategyReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetStocks()) {
          optionals.set(1);
        }
        if (struct.isSetUserId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStocks()) {
          oprot.writeString(struct.stocks);
        }
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStrategyReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stocks = iprot.readString();
          struct.setStocksIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class queryStrategyReport_result implements org.apache.thrift.TBase<queryStrategyReport_result, queryStrategyReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryStrategyReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStrategyReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStrategyReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStrategyReport_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStrategyReport_result.class, metaDataMap);
    }

    public queryStrategyReport_result() {
    }

    public queryStrategyReport_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStrategyReport_result(queryStrategyReport_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryStrategyReport_result deepCopy() {
      return new queryStrategyReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryStrategyReport_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStrategyReport_result)
        return this.equals((queryStrategyReport_result)that);
      return false;
    }

    public boolean equals(queryStrategyReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryStrategyReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStrategyReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStrategyReport_resultStandardSchemeFactory implements SchemeFactory {
      public queryStrategyReport_resultStandardScheme getScheme() {
        return new queryStrategyReport_resultStandardScheme();
      }
    }

    private static class queryStrategyReport_resultStandardScheme extends StandardScheme<queryStrategyReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStrategyReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStrategyReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStrategyReport_resultTupleSchemeFactory implements SchemeFactory {
      public queryStrategyReport_resultTupleScheme getScheme() {
        return new queryStrategyReport_resultTupleScheme();
      }
    }

    private static class queryStrategyReport_resultTupleScheme extends TupleScheme<queryStrategyReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStrategyReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStrategyReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findStockByStrategyAndStock_args implements org.apache.thrift.TBase<findStockByStrategyAndStock_args, findStockByStrategyAndStock_args._Fields>, java.io.Serializable, Cloneable, Comparable<findStockByStrategyAndStock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStockByStrategyAndStock_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STOCK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stockCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStockByStrategyAndStock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStockByStrategyAndStock_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public String stockCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      STOCK_CODE((short)2, "stockCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // STOCK_CODE
            return STOCK_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCK_CODE, new org.apache.thrift.meta_data.FieldMetaData("stockCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStockByStrategyAndStock_args.class, metaDataMap);
    }

    public findStockByStrategyAndStock_args() {
    }

    public findStockByStrategyAndStock_args(
      int strategyId,
      String stockCode)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.stockCode = stockCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStockByStrategyAndStock_args(findStockByStrategyAndStock_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      if (other.isSetStockCode()) {
        this.stockCode = other.stockCode;
      }
    }

    public findStockByStrategyAndStock_args deepCopy() {
      return new findStockByStrategyAndStock_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      this.stockCode = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public findStockByStrategyAndStock_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public String getStockCode() {
      return this.stockCode;
    }

    public findStockByStrategyAndStock_args setStockCode(String stockCode) {
      this.stockCode = stockCode;
      return this;
    }

    public void unsetStockCode() {
      this.stockCode = null;
    }

    /** Returns true if field stockCode is set (has been assigned a value) and false otherwise */
    public boolean isSetStockCode() {
      return this.stockCode != null;
    }

    public void setStockCodeIsSet(boolean value) {
      if (!value) {
        this.stockCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case STOCK_CODE:
        if (value == null) {
          unsetStockCode();
        } else {
          setStockCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case STOCK_CODE:
        return getStockCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case STOCK_CODE:
        return isSetStockCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStockByStrategyAndStock_args)
        return this.equals((findStockByStrategyAndStock_args)that);
      return false;
    }

    public boolean equals(findStockByStrategyAndStock_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_stockCode = true && this.isSetStockCode();
      boolean that_present_stockCode = true && that.isSetStockCode();
      if (this_present_stockCode || that_present_stockCode) {
        if (!(this_present_stockCode && that_present_stockCode))
          return false;
        if (!this.stockCode.equals(that.stockCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_stockCode = true && (isSetStockCode());
      list.add(present_stockCode);
      if (present_stockCode)
        list.add(stockCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(findStockByStrategyAndStock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStockCode()).compareTo(other.isSetStockCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStockCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockCode, other.stockCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStockByStrategyAndStock_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stockCode:");
      if (this.stockCode == null) {
        sb.append("null");
      } else {
        sb.append(this.stockCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStockByStrategyAndStock_argsStandardSchemeFactory implements SchemeFactory {
      public findStockByStrategyAndStock_argsStandardScheme getScheme() {
        return new findStockByStrategyAndStock_argsStandardScheme();
      }
    }

    private static class findStockByStrategyAndStock_argsStandardScheme extends StandardScheme<findStockByStrategyAndStock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStockByStrategyAndStock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOCK_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stockCode = iprot.readString();
                struct.setStockCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStockByStrategyAndStock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        if (struct.stockCode != null) {
          oprot.writeFieldBegin(STOCK_CODE_FIELD_DESC);
          oprot.writeString(struct.stockCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStockByStrategyAndStock_argsTupleSchemeFactory implements SchemeFactory {
      public findStockByStrategyAndStock_argsTupleScheme getScheme() {
        return new findStockByStrategyAndStock_argsTupleScheme();
      }
    }

    private static class findStockByStrategyAndStock_argsTupleScheme extends TupleScheme<findStockByStrategyAndStock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStockByStrategyAndStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetStockCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStockCode()) {
          oprot.writeString(struct.stockCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStockByStrategyAndStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stockCode = iprot.readString();
          struct.setStockCodeIsSet(true);
        }
      }
    }

  }

  public static class findStockByStrategyAndStock_result implements org.apache.thrift.TBase<findStockByStrategyAndStock_result, findStockByStrategyAndStock_result._Fields>, java.io.Serializable, Cloneable, Comparable<findStockByStrategyAndStock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStockByStrategyAndStock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStockByStrategyAndStock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStockByStrategyAndStock_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStockByStrategyAndStock_result.class, metaDataMap);
    }

    public findStockByStrategyAndStock_result() {
    }

    public findStockByStrategyAndStock_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStockByStrategyAndStock_result(findStockByStrategyAndStock_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public findStockByStrategyAndStock_result deepCopy() {
      return new findStockByStrategyAndStock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findStockByStrategyAndStock_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStockByStrategyAndStock_result)
        return this.equals((findStockByStrategyAndStock_result)that);
      return false;
    }

    public boolean equals(findStockByStrategyAndStock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findStockByStrategyAndStock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStockByStrategyAndStock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStockByStrategyAndStock_resultStandardSchemeFactory implements SchemeFactory {
      public findStockByStrategyAndStock_resultStandardScheme getScheme() {
        return new findStockByStrategyAndStock_resultStandardScheme();
      }
    }

    private static class findStockByStrategyAndStock_resultStandardScheme extends StandardScheme<findStockByStrategyAndStock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStockByStrategyAndStock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStockByStrategyAndStock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStockByStrategyAndStock_resultTupleSchemeFactory implements SchemeFactory {
      public findStockByStrategyAndStock_resultTupleScheme getScheme() {
        return new findStockByStrategyAndStock_resultTupleScheme();
      }
    }

    private static class findStockByStrategyAndStock_resultTupleScheme extends TupleScheme<findStockByStrategyAndStock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStockByStrategyAndStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStockByStrategyAndStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delRecommendHotStockByType_args implements org.apache.thrift.TBase<delRecommendHotStockByType_args, delRecommendHotStockByType_args._Fields>, java.io.Serializable, Cloneable, Comparable<delRecommendHotStockByType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delRecommendHotStockByType_args");

    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delRecommendHotStockByType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delRecommendHotStockByType_argsTupleSchemeFactory());
    }

    public int type; // required
    public int strategyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TYPE((short)1, "type"),
      STRATEGY_ID((short)2, "strategyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE
            return TYPE;
          case 2: // STRATEGY_ID
            return STRATEGY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private static final int __STRATEGYID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delRecommendHotStockByType_args.class, metaDataMap);
    }

    public delRecommendHotStockByType_args() {
    }

    public delRecommendHotStockByType_args(
      int type,
      int strategyId)
    {
      this();
      this.type = type;
      setTypeIsSet(true);
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delRecommendHotStockByType_args(delRecommendHotStockByType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.type = other.type;
      this.strategyId = other.strategyId;
    }

    public delRecommendHotStockByType_args deepCopy() {
      return new delRecommendHotStockByType_args(this);
    }

    @Override
    public void clear() {
      setTypeIsSet(false);
      this.type = 0;
      setStrategyIdIsSet(false);
      this.strategyId = 0;
    }

    public int getType() {
      return this.type;
    }

    public delRecommendHotStockByType_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public delRecommendHotStockByType_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE:
        return getType();

      case STRATEGY_ID:
        return getStrategyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TYPE:
        return isSetType();
      case STRATEGY_ID:
        return isSetStrategyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delRecommendHotStockByType_args)
        return this.equals((delRecommendHotStockByType_args)that);
      return false;
    }

    public boolean equals(delRecommendHotStockByType_args that) {
      if (that == null)
        return false;

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(delRecommendHotStockByType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delRecommendHotStockByType_args(");
      boolean first = true;

      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delRecommendHotStockByType_argsStandardSchemeFactory implements SchemeFactory {
      public delRecommendHotStockByType_argsStandardScheme getScheme() {
        return new delRecommendHotStockByType_argsStandardScheme();
      }
    }

    private static class delRecommendHotStockByType_argsStandardScheme extends StandardScheme<delRecommendHotStockByType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delRecommendHotStockByType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delRecommendHotStockByType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delRecommendHotStockByType_argsTupleSchemeFactory implements SchemeFactory {
      public delRecommendHotStockByType_argsTupleScheme getScheme() {
        return new delRecommendHotStockByType_argsTupleScheme();
      }
    }

    private static class delRecommendHotStockByType_argsTupleScheme extends TupleScheme<delRecommendHotStockByType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delRecommendHotStockByType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetType()) {
          optionals.set(0);
        }
        if (struct.isSetStrategyId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delRecommendHotStockByType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
      }
    }

  }

  public static class delRecommendHotStockByType_result implements org.apache.thrift.TBase<delRecommendHotStockByType_result, delRecommendHotStockByType_result._Fields>, java.io.Serializable, Cloneable, Comparable<delRecommendHotStockByType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delRecommendHotStockByType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delRecommendHotStockByType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delRecommendHotStockByType_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delRecommendHotStockByType_result.class, metaDataMap);
    }

    public delRecommendHotStockByType_result() {
    }

    public delRecommendHotStockByType_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delRecommendHotStockByType_result(delRecommendHotStockByType_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delRecommendHotStockByType_result deepCopy() {
      return new delRecommendHotStockByType_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delRecommendHotStockByType_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delRecommendHotStockByType_result)
        return this.equals((delRecommendHotStockByType_result)that);
      return false;
    }

    public boolean equals(delRecommendHotStockByType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delRecommendHotStockByType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delRecommendHotStockByType_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delRecommendHotStockByType_resultStandardSchemeFactory implements SchemeFactory {
      public delRecommendHotStockByType_resultStandardScheme getScheme() {
        return new delRecommendHotStockByType_resultStandardScheme();
      }
    }

    private static class delRecommendHotStockByType_resultStandardScheme extends StandardScheme<delRecommendHotStockByType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delRecommendHotStockByType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delRecommendHotStockByType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delRecommendHotStockByType_resultTupleSchemeFactory implements SchemeFactory {
      public delRecommendHotStockByType_resultTupleScheme getScheme() {
        return new delRecommendHotStockByType_resultTupleScheme();
      }
    }

    private static class delRecommendHotStockByType_resultTupleScheme extends TupleScheme<delRecommendHotStockByType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delRecommendHotStockByType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delRecommendHotStockByType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class dredgeStrategyAuthByMq_args implements org.apache.thrift.TBase<dredgeStrategyAuthByMq_args, dredgeStrategyAuthByMq_args._Fields>, java.io.Serializable, Cloneable, Comparable<dredgeStrategyAuthByMq_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dredgeStrategyAuthByMq_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("payType", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dredgeStrategyAuthByMq_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dredgeStrategyAuthByMq_argsTupleSchemeFactory());
    }

    public int userId; // required
    public int strategyId; // required
    public int day; // required
    public String payType; // required
    public double price; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      STRATEGY_ID((short)2, "strategyId"),
      DAY((short)3, "day"),
      PAY_TYPE((short)4, "payType"),
      PRICE((short)5, "price");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // STRATEGY_ID
            return STRATEGY_ID;
          case 3: // DAY
            return DAY;
          case 4: // PAY_TYPE
            return PAY_TYPE;
          case 5: // PRICE
            return PRICE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __STRATEGYID_ISSET_ID = 1;
    private static final int __DAY_ISSET_ID = 2;
    private static final int __PRICE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("payType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dredgeStrategyAuthByMq_args.class, metaDataMap);
    }

    public dredgeStrategyAuthByMq_args() {
    }

    public dredgeStrategyAuthByMq_args(
      int userId,
      int strategyId,
      int day,
      String payType,
      double price)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.day = day;
      setDayIsSet(true);
      this.payType = payType;
      this.price = price;
      setPriceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dredgeStrategyAuthByMq_args(dredgeStrategyAuthByMq_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.strategyId = other.strategyId;
      this.day = other.day;
      if (other.isSetPayType()) {
        this.payType = other.payType;
      }
      this.price = other.price;
    }

    public dredgeStrategyAuthByMq_args deepCopy() {
      return new dredgeStrategyAuthByMq_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setDayIsSet(false);
      this.day = 0;
      this.payType = null;
      setPriceIsSet(false);
      this.price = 0.0;
    }

    public int getUserId() {
      return this.userId;
    }

    public dredgeStrategyAuthByMq_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public dredgeStrategyAuthByMq_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public int getDay() {
      return this.day;
    }

    public dredgeStrategyAuthByMq_args setDay(int day) {
      this.day = day;
      setDayIsSet(true);
      return this;
    }

    public void unsetDay() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAY_ISSET_ID);
    }

    /** Returns true if field day is set (has been assigned a value) and false otherwise */
    public boolean isSetDay() {
      return EncodingUtils.testBit(__isset_bitfield, __DAY_ISSET_ID);
    }

    public void setDayIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAY_ISSET_ID, value);
    }

    public String getPayType() {
      return this.payType;
    }

    public dredgeStrategyAuthByMq_args setPayType(String payType) {
      this.payType = payType;
      return this;
    }

    public void unsetPayType() {
      this.payType = null;
    }

    /** Returns true if field payType is set (has been assigned a value) and false otherwise */
    public boolean isSetPayType() {
      return this.payType != null;
    }

    public void setPayTypeIsSet(boolean value) {
      if (!value) {
        this.payType = null;
      }
    }

    public double getPrice() {
      return this.price;
    }

    public dredgeStrategyAuthByMq_args setPrice(double price) {
      this.price = price;
      setPriceIsSet(true);
      return this;
    }

    public void unsetPrice() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
    }

    /** Returns true if field price is set (has been assigned a value) and false otherwise */
    public boolean isSetPrice() {
      return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
    }

    public void setPriceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case DAY:
        if (value == null) {
          unsetDay();
        } else {
          setDay((Integer)value);
        }
        break;

      case PAY_TYPE:
        if (value == null) {
          unsetPayType();
        } else {
          setPayType((String)value);
        }
        break;

      case PRICE:
        if (value == null) {
          unsetPrice();
        } else {
          setPrice((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case STRATEGY_ID:
        return getStrategyId();

      case DAY:
        return getDay();

      case PAY_TYPE:
        return getPayType();

      case PRICE:
        return getPrice();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case STRATEGY_ID:
        return isSetStrategyId();
      case DAY:
        return isSetDay();
      case PAY_TYPE:
        return isSetPayType();
      case PRICE:
        return isSetPrice();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dredgeStrategyAuthByMq_args)
        return this.equals((dredgeStrategyAuthByMq_args)that);
      return false;
    }

    public boolean equals(dredgeStrategyAuthByMq_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_day = true;
      boolean that_present_day = true;
      if (this_present_day || that_present_day) {
        if (!(this_present_day && that_present_day))
          return false;
        if (this.day != that.day)
          return false;
      }

      boolean this_present_payType = true && this.isSetPayType();
      boolean that_present_payType = true && that.isSetPayType();
      if (this_present_payType || that_present_payType) {
        if (!(this_present_payType && that_present_payType))
          return false;
        if (!this.payType.equals(that.payType))
          return false;
      }

      boolean this_present_price = true;
      boolean that_present_price = true;
      if (this_present_price || that_present_price) {
        if (!(this_present_price && that_present_price))
          return false;
        if (this.price != that.price)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_day = true;
      list.add(present_day);
      if (present_day)
        list.add(day);

      boolean present_payType = true && (isSetPayType());
      list.add(present_payType);
      if (present_payType)
        list.add(payType);

      boolean present_price = true;
      list.add(present_price);
      if (present_price)
        list.add(price);

      return list.hashCode();
    }

    @Override
    public int compareTo(dredgeStrategyAuthByMq_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDay()).compareTo(other.isSetDay());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDay()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, other.day);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPayType()).compareTo(other.isSetPayType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPayType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payType, other.payType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrice()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dredgeStrategyAuthByMq_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("day:");
      sb.append(this.day);
      first = false;
      if (!first) sb.append(", ");
      sb.append("payType:");
      if (this.payType == null) {
        sb.append("null");
      } else {
        sb.append(this.payType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("price:");
      sb.append(this.price);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dredgeStrategyAuthByMq_argsStandardSchemeFactory implements SchemeFactory {
      public dredgeStrategyAuthByMq_argsStandardScheme getScheme() {
        return new dredgeStrategyAuthByMq_argsStandardScheme();
      }
    }

    private static class dredgeStrategyAuthByMq_argsStandardScheme extends StandardScheme<dredgeStrategyAuthByMq_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dredgeStrategyAuthByMq_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DAY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.day = iprot.readI32();
                struct.setDayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAY_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.payType = iprot.readString();
                struct.setPayTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PRICE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.price = iprot.readDouble();
                struct.setPriceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dredgeStrategyAuthByMq_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DAY_FIELD_DESC);
        oprot.writeI32(struct.day);
        oprot.writeFieldEnd();
        if (struct.payType != null) {
          oprot.writeFieldBegin(PAY_TYPE_FIELD_DESC);
          oprot.writeString(struct.payType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeDouble(struct.price);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dredgeStrategyAuthByMq_argsTupleSchemeFactory implements SchemeFactory {
      public dredgeStrategyAuthByMq_argsTupleScheme getScheme() {
        return new dredgeStrategyAuthByMq_argsTupleScheme();
      }
    }

    private static class dredgeStrategyAuthByMq_argsTupleScheme extends TupleScheme<dredgeStrategyAuthByMq_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dredgeStrategyAuthByMq_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetStrategyId()) {
          optionals.set(1);
        }
        if (struct.isSetDay()) {
          optionals.set(2);
        }
        if (struct.isSetPayType()) {
          optionals.set(3);
        }
        if (struct.isSetPrice()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetDay()) {
          oprot.writeI32(struct.day);
        }
        if (struct.isSetPayType()) {
          oprot.writeString(struct.payType);
        }
        if (struct.isSetPrice()) {
          oprot.writeDouble(struct.price);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dredgeStrategyAuthByMq_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.day = iprot.readI32();
          struct.setDayIsSet(true);
        }
        if (incoming.get(3)) {
          struct.payType = iprot.readString();
          struct.setPayTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.price = iprot.readDouble();
          struct.setPriceIsSet(true);
        }
      }
    }

  }

  public static class dredgeStrategyAuthByMq_result implements org.apache.thrift.TBase<dredgeStrategyAuthByMq_result, dredgeStrategyAuthByMq_result._Fields>, java.io.Serializable, Cloneable, Comparable<dredgeStrategyAuthByMq_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dredgeStrategyAuthByMq_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dredgeStrategyAuthByMq_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dredgeStrategyAuthByMq_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dredgeStrategyAuthByMq_result.class, metaDataMap);
    }

    public dredgeStrategyAuthByMq_result() {
    }

    public dredgeStrategyAuthByMq_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dredgeStrategyAuthByMq_result(dredgeStrategyAuthByMq_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public dredgeStrategyAuthByMq_result deepCopy() {
      return new dredgeStrategyAuthByMq_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public dredgeStrategyAuthByMq_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dredgeStrategyAuthByMq_result)
        return this.equals((dredgeStrategyAuthByMq_result)that);
      return false;
    }

    public boolean equals(dredgeStrategyAuthByMq_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(dredgeStrategyAuthByMq_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dredgeStrategyAuthByMq_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dredgeStrategyAuthByMq_resultStandardSchemeFactory implements SchemeFactory {
      public dredgeStrategyAuthByMq_resultStandardScheme getScheme() {
        return new dredgeStrategyAuthByMq_resultStandardScheme();
      }
    }

    private static class dredgeStrategyAuthByMq_resultStandardScheme extends StandardScheme<dredgeStrategyAuthByMq_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dredgeStrategyAuthByMq_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dredgeStrategyAuthByMq_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dredgeStrategyAuthByMq_resultTupleSchemeFactory implements SchemeFactory {
      public dredgeStrategyAuthByMq_resultTupleScheme getScheme() {
        return new dredgeStrategyAuthByMq_resultTupleScheme();
      }
    }

    private static class dredgeStrategyAuthByMq_resultTupleScheme extends TupleScheme<dredgeStrategyAuthByMq_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dredgeStrategyAuthByMq_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dredgeStrategyAuthByMq_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findStrategyByCategoryId_args implements org.apache.thrift.TBase<findStrategyByCategoryId_args, findStrategyByCategoryId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findStrategyByCategoryId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStrategyByCategoryId_args");

    private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStrategyByCategoryId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStrategyByCategoryId_argsTupleSchemeFactory());
    }

    public String categoryId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATEGORY_ID((short)1, "categoryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATEGORY_ID
            return CATEGORY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStrategyByCategoryId_args.class, metaDataMap);
    }

    public findStrategyByCategoryId_args() {
    }

    public findStrategyByCategoryId_args(
      String categoryId)
    {
      this();
      this.categoryId = categoryId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStrategyByCategoryId_args(findStrategyByCategoryId_args other) {
      if (other.isSetCategoryId()) {
        this.categoryId = other.categoryId;
      }
    }

    public findStrategyByCategoryId_args deepCopy() {
      return new findStrategyByCategoryId_args(this);
    }

    @Override
    public void clear() {
      this.categoryId = null;
    }

    public String getCategoryId() {
      return this.categoryId;
    }

    public findStrategyByCategoryId_args setCategoryId(String categoryId) {
      this.categoryId = categoryId;
      return this;
    }

    public void unsetCategoryId() {
      this.categoryId = null;
    }

    /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryId() {
      return this.categoryId != null;
    }

    public void setCategoryIdIsSet(boolean value) {
      if (!value) {
        this.categoryId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CATEGORY_ID:
        if (value == null) {
          unsetCategoryId();
        } else {
          setCategoryId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CATEGORY_ID:
        return getCategoryId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CATEGORY_ID:
        return isSetCategoryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStrategyByCategoryId_args)
        return this.equals((findStrategyByCategoryId_args)that);
      return false;
    }

    public boolean equals(findStrategyByCategoryId_args that) {
      if (that == null)
        return false;

      boolean this_present_categoryId = true && this.isSetCategoryId();
      boolean that_present_categoryId = true && that.isSetCategoryId();
      if (this_present_categoryId || that_present_categoryId) {
        if (!(this_present_categoryId && that_present_categoryId))
          return false;
        if (!this.categoryId.equals(that.categoryId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_categoryId = true && (isSetCategoryId());
      list.add(present_categoryId);
      if (present_categoryId)
        list.add(categoryId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findStrategyByCategoryId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStrategyByCategoryId_args(");
      boolean first = true;

      sb.append("categoryId:");
      if (this.categoryId == null) {
        sb.append("null");
      } else {
        sb.append(this.categoryId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStrategyByCategoryId_argsStandardSchemeFactory implements SchemeFactory {
      public findStrategyByCategoryId_argsStandardScheme getScheme() {
        return new findStrategyByCategoryId_argsStandardScheme();
      }
    }

    private static class findStrategyByCategoryId_argsStandardScheme extends StandardScheme<findStrategyByCategoryId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStrategyByCategoryId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.categoryId = iprot.readString();
                struct.setCategoryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStrategyByCategoryId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.categoryId != null) {
          oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
          oprot.writeString(struct.categoryId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStrategyByCategoryId_argsTupleSchemeFactory implements SchemeFactory {
      public findStrategyByCategoryId_argsTupleScheme getScheme() {
        return new findStrategyByCategoryId_argsTupleScheme();
      }
    }

    private static class findStrategyByCategoryId_argsTupleScheme extends TupleScheme<findStrategyByCategoryId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStrategyByCategoryId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCategoryId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCategoryId()) {
          oprot.writeString(struct.categoryId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStrategyByCategoryId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.categoryId = iprot.readString();
          struct.setCategoryIdIsSet(true);
        }
      }
    }

  }

  public static class findStrategyByCategoryId_result implements org.apache.thrift.TBase<findStrategyByCategoryId_result, findStrategyByCategoryId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findStrategyByCategoryId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStrategyByCategoryId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStrategyByCategoryId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStrategyByCategoryId_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStrategyByCategoryId_result.class, metaDataMap);
    }

    public findStrategyByCategoryId_result() {
    }

    public findStrategyByCategoryId_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStrategyByCategoryId_result(findStrategyByCategoryId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public findStrategyByCategoryId_result deepCopy() {
      return new findStrategyByCategoryId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findStrategyByCategoryId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStrategyByCategoryId_result)
        return this.equals((findStrategyByCategoryId_result)that);
      return false;
    }

    public boolean equals(findStrategyByCategoryId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findStrategyByCategoryId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStrategyByCategoryId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStrategyByCategoryId_resultStandardSchemeFactory implements SchemeFactory {
      public findStrategyByCategoryId_resultStandardScheme getScheme() {
        return new findStrategyByCategoryId_resultStandardScheme();
      }
    }

    private static class findStrategyByCategoryId_resultStandardScheme extends StandardScheme<findStrategyByCategoryId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStrategyByCategoryId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStrategyByCategoryId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStrategyByCategoryId_resultTupleSchemeFactory implements SchemeFactory {
      public findStrategyByCategoryId_resultTupleScheme getScheme() {
        return new findStrategyByCategoryId_resultTupleScheme();
      }
    }

    private static class findStrategyByCategoryId_resultTupleScheme extends TupleScheme<findStrategyByCategoryId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStrategyByCategoryId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStrategyByCategoryId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAllRunStrategyId_args implements org.apache.thrift.TBase<findAllRunStrategyId_args, findAllRunStrategyId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllRunStrategyId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllRunStrategyId_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllRunStrategyId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllRunStrategyId_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllRunStrategyId_args.class, metaDataMap);
    }

    public findAllRunStrategyId_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllRunStrategyId_args(findAllRunStrategyId_args other) {
    }

    public findAllRunStrategyId_args deepCopy() {
      return new findAllRunStrategyId_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllRunStrategyId_args)
        return this.equals((findAllRunStrategyId_args)that);
      return false;
    }

    public boolean equals(findAllRunStrategyId_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllRunStrategyId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllRunStrategyId_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllRunStrategyId_argsStandardSchemeFactory implements SchemeFactory {
      public findAllRunStrategyId_argsStandardScheme getScheme() {
        return new findAllRunStrategyId_argsStandardScheme();
      }
    }

    private static class findAllRunStrategyId_argsStandardScheme extends StandardScheme<findAllRunStrategyId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllRunStrategyId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllRunStrategyId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllRunStrategyId_argsTupleSchemeFactory implements SchemeFactory {
      public findAllRunStrategyId_argsTupleScheme getScheme() {
        return new findAllRunStrategyId_argsTupleScheme();
      }
    }

    private static class findAllRunStrategyId_argsTupleScheme extends TupleScheme<findAllRunStrategyId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllRunStrategyId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllRunStrategyId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findAllRunStrategyId_result implements org.apache.thrift.TBase<findAllRunStrategyId_result, findAllRunStrategyId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllRunStrategyId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllRunStrategyId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllRunStrategyId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllRunStrategyId_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllRunStrategyId_result.class, metaDataMap);
    }

    public findAllRunStrategyId_result() {
    }

    public findAllRunStrategyId_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllRunStrategyId_result(findAllRunStrategyId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public findAllRunStrategyId_result deepCopy() {
      return new findAllRunStrategyId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findAllRunStrategyId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllRunStrategyId_result)
        return this.equals((findAllRunStrategyId_result)that);
      return false;
    }

    public boolean equals(findAllRunStrategyId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllRunStrategyId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllRunStrategyId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllRunStrategyId_resultStandardSchemeFactory implements SchemeFactory {
      public findAllRunStrategyId_resultStandardScheme getScheme() {
        return new findAllRunStrategyId_resultStandardScheme();
      }
    }

    private static class findAllRunStrategyId_resultStandardScheme extends StandardScheme<findAllRunStrategyId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllRunStrategyId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllRunStrategyId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllRunStrategyId_resultTupleSchemeFactory implements SchemeFactory {
      public findAllRunStrategyId_resultTupleScheme getScheme() {
        return new findAllRunStrategyId_resultTupleScheme();
      }
    }

    private static class findAllRunStrategyId_resultTupleScheme extends TupleScheme<findAllRunStrategyId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllRunStrategyId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllRunStrategyId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStrategyUserByUidSid_args implements org.apache.thrift.TBase<getStrategyUserByUidSid_args, getStrategyUserByUidSid_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStrategyUserByUidSid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStrategyUserByUidSid_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStrategyUserByUidSid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStrategyUserByUidSid_argsTupleSchemeFactory());
    }

    public int userId; // required
    public int strategyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      STRATEGY_ID((short)2, "strategyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // STRATEGY_ID
            return STRATEGY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __STRATEGYID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStrategyUserByUidSid_args.class, metaDataMap);
    }

    public getStrategyUserByUidSid_args() {
    }

    public getStrategyUserByUidSid_args(
      int userId,
      int strategyId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStrategyUserByUidSid_args(getStrategyUserByUidSid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.strategyId = other.strategyId;
    }

    public getStrategyUserByUidSid_args deepCopy() {
      return new getStrategyUserByUidSid_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setStrategyIdIsSet(false);
      this.strategyId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public getStrategyUserByUidSid_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public getStrategyUserByUidSid_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case STRATEGY_ID:
        return getStrategyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case STRATEGY_ID:
        return isSetStrategyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStrategyUserByUidSid_args)
        return this.equals((getStrategyUserByUidSid_args)that);
      return false;
    }

    public boolean equals(getStrategyUserByUidSid_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStrategyUserByUidSid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStrategyUserByUidSid_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStrategyUserByUidSid_argsStandardSchemeFactory implements SchemeFactory {
      public getStrategyUserByUidSid_argsStandardScheme getScheme() {
        return new getStrategyUserByUidSid_argsStandardScheme();
      }
    }

    private static class getStrategyUserByUidSid_argsStandardScheme extends StandardScheme<getStrategyUserByUidSid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStrategyUserByUidSid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStrategyUserByUidSid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStrategyUserByUidSid_argsTupleSchemeFactory implements SchemeFactory {
      public getStrategyUserByUidSid_argsTupleScheme getScheme() {
        return new getStrategyUserByUidSid_argsTupleScheme();
      }
    }

    private static class getStrategyUserByUidSid_argsTupleScheme extends TupleScheme<getStrategyUserByUidSid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStrategyUserByUidSid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetStrategyId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStrategyUserByUidSid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
      }
    }

  }

  public static class getStrategyUserByUidSid_result implements org.apache.thrift.TBase<getStrategyUserByUidSid_result, getStrategyUserByUidSid_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStrategyUserByUidSid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStrategyUserByUidSid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStrategyUserByUidSid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStrategyUserByUidSid_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStrategyUserByUidSid_result.class, metaDataMap);
    }

    public getStrategyUserByUidSid_result() {
    }

    public getStrategyUserByUidSid_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStrategyUserByUidSid_result(getStrategyUserByUidSid_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getStrategyUserByUidSid_result deepCopy() {
      return new getStrategyUserByUidSid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getStrategyUserByUidSid_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStrategyUserByUidSid_result)
        return this.equals((getStrategyUserByUidSid_result)that);
      return false;
    }

    public boolean equals(getStrategyUserByUidSid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStrategyUserByUidSid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStrategyUserByUidSid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStrategyUserByUidSid_resultStandardSchemeFactory implements SchemeFactory {
      public getStrategyUserByUidSid_resultStandardScheme getScheme() {
        return new getStrategyUserByUidSid_resultStandardScheme();
      }
    }

    private static class getStrategyUserByUidSid_resultStandardScheme extends StandardScheme<getStrategyUserByUidSid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStrategyUserByUidSid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStrategyUserByUidSid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStrategyUserByUidSid_resultTupleSchemeFactory implements SchemeFactory {
      public getStrategyUserByUidSid_resultTupleScheme getScheme() {
        return new getStrategyUserByUidSid_resultTupleScheme();
      }
    }

    private static class getStrategyUserByUidSid_resultTupleScheme extends TupleScheme<getStrategyUserByUidSid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStrategyUserByUidSid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStrategyUserByUidSid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class heartBeat_args implements org.apache.thrift.TBase<heartBeat_args, heartBeat_args._Fields>, java.io.Serializable, Cloneable, Comparable<heartBeat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("heartBeat_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new heartBeat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new heartBeat_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(heartBeat_args.class, metaDataMap);
    }

    public heartBeat_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public heartBeat_args(heartBeat_args other) {
    }

    public heartBeat_args deepCopy() {
      return new heartBeat_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof heartBeat_args)
        return this.equals((heartBeat_args)that);
      return false;
    }

    public boolean equals(heartBeat_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(heartBeat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("heartBeat_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class heartBeat_argsStandardSchemeFactory implements SchemeFactory {
      public heartBeat_argsStandardScheme getScheme() {
        return new heartBeat_argsStandardScheme();
      }
    }

    private static class heartBeat_argsStandardScheme extends StandardScheme<heartBeat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, heartBeat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, heartBeat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class heartBeat_argsTupleSchemeFactory implements SchemeFactory {
      public heartBeat_argsTupleScheme getScheme() {
        return new heartBeat_argsTupleScheme();
      }
    }

    private static class heartBeat_argsTupleScheme extends TupleScheme<heartBeat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, heartBeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, heartBeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class heartBeat_result implements org.apache.thrift.TBase<heartBeat_result, heartBeat_result._Fields>, java.io.Serializable, Cloneable, Comparable<heartBeat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("heartBeat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new heartBeat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new heartBeat_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(heartBeat_result.class, metaDataMap);
    }

    public heartBeat_result() {
    }

    public heartBeat_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public heartBeat_result(heartBeat_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public heartBeat_result deepCopy() {
      return new heartBeat_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public heartBeat_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof heartBeat_result)
        return this.equals((heartBeat_result)that);
      return false;
    }

    public boolean equals(heartBeat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(heartBeat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("heartBeat_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class heartBeat_resultStandardSchemeFactory implements SchemeFactory {
      public heartBeat_resultStandardScheme getScheme() {
        return new heartBeat_resultStandardScheme();
      }
    }

    private static class heartBeat_resultStandardScheme extends StandardScheme<heartBeat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, heartBeat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, heartBeat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class heartBeat_resultTupleSchemeFactory implements SchemeFactory {
      public heartBeat_resultTupleScheme getScheme() {
        return new heartBeat_resultTupleScheme();
      }
    }

    private static class heartBeat_resultTupleScheme extends TupleScheme<heartBeat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, heartBeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, heartBeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class disposeQuantStk_args implements org.apache.thrift.TBase<disposeQuantStk_args, disposeQuantStk_args._Fields>, java.io.Serializable, Cloneable, Comparable<disposeQuantStk_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disposeQuantStk_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disposeQuantStk_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disposeQuantStk_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public String time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      TIME((short)2, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disposeQuantStk_args.class, metaDataMap);
    }

    public disposeQuantStk_args() {
    }

    public disposeQuantStk_args(
      int strategyId,
      String time)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.time = time;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disposeQuantStk_args(disposeQuantStk_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      if (other.isSetTime()) {
        this.time = other.time;
      }
    }

    public disposeQuantStk_args deepCopy() {
      return new disposeQuantStk_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      this.time = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public disposeQuantStk_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public String getTime() {
      return this.time;
    }

    public disposeQuantStk_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case TIME:
        return getTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disposeQuantStk_args)
        return this.equals((disposeQuantStk_args)that);
      return false;
    }

    public boolean equals(disposeQuantStk_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_time = true && (isSetTime());
      list.add(present_time);
      if (present_time)
        list.add(time);

      return list.hashCode();
    }

    @Override
    public int compareTo(disposeQuantStk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disposeQuantStk_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disposeQuantStk_argsStandardSchemeFactory implements SchemeFactory {
      public disposeQuantStk_argsStandardScheme getScheme() {
        return new disposeQuantStk_argsStandardScheme();
      }
    }

    private static class disposeQuantStk_argsStandardScheme extends StandardScheme<disposeQuantStk_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disposeQuantStk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disposeQuantStk_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disposeQuantStk_argsTupleSchemeFactory implements SchemeFactory {
      public disposeQuantStk_argsTupleScheme getScheme() {
        return new disposeQuantStk_argsTupleScheme();
      }
    }

    private static class disposeQuantStk_argsTupleScheme extends TupleScheme<disposeQuantStk_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disposeQuantStk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetTime()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disposeQuantStk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class disposeQuantStk_result implements org.apache.thrift.TBase<disposeQuantStk_result, disposeQuantStk_result._Fields>, java.io.Serializable, Cloneable, Comparable<disposeQuantStk_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disposeQuantStk_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disposeQuantStk_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disposeQuantStk_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disposeQuantStk_result.class, metaDataMap);
    }

    public disposeQuantStk_result() {
    }

    public disposeQuantStk_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disposeQuantStk_result(disposeQuantStk_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public disposeQuantStk_result deepCopy() {
      return new disposeQuantStk_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public disposeQuantStk_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disposeQuantStk_result)
        return this.equals((disposeQuantStk_result)that);
      return false;
    }

    public boolean equals(disposeQuantStk_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(disposeQuantStk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disposeQuantStk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disposeQuantStk_resultStandardSchemeFactory implements SchemeFactory {
      public disposeQuantStk_resultStandardScheme getScheme() {
        return new disposeQuantStk_resultStandardScheme();
      }
    }

    private static class disposeQuantStk_resultStandardScheme extends StandardScheme<disposeQuantStk_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disposeQuantStk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disposeQuantStk_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disposeQuantStk_resultTupleSchemeFactory implements SchemeFactory {
      public disposeQuantStk_resultTupleScheme getScheme() {
        return new disposeQuantStk_resultTupleScheme();
      }
    }

    private static class disposeQuantStk_resultTupleScheme extends TupleScheme<disposeQuantStk_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disposeQuantStk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disposeQuantStk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isExitsFile_args implements org.apache.thrift.TBase<isExitsFile_args, isExitsFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<isExitsFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isExitsFile_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isExitsFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isExitsFile_argsTupleSchemeFactory());
    }

    public int strategyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isExitsFile_args.class, metaDataMap);
    }

    public isExitsFile_args() {
    }

    public isExitsFile_args(
      int strategyId)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isExitsFile_args(isExitsFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
    }

    public isExitsFile_args deepCopy() {
      return new isExitsFile_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public isExitsFile_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isExitsFile_args)
        return this.equals((isExitsFile_args)that);
      return false;
    }

    public boolean equals(isExitsFile_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(isExitsFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isExitsFile_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isExitsFile_argsStandardSchemeFactory implements SchemeFactory {
      public isExitsFile_argsStandardScheme getScheme() {
        return new isExitsFile_argsStandardScheme();
      }
    }

    private static class isExitsFile_argsStandardScheme extends StandardScheme<isExitsFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isExitsFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isExitsFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isExitsFile_argsTupleSchemeFactory implements SchemeFactory {
      public isExitsFile_argsTupleScheme getScheme() {
        return new isExitsFile_argsTupleScheme();
      }
    }

    private static class isExitsFile_argsTupleScheme extends TupleScheme<isExitsFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isExitsFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isExitsFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
      }
    }

  }

  public static class isExitsFile_result implements org.apache.thrift.TBase<isExitsFile_result, isExitsFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<isExitsFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isExitsFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isExitsFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isExitsFile_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isExitsFile_result.class, metaDataMap);
    }

    public isExitsFile_result() {
    }

    public isExitsFile_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isExitsFile_result(isExitsFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public isExitsFile_result deepCopy() {
      return new isExitsFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isExitsFile_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isExitsFile_result)
        return this.equals((isExitsFile_result)that);
      return false;
    }

    public boolean equals(isExitsFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(isExitsFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isExitsFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isExitsFile_resultStandardSchemeFactory implements SchemeFactory {
      public isExitsFile_resultStandardScheme getScheme() {
        return new isExitsFile_resultStandardScheme();
      }
    }

    private static class isExitsFile_resultStandardScheme extends StandardScheme<isExitsFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isExitsFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isExitsFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isExitsFile_resultTupleSchemeFactory implements SchemeFactory {
      public isExitsFile_resultTupleScheme getScheme() {
        return new isExitsFile_resultTupleScheme();
      }
    }

    private static class isExitsFile_resultTupleScheme extends TupleScheme<isExitsFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isExitsFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isExitsFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class clearStrategyData_args implements org.apache.thrift.TBase<clearStrategyData_args, clearStrategyData_args._Fields>, java.io.Serializable, Cloneable, Comparable<clearStrategyData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearStrategyData_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearStrategyData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearStrategyData_argsTupleSchemeFactory());
    }

    public int strategyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearStrategyData_args.class, metaDataMap);
    }

    public clearStrategyData_args() {
    }

    public clearStrategyData_args(
      int strategyId)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearStrategyData_args(clearStrategyData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
    }

    public clearStrategyData_args deepCopy() {
      return new clearStrategyData_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public clearStrategyData_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearStrategyData_args)
        return this.equals((clearStrategyData_args)that);
      return false;
    }

    public boolean equals(clearStrategyData_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(clearStrategyData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearStrategyData_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearStrategyData_argsStandardSchemeFactory implements SchemeFactory {
      public clearStrategyData_argsStandardScheme getScheme() {
        return new clearStrategyData_argsStandardScheme();
      }
    }

    private static class clearStrategyData_argsStandardScheme extends StandardScheme<clearStrategyData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearStrategyData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearStrategyData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearStrategyData_argsTupleSchemeFactory implements SchemeFactory {
      public clearStrategyData_argsTupleScheme getScheme() {
        return new clearStrategyData_argsTupleScheme();
      }
    }

    private static class clearStrategyData_argsTupleScheme extends TupleScheme<clearStrategyData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearStrategyData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearStrategyData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
      }
    }

  }

  public static class clearStrategyData_result implements org.apache.thrift.TBase<clearStrategyData_result, clearStrategyData_result._Fields>, java.io.Serializable, Cloneable, Comparable<clearStrategyData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearStrategyData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearStrategyData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearStrategyData_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearStrategyData_result.class, metaDataMap);
    }

    public clearStrategyData_result() {
    }

    public clearStrategyData_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearStrategyData_result(clearStrategyData_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public clearStrategyData_result deepCopy() {
      return new clearStrategyData_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public clearStrategyData_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearStrategyData_result)
        return this.equals((clearStrategyData_result)that);
      return false;
    }

    public boolean equals(clearStrategyData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(clearStrategyData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearStrategyData_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearStrategyData_resultStandardSchemeFactory implements SchemeFactory {
      public clearStrategyData_resultStandardScheme getScheme() {
        return new clearStrategyData_resultStandardScheme();
      }
    }

    private static class clearStrategyData_resultStandardScheme extends StandardScheme<clearStrategyData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearStrategyData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearStrategyData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearStrategyData_resultTupleSchemeFactory implements SchemeFactory {
      public clearStrategyData_resultTupleScheme getScheme() {
        return new clearStrategyData_resultTupleScheme();
      }
    }

    private static class clearStrategyData_resultTupleScheme extends TupleScheme<clearStrategyData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearStrategyData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearStrategyData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAllValidRelation_args implements org.apache.thrift.TBase<findAllValidRelation_args, findAllValidRelation_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllValidRelation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllValidRelation_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllValidRelation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllValidRelation_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllValidRelation_args.class, metaDataMap);
    }

    public findAllValidRelation_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllValidRelation_args(findAllValidRelation_args other) {
    }

    public findAllValidRelation_args deepCopy() {
      return new findAllValidRelation_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllValidRelation_args)
        return this.equals((findAllValidRelation_args)that);
      return false;
    }

    public boolean equals(findAllValidRelation_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllValidRelation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllValidRelation_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllValidRelation_argsStandardSchemeFactory implements SchemeFactory {
      public findAllValidRelation_argsStandardScheme getScheme() {
        return new findAllValidRelation_argsStandardScheme();
      }
    }

    private static class findAllValidRelation_argsStandardScheme extends StandardScheme<findAllValidRelation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllValidRelation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllValidRelation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllValidRelation_argsTupleSchemeFactory implements SchemeFactory {
      public findAllValidRelation_argsTupleScheme getScheme() {
        return new findAllValidRelation_argsTupleScheme();
      }
    }

    private static class findAllValidRelation_argsTupleScheme extends TupleScheme<findAllValidRelation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllValidRelation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllValidRelation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findAllValidRelation_result implements org.apache.thrift.TBase<findAllValidRelation_result, findAllValidRelation_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllValidRelation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllValidRelation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllValidRelation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllValidRelation_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllValidRelation_result.class, metaDataMap);
    }

    public findAllValidRelation_result() {
    }

    public findAllValidRelation_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllValidRelation_result(findAllValidRelation_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public findAllValidRelation_result deepCopy() {
      return new findAllValidRelation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findAllValidRelation_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllValidRelation_result)
        return this.equals((findAllValidRelation_result)that);
      return false;
    }

    public boolean equals(findAllValidRelation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllValidRelation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllValidRelation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllValidRelation_resultStandardSchemeFactory implements SchemeFactory {
      public findAllValidRelation_resultStandardScheme getScheme() {
        return new findAllValidRelation_resultStandardScheme();
      }
    }

    private static class findAllValidRelation_resultStandardScheme extends StandardScheme<findAllValidRelation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllValidRelation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllValidRelation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllValidRelation_resultTupleSchemeFactory implements SchemeFactory {
      public findAllValidRelation_resultTupleScheme getScheme() {
        return new findAllValidRelation_resultTupleScheme();
      }
    }

    private static class findAllValidRelation_resultTupleScheme extends TupleScheme<findAllValidRelation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllValidRelation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllValidRelation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findStrategyBuyUserCount_args implements org.apache.thrift.TBase<findStrategyBuyUserCount_args, findStrategyBuyUserCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<findStrategyBuyUserCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStrategyBuyUserCount_args");

    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStrategyBuyUserCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStrategyBuyUserCount_argsTupleSchemeFactory());
    }

    public String time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TIME((short)1, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStrategyBuyUserCount_args.class, metaDataMap);
    }

    public findStrategyBuyUserCount_args() {
    }

    public findStrategyBuyUserCount_args(
      String time)
    {
      this();
      this.time = time;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStrategyBuyUserCount_args(findStrategyBuyUserCount_args other) {
      if (other.isSetTime()) {
        this.time = other.time;
      }
    }

    public findStrategyBuyUserCount_args deepCopy() {
      return new findStrategyBuyUserCount_args(this);
    }

    @Override
    public void clear() {
      this.time = null;
    }

    public String getTime() {
      return this.time;
    }

    public findStrategyBuyUserCount_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TIME:
        return getTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStrategyBuyUserCount_args)
        return this.equals((findStrategyBuyUserCount_args)that);
      return false;
    }

    public boolean equals(findStrategyBuyUserCount_args that) {
      if (that == null)
        return false;

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_time = true && (isSetTime());
      list.add(present_time);
      if (present_time)
        list.add(time);

      return list.hashCode();
    }

    @Override
    public int compareTo(findStrategyBuyUserCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStrategyBuyUserCount_args(");
      boolean first = true;

      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStrategyBuyUserCount_argsStandardSchemeFactory implements SchemeFactory {
      public findStrategyBuyUserCount_argsStandardScheme getScheme() {
        return new findStrategyBuyUserCount_argsStandardScheme();
      }
    }

    private static class findStrategyBuyUserCount_argsStandardScheme extends StandardScheme<findStrategyBuyUserCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStrategyBuyUserCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStrategyBuyUserCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStrategyBuyUserCount_argsTupleSchemeFactory implements SchemeFactory {
      public findStrategyBuyUserCount_argsTupleScheme getScheme() {
        return new findStrategyBuyUserCount_argsTupleScheme();
      }
    }

    private static class findStrategyBuyUserCount_argsTupleScheme extends TupleScheme<findStrategyBuyUserCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStrategyBuyUserCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTime()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStrategyBuyUserCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class findStrategyBuyUserCount_result implements org.apache.thrift.TBase<findStrategyBuyUserCount_result, findStrategyBuyUserCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<findStrategyBuyUserCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStrategyBuyUserCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStrategyBuyUserCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStrategyBuyUserCount_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStrategyBuyUserCount_result.class, metaDataMap);
    }

    public findStrategyBuyUserCount_result() {
    }

    public findStrategyBuyUserCount_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStrategyBuyUserCount_result(findStrategyBuyUserCount_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public findStrategyBuyUserCount_result deepCopy() {
      return new findStrategyBuyUserCount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findStrategyBuyUserCount_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStrategyBuyUserCount_result)
        return this.equals((findStrategyBuyUserCount_result)that);
      return false;
    }

    public boolean equals(findStrategyBuyUserCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findStrategyBuyUserCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStrategyBuyUserCount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStrategyBuyUserCount_resultStandardSchemeFactory implements SchemeFactory {
      public findStrategyBuyUserCount_resultStandardScheme getScheme() {
        return new findStrategyBuyUserCount_resultStandardScheme();
      }
    }

    private static class findStrategyBuyUserCount_resultStandardScheme extends StandardScheme<findStrategyBuyUserCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStrategyBuyUserCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStrategyBuyUserCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStrategyBuyUserCount_resultTupleSchemeFactory implements SchemeFactory {
      public findStrategyBuyUserCount_resultTupleScheme getScheme() {
        return new findStrategyBuyUserCount_resultTupleScheme();
      }
    }

    private static class findStrategyBuyUserCount_resultTupleScheme extends TupleScheme<findStrategyBuyUserCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStrategyBuyUserCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStrategyBuyUserCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findStrategyUserLoopCount_args implements org.apache.thrift.TBase<findStrategyUserLoopCount_args, findStrategyUserLoopCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<findStrategyUserLoopCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStrategyUserLoopCount_args");

    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStrategyUserLoopCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStrategyUserLoopCount_argsTupleSchemeFactory());
    }

    public String time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TIME((short)1, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStrategyUserLoopCount_args.class, metaDataMap);
    }

    public findStrategyUserLoopCount_args() {
    }

    public findStrategyUserLoopCount_args(
      String time)
    {
      this();
      this.time = time;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStrategyUserLoopCount_args(findStrategyUserLoopCount_args other) {
      if (other.isSetTime()) {
        this.time = other.time;
      }
    }

    public findStrategyUserLoopCount_args deepCopy() {
      return new findStrategyUserLoopCount_args(this);
    }

    @Override
    public void clear() {
      this.time = null;
    }

    public String getTime() {
      return this.time;
    }

    public findStrategyUserLoopCount_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TIME:
        return getTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStrategyUserLoopCount_args)
        return this.equals((findStrategyUserLoopCount_args)that);
      return false;
    }

    public boolean equals(findStrategyUserLoopCount_args that) {
      if (that == null)
        return false;

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_time = true && (isSetTime());
      list.add(present_time);
      if (present_time)
        list.add(time);

      return list.hashCode();
    }

    @Override
    public int compareTo(findStrategyUserLoopCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStrategyUserLoopCount_args(");
      boolean first = true;

      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStrategyUserLoopCount_argsStandardSchemeFactory implements SchemeFactory {
      public findStrategyUserLoopCount_argsStandardScheme getScheme() {
        return new findStrategyUserLoopCount_argsStandardScheme();
      }
    }

    private static class findStrategyUserLoopCount_argsStandardScheme extends StandardScheme<findStrategyUserLoopCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStrategyUserLoopCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStrategyUserLoopCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStrategyUserLoopCount_argsTupleSchemeFactory implements SchemeFactory {
      public findStrategyUserLoopCount_argsTupleScheme getScheme() {
        return new findStrategyUserLoopCount_argsTupleScheme();
      }
    }

    private static class findStrategyUserLoopCount_argsTupleScheme extends TupleScheme<findStrategyUserLoopCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStrategyUserLoopCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTime()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStrategyUserLoopCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class findStrategyUserLoopCount_result implements org.apache.thrift.TBase<findStrategyUserLoopCount_result, findStrategyUserLoopCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<findStrategyUserLoopCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStrategyUserLoopCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStrategyUserLoopCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStrategyUserLoopCount_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStrategyUserLoopCount_result.class, metaDataMap);
    }

    public findStrategyUserLoopCount_result() {
    }

    public findStrategyUserLoopCount_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStrategyUserLoopCount_result(findStrategyUserLoopCount_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public findStrategyUserLoopCount_result deepCopy() {
      return new findStrategyUserLoopCount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findStrategyUserLoopCount_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStrategyUserLoopCount_result)
        return this.equals((findStrategyUserLoopCount_result)that);
      return false;
    }

    public boolean equals(findStrategyUserLoopCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findStrategyUserLoopCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStrategyUserLoopCount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStrategyUserLoopCount_resultStandardSchemeFactory implements SchemeFactory {
      public findStrategyUserLoopCount_resultStandardScheme getScheme() {
        return new findStrategyUserLoopCount_resultStandardScheme();
      }
    }

    private static class findStrategyUserLoopCount_resultStandardScheme extends StandardScheme<findStrategyUserLoopCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStrategyUserLoopCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStrategyUserLoopCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStrategyUserLoopCount_resultTupleSchemeFactory implements SchemeFactory {
      public findStrategyUserLoopCount_resultTupleScheme getScheme() {
        return new findStrategyUserLoopCount_resultTupleScheme();
      }
    }

    private static class findStrategyUserLoopCount_resultTupleScheme extends TupleScheme<findStrategyUserLoopCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStrategyUserLoopCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStrategyUserLoopCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryStrategyBestStockListBySid_args implements org.apache.thrift.TBase<queryStrategyBestStockListBySid_args, queryStrategyBestStockListBySid_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryStrategyBestStockListBySid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStrategyBestStockListBySid_args");

    private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStrategyBestStockListBySid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStrategyBestStockListBySid_argsTupleSchemeFactory());
    }

    public int sid; // required
    public int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SID((short)1, "sid"),
      LIMIT((short)2, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SID
            return SID;
          case 2: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SID_ISSET_ID = 0;
    private static final int __LIMIT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SID, new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStrategyBestStockListBySid_args.class, metaDataMap);
    }

    public queryStrategyBestStockListBySid_args() {
    }

    public queryStrategyBestStockListBySid_args(
      int sid,
      int limit)
    {
      this();
      this.sid = sid;
      setSidIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStrategyBestStockListBySid_args(queryStrategyBestStockListBySid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.sid = other.sid;
      this.limit = other.limit;
    }

    public queryStrategyBestStockListBySid_args deepCopy() {
      return new queryStrategyBestStockListBySid_args(this);
    }

    @Override
    public void clear() {
      setSidIsSet(false);
      this.sid = 0;
      setLimitIsSet(false);
      this.limit = 0;
    }

    public int getSid() {
      return this.sid;
    }

    public queryStrategyBestStockListBySid_args setSid(int sid) {
      this.sid = sid;
      setSidIsSet(true);
      return this;
    }

    public void unsetSid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SID_ISSET_ID);
    }

    /** Returns true if field sid is set (has been assigned a value) and false otherwise */
    public boolean isSetSid() {
      return EncodingUtils.testBit(__isset_bitfield, __SID_ISSET_ID);
    }

    public void setSidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SID_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public queryStrategyBestStockListBySid_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SID:
        if (value == null) {
          unsetSid();
        } else {
          setSid((Integer)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SID:
        return getSid();

      case LIMIT:
        return getLimit();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SID:
        return isSetSid();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStrategyBestStockListBySid_args)
        return this.equals((queryStrategyBestStockListBySid_args)that);
      return false;
    }

    public boolean equals(queryStrategyBestStockListBySid_args that) {
      if (that == null)
        return false;

      boolean this_present_sid = true;
      boolean that_present_sid = true;
      if (this_present_sid || that_present_sid) {
        if (!(this_present_sid && that_present_sid))
          return false;
        if (this.sid != that.sid)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sid = true;
      list.add(present_sid);
      if (present_sid)
        list.add(sid);

      boolean present_limit = true;
      list.add(present_limit);
      if (present_limit)
        list.add(limit);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryStrategyBestStockListBySid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSid()).compareTo(other.isSetSid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, other.sid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStrategyBestStockListBySid_args(");
      boolean first = true;

      sb.append("sid:");
      sb.append(this.sid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStrategyBestStockListBySid_argsStandardSchemeFactory implements SchemeFactory {
      public queryStrategyBestStockListBySid_argsStandardScheme getScheme() {
        return new queryStrategyBestStockListBySid_argsStandardScheme();
      }
    }

    private static class queryStrategyBestStockListBySid_argsStandardScheme extends StandardScheme<queryStrategyBestStockListBySid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStrategyBestStockListBySid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sid = iprot.readI32();
                struct.setSidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStrategyBestStockListBySid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SID_FIELD_DESC);
        oprot.writeI32(struct.sid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStrategyBestStockListBySid_argsTupleSchemeFactory implements SchemeFactory {
      public queryStrategyBestStockListBySid_argsTupleScheme getScheme() {
        return new queryStrategyBestStockListBySid_argsTupleScheme();
      }
    }

    private static class queryStrategyBestStockListBySid_argsTupleScheme extends TupleScheme<queryStrategyBestStockListBySid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStrategyBestStockListBySid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSid()) {
          optionals.set(0);
        }
        if (struct.isSetLimit()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSid()) {
          oprot.writeI32(struct.sid);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStrategyBestStockListBySid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sid = iprot.readI32();
          struct.setSidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

  }

  public static class queryStrategyBestStockListBySid_result implements org.apache.thrift.TBase<queryStrategyBestStockListBySid_result, queryStrategyBestStockListBySid_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryStrategyBestStockListBySid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStrategyBestStockListBySid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStrategyBestStockListBySid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStrategyBestStockListBySid_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStrategyBestStockListBySid_result.class, metaDataMap);
    }

    public queryStrategyBestStockListBySid_result() {
    }

    public queryStrategyBestStockListBySid_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStrategyBestStockListBySid_result(queryStrategyBestStockListBySid_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryStrategyBestStockListBySid_result deepCopy() {
      return new queryStrategyBestStockListBySid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryStrategyBestStockListBySid_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStrategyBestStockListBySid_result)
        return this.equals((queryStrategyBestStockListBySid_result)that);
      return false;
    }

    public boolean equals(queryStrategyBestStockListBySid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryStrategyBestStockListBySid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStrategyBestStockListBySid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStrategyBestStockListBySid_resultStandardSchemeFactory implements SchemeFactory {
      public queryStrategyBestStockListBySid_resultStandardScheme getScheme() {
        return new queryStrategyBestStockListBySid_resultStandardScheme();
      }
    }

    private static class queryStrategyBestStockListBySid_resultStandardScheme extends StandardScheme<queryStrategyBestStockListBySid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStrategyBestStockListBySid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStrategyBestStockListBySid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStrategyBestStockListBySid_resultTupleSchemeFactory implements SchemeFactory {
      public queryStrategyBestStockListBySid_resultTupleScheme getScheme() {
        return new queryStrategyBestStockListBySid_resultTupleScheme();
      }
    }

    private static class queryStrategyBestStockListBySid_resultTupleScheme extends TupleScheme<queryStrategyBestStockListBySid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStrategyBestStockListBySid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStrategyBestStockListBySid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveStrategyUserStock_args implements org.apache.thrift.TBase<saveStrategyUserStock_args, saveStrategyUserStock_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveStrategyUserStock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveStrategyUserStock_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField STOCK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stockCode", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveStrategyUserStock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveStrategyUserStock_argsTupleSchemeFactory());
    }

    public int userId; // required
    public int strategyId; // required
    public String stockCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      STRATEGY_ID((short)2, "strategyId"),
      STOCK_CODE((short)3, "stockCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // STRATEGY_ID
            return STRATEGY_ID;
          case 3: // STOCK_CODE
            return STOCK_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __STRATEGYID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCK_CODE, new org.apache.thrift.meta_data.FieldMetaData("stockCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveStrategyUserStock_args.class, metaDataMap);
    }

    public saveStrategyUserStock_args() {
    }

    public saveStrategyUserStock_args(
      int userId,
      int strategyId,
      String stockCode)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.stockCode = stockCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveStrategyUserStock_args(saveStrategyUserStock_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.strategyId = other.strategyId;
      if (other.isSetStockCode()) {
        this.stockCode = other.stockCode;
      }
    }

    public saveStrategyUserStock_args deepCopy() {
      return new saveStrategyUserStock_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      this.stockCode = null;
    }

    public int getUserId() {
      return this.userId;
    }

    public saveStrategyUserStock_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public saveStrategyUserStock_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public String getStockCode() {
      return this.stockCode;
    }

    public saveStrategyUserStock_args setStockCode(String stockCode) {
      this.stockCode = stockCode;
      return this;
    }

    public void unsetStockCode() {
      this.stockCode = null;
    }

    /** Returns true if field stockCode is set (has been assigned a value) and false otherwise */
    public boolean isSetStockCode() {
      return this.stockCode != null;
    }

    public void setStockCodeIsSet(boolean value) {
      if (!value) {
        this.stockCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case STOCK_CODE:
        if (value == null) {
          unsetStockCode();
        } else {
          setStockCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case STRATEGY_ID:
        return getStrategyId();

      case STOCK_CODE:
        return getStockCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case STRATEGY_ID:
        return isSetStrategyId();
      case STOCK_CODE:
        return isSetStockCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveStrategyUserStock_args)
        return this.equals((saveStrategyUserStock_args)that);
      return false;
    }

    public boolean equals(saveStrategyUserStock_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_stockCode = true && this.isSetStockCode();
      boolean that_present_stockCode = true && that.isSetStockCode();
      if (this_present_stockCode || that_present_stockCode) {
        if (!(this_present_stockCode && that_present_stockCode))
          return false;
        if (!this.stockCode.equals(that.stockCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_stockCode = true && (isSetStockCode());
      list.add(present_stockCode);
      if (present_stockCode)
        list.add(stockCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveStrategyUserStock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStockCode()).compareTo(other.isSetStockCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStockCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockCode, other.stockCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveStrategyUserStock_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stockCode:");
      if (this.stockCode == null) {
        sb.append("null");
      } else {
        sb.append(this.stockCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveStrategyUserStock_argsStandardSchemeFactory implements SchemeFactory {
      public saveStrategyUserStock_argsStandardScheme getScheme() {
        return new saveStrategyUserStock_argsStandardScheme();
      }
    }

    private static class saveStrategyUserStock_argsStandardScheme extends StandardScheme<saveStrategyUserStock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveStrategyUserStock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STOCK_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stockCode = iprot.readString();
                struct.setStockCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveStrategyUserStock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        if (struct.stockCode != null) {
          oprot.writeFieldBegin(STOCK_CODE_FIELD_DESC);
          oprot.writeString(struct.stockCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveStrategyUserStock_argsTupleSchemeFactory implements SchemeFactory {
      public saveStrategyUserStock_argsTupleScheme getScheme() {
        return new saveStrategyUserStock_argsTupleScheme();
      }
    }

    private static class saveStrategyUserStock_argsTupleScheme extends TupleScheme<saveStrategyUserStock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveStrategyUserStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetStrategyId()) {
          optionals.set(1);
        }
        if (struct.isSetStockCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStockCode()) {
          oprot.writeString(struct.stockCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveStrategyUserStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.stockCode = iprot.readString();
          struct.setStockCodeIsSet(true);
        }
      }
    }

  }

  public static class saveStrategyUserStock_result implements org.apache.thrift.TBase<saveStrategyUserStock_result, saveStrategyUserStock_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveStrategyUserStock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveStrategyUserStock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveStrategyUserStock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveStrategyUserStock_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveStrategyUserStock_result.class, metaDataMap);
    }

    public saveStrategyUserStock_result() {
    }

    public saveStrategyUserStock_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveStrategyUserStock_result(saveStrategyUserStock_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public saveStrategyUserStock_result deepCopy() {
      return new saveStrategyUserStock_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveStrategyUserStock_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveStrategyUserStock_result)
        return this.equals((saveStrategyUserStock_result)that);
      return false;
    }

    public boolean equals(saveStrategyUserStock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveStrategyUserStock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveStrategyUserStock_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveStrategyUserStock_resultStandardSchemeFactory implements SchemeFactory {
      public saveStrategyUserStock_resultStandardScheme getScheme() {
        return new saveStrategyUserStock_resultStandardScheme();
      }
    }

    private static class saveStrategyUserStock_resultStandardScheme extends StandardScheme<saveStrategyUserStock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveStrategyUserStock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveStrategyUserStock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveStrategyUserStock_resultTupleSchemeFactory implements SchemeFactory {
      public saveStrategyUserStock_resultTupleScheme getScheme() {
        return new saveStrategyUserStock_resultTupleScheme();
      }
    }

    private static class saveStrategyUserStock_resultTupleScheme extends TupleScheme<saveStrategyUserStock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveStrategyUserStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveStrategyUserStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteStrategyUserStock_args implements org.apache.thrift.TBase<deleteStrategyUserStock_args, deleteStrategyUserStock_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteStrategyUserStock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteStrategyUserStock_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField STOCK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stockCode", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteStrategyUserStock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteStrategyUserStock_argsTupleSchemeFactory());
    }

    public int userId; // required
    public int strategyId; // required
    public String stockCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      STRATEGY_ID((short)2, "strategyId"),
      STOCK_CODE((short)3, "stockCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // STRATEGY_ID
            return STRATEGY_ID;
          case 3: // STOCK_CODE
            return STOCK_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __STRATEGYID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCK_CODE, new org.apache.thrift.meta_data.FieldMetaData("stockCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteStrategyUserStock_args.class, metaDataMap);
    }

    public deleteStrategyUserStock_args() {
    }

    public deleteStrategyUserStock_args(
      int userId,
      int strategyId,
      String stockCode)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.stockCode = stockCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteStrategyUserStock_args(deleteStrategyUserStock_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.strategyId = other.strategyId;
      if (other.isSetStockCode()) {
        this.stockCode = other.stockCode;
      }
    }

    public deleteStrategyUserStock_args deepCopy() {
      return new deleteStrategyUserStock_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      this.stockCode = null;
    }

    public int getUserId() {
      return this.userId;
    }

    public deleteStrategyUserStock_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public deleteStrategyUserStock_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public String getStockCode() {
      return this.stockCode;
    }

    public deleteStrategyUserStock_args setStockCode(String stockCode) {
      this.stockCode = stockCode;
      return this;
    }

    public void unsetStockCode() {
      this.stockCode = null;
    }

    /** Returns true if field stockCode is set (has been assigned a value) and false otherwise */
    public boolean isSetStockCode() {
      return this.stockCode != null;
    }

    public void setStockCodeIsSet(boolean value) {
      if (!value) {
        this.stockCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case STOCK_CODE:
        if (value == null) {
          unsetStockCode();
        } else {
          setStockCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case STRATEGY_ID:
        return getStrategyId();

      case STOCK_CODE:
        return getStockCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case STRATEGY_ID:
        return isSetStrategyId();
      case STOCK_CODE:
        return isSetStockCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteStrategyUserStock_args)
        return this.equals((deleteStrategyUserStock_args)that);
      return false;
    }

    public boolean equals(deleteStrategyUserStock_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_stockCode = true && this.isSetStockCode();
      boolean that_present_stockCode = true && that.isSetStockCode();
      if (this_present_stockCode || that_present_stockCode) {
        if (!(this_present_stockCode && that_present_stockCode))
          return false;
        if (!this.stockCode.equals(that.stockCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_stockCode = true && (isSetStockCode());
      list.add(present_stockCode);
      if (present_stockCode)
        list.add(stockCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteStrategyUserStock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStockCode()).compareTo(other.isSetStockCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStockCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockCode, other.stockCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteStrategyUserStock_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stockCode:");
      if (this.stockCode == null) {
        sb.append("null");
      } else {
        sb.append(this.stockCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteStrategyUserStock_argsStandardSchemeFactory implements SchemeFactory {
      public deleteStrategyUserStock_argsStandardScheme getScheme() {
        return new deleteStrategyUserStock_argsStandardScheme();
      }
    }

    private static class deleteStrategyUserStock_argsStandardScheme extends StandardScheme<deleteStrategyUserStock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteStrategyUserStock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STOCK_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stockCode = iprot.readString();
                struct.setStockCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteStrategyUserStock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        if (struct.stockCode != null) {
          oprot.writeFieldBegin(STOCK_CODE_FIELD_DESC);
          oprot.writeString(struct.stockCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteStrategyUserStock_argsTupleSchemeFactory implements SchemeFactory {
      public deleteStrategyUserStock_argsTupleScheme getScheme() {
        return new deleteStrategyUserStock_argsTupleScheme();
      }
    }

    private static class deleteStrategyUserStock_argsTupleScheme extends TupleScheme<deleteStrategyUserStock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteStrategyUserStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetStrategyId()) {
          optionals.set(1);
        }
        if (struct.isSetStockCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStockCode()) {
          oprot.writeString(struct.stockCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteStrategyUserStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.stockCode = iprot.readString();
          struct.setStockCodeIsSet(true);
        }
      }
    }

  }

  public static class deleteStrategyUserStock_result implements org.apache.thrift.TBase<deleteStrategyUserStock_result, deleteStrategyUserStock_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteStrategyUserStock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteStrategyUserStock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteStrategyUserStock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteStrategyUserStock_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteStrategyUserStock_result.class, metaDataMap);
    }

    public deleteStrategyUserStock_result() {
    }

    public deleteStrategyUserStock_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteStrategyUserStock_result(deleteStrategyUserStock_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteStrategyUserStock_result deepCopy() {
      return new deleteStrategyUserStock_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteStrategyUserStock_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteStrategyUserStock_result)
        return this.equals((deleteStrategyUserStock_result)that);
      return false;
    }

    public boolean equals(deleteStrategyUserStock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteStrategyUserStock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteStrategyUserStock_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteStrategyUserStock_resultStandardSchemeFactory implements SchemeFactory {
      public deleteStrategyUserStock_resultStandardScheme getScheme() {
        return new deleteStrategyUserStock_resultStandardScheme();
      }
    }

    private static class deleteStrategyUserStock_resultStandardScheme extends StandardScheme<deleteStrategyUserStock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteStrategyUserStock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteStrategyUserStock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteStrategyUserStock_resultTupleSchemeFactory implements SchemeFactory {
      public deleteStrategyUserStock_resultTupleScheme getScheme() {
        return new deleteStrategyUserStock_resultTupleScheme();
      }
    }

    private static class deleteStrategyUserStock_resultTupleScheme extends TupleScheme<deleteStrategyUserStock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteStrategyUserStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteStrategyUserStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class selectFollowNum_args implements org.apache.thrift.TBase<selectFollowNum_args, selectFollowNum_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectFollowNum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectFollowNum_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectFollowNum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectFollowNum_argsTupleSchemeFactory());
    }

    public int userId; // required
    public int strategyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      STRATEGY_ID((short)2, "strategyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // STRATEGY_ID
            return STRATEGY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __STRATEGYID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectFollowNum_args.class, metaDataMap);
    }

    public selectFollowNum_args() {
    }

    public selectFollowNum_args(
      int userId,
      int strategyId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectFollowNum_args(selectFollowNum_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.strategyId = other.strategyId;
    }

    public selectFollowNum_args deepCopy() {
      return new selectFollowNum_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setStrategyIdIsSet(false);
      this.strategyId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public selectFollowNum_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public selectFollowNum_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case STRATEGY_ID:
        return getStrategyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case STRATEGY_ID:
        return isSetStrategyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectFollowNum_args)
        return this.equals((selectFollowNum_args)that);
      return false;
    }

    public boolean equals(selectFollowNum_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectFollowNum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectFollowNum_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectFollowNum_argsStandardSchemeFactory implements SchemeFactory {
      public selectFollowNum_argsStandardScheme getScheme() {
        return new selectFollowNum_argsStandardScheme();
      }
    }

    private static class selectFollowNum_argsStandardScheme extends StandardScheme<selectFollowNum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectFollowNum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectFollowNum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectFollowNum_argsTupleSchemeFactory implements SchemeFactory {
      public selectFollowNum_argsTupleScheme getScheme() {
        return new selectFollowNum_argsTupleScheme();
      }
    }

    private static class selectFollowNum_argsTupleScheme extends TupleScheme<selectFollowNum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectFollowNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetStrategyId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectFollowNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
      }
    }

  }

  public static class selectFollowNum_result implements org.apache.thrift.TBase<selectFollowNum_result, selectFollowNum_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectFollowNum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectFollowNum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectFollowNum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectFollowNum_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectFollowNum_result.class, metaDataMap);
    }

    public selectFollowNum_result() {
    }

    public selectFollowNum_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectFollowNum_result(selectFollowNum_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public selectFollowNum_result deepCopy() {
      return new selectFollowNum_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public selectFollowNum_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectFollowNum_result)
        return this.equals((selectFollowNum_result)that);
      return false;
    }

    public boolean equals(selectFollowNum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectFollowNum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectFollowNum_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectFollowNum_resultStandardSchemeFactory implements SchemeFactory {
      public selectFollowNum_resultStandardScheme getScheme() {
        return new selectFollowNum_resultStandardScheme();
      }
    }

    private static class selectFollowNum_resultStandardScheme extends StandardScheme<selectFollowNum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectFollowNum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectFollowNum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectFollowNum_resultTupleSchemeFactory implements SchemeFactory {
      public selectFollowNum_resultTupleScheme getScheme() {
        return new selectFollowNum_resultTupleScheme();
      }
    }

    private static class selectFollowNum_resultTupleScheme extends TupleScheme<selectFollowNum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectFollowNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectFollowNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryTodayTrade_args implements org.apache.thrift.TBase<queryTodayTrade_args, queryTodayTrade_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryTodayTrade_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTodayTrade_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("seq", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTodayTrade_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTodayTrade_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public int type; // required
    public long seq; // required
    public int num; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      TYPE((short)2, "type"),
      SEQ((short)3, "seq"),
      NUM((short)4, "num");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // TYPE
            return TYPE;
          case 3: // SEQ
            return SEQ;
          case 4: // NUM
            return NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private static final int __TYPE_ISSET_ID = 1;
    private static final int __SEQ_ISSET_ID = 2;
    private static final int __NUM_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SEQ, new org.apache.thrift.meta_data.FieldMetaData("seq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTodayTrade_args.class, metaDataMap);
    }

    public queryTodayTrade_args() {
    }

    public queryTodayTrade_args(
      int strategyId,
      int type,
      long seq,
      int num)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.type = type;
      setTypeIsSet(true);
      this.seq = seq;
      setSeqIsSet(true);
      this.num = num;
      setNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTodayTrade_args(queryTodayTrade_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      this.type = other.type;
      this.seq = other.seq;
      this.num = other.num;
    }

    public queryTodayTrade_args deepCopy() {
      return new queryTodayTrade_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setTypeIsSet(false);
      this.type = 0;
      setSeqIsSet(false);
      this.seq = 0;
      setNumIsSet(false);
      this.num = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public queryTodayTrade_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public int getType() {
      return this.type;
    }

    public queryTodayTrade_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public long getSeq() {
      return this.seq;
    }

    public queryTodayTrade_args setSeq(long seq) {
      this.seq = seq;
      setSeqIsSet(true);
      return this;
    }

    public void unsetSeq() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQ_ISSET_ID);
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return EncodingUtils.testBit(__isset_bitfield, __SEQ_ISSET_ID);
    }

    public void setSeqIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQ_ISSET_ID, value);
    }

    public int getNum() {
      return this.num;
    }

    public queryTodayTrade_args setNum(int num) {
      this.num = num;
      setNumIsSet(true);
      return this;
    }

    public void unsetNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    /** Returns true if field num is set (has been assigned a value) and false otherwise */
    public boolean isSetNum() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    public void setNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case SEQ:
        if (value == null) {
          unsetSeq();
        } else {
          setSeq((Long)value);
        }
        break;

      case NUM:
        if (value == null) {
          unsetNum();
        } else {
          setNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case TYPE:
        return getType();

      case SEQ:
        return getSeq();

      case NUM:
        return getNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case TYPE:
        return isSetType();
      case SEQ:
        return isSetSeq();
      case NUM:
        return isSetNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTodayTrade_args)
        return this.equals((queryTodayTrade_args)that);
      return false;
    }

    public boolean equals(queryTodayTrade_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_num = true;
      boolean that_present_num = true;
      if (this_present_num || that_present_num) {
        if (!(this_present_num && that_present_num))
          return false;
        if (this.num != that.num)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_seq = true;
      list.add(present_seq);
      if (present_seq)
        list.add(seq);

      boolean present_num = true;
      list.add(present_num);
      if (present_num)
        list.add(num);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryTodayTrade_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeq()).compareTo(other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTodayTrade_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("num:");
      sb.append(this.num);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTodayTrade_argsStandardSchemeFactory implements SchemeFactory {
      public queryTodayTrade_argsStandardScheme getScheme() {
        return new queryTodayTrade_argsStandardScheme();
      }
    }

    private static class queryTodayTrade_argsStandardScheme extends StandardScheme<queryTodayTrade_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTodayTrade_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SEQ
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.seq = iprot.readI64();
                struct.setSeqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num = iprot.readI32();
                struct.setNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTodayTrade_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SEQ_FIELD_DESC);
        oprot.writeI64(struct.seq);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_FIELD_DESC);
        oprot.writeI32(struct.num);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTodayTrade_argsTupleSchemeFactory implements SchemeFactory {
      public queryTodayTrade_argsTupleScheme getScheme() {
        return new queryTodayTrade_argsTupleScheme();
      }
    }

    private static class queryTodayTrade_argsTupleScheme extends TupleScheme<queryTodayTrade_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTodayTrade_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        if (struct.isSetSeq()) {
          optionals.set(2);
        }
        if (struct.isSetNum()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetSeq()) {
          oprot.writeI64(struct.seq);
        }
        if (struct.isSetNum()) {
          oprot.writeI32(struct.num);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTodayTrade_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.seq = iprot.readI64();
          struct.setSeqIsSet(true);
        }
        if (incoming.get(3)) {
          struct.num = iprot.readI32();
          struct.setNumIsSet(true);
        }
      }
    }

  }

  public static class queryTodayTrade_result implements org.apache.thrift.TBase<queryTodayTrade_result, queryTodayTrade_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryTodayTrade_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTodayTrade_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTodayTrade_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTodayTrade_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTodayTrade_result.class, metaDataMap);
    }

    public queryTodayTrade_result() {
    }

    public queryTodayTrade_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTodayTrade_result(queryTodayTrade_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryTodayTrade_result deepCopy() {
      return new queryTodayTrade_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryTodayTrade_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTodayTrade_result)
        return this.equals((queryTodayTrade_result)that);
      return false;
    }

    public boolean equals(queryTodayTrade_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryTodayTrade_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTodayTrade_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTodayTrade_resultStandardSchemeFactory implements SchemeFactory {
      public queryTodayTrade_resultStandardScheme getScheme() {
        return new queryTodayTrade_resultStandardScheme();
      }
    }

    private static class queryTodayTrade_resultStandardScheme extends StandardScheme<queryTodayTrade_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTodayTrade_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTodayTrade_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTodayTrade_resultTupleSchemeFactory implements SchemeFactory {
      public queryTodayTrade_resultTupleScheme getScheme() {
        return new queryTodayTrade_resultTupleScheme();
      }
    }

    private static class queryTodayTrade_resultTupleScheme extends TupleScheme<queryTodayTrade_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTodayTrade_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTodayTrade_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addTodayTrade_args implements org.apache.thrift.TBase<addTodayTrade_args, addTodayTrade_args._Fields>, java.io.Serializable, Cloneable, Comparable<addTodayTrade_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTodayTrade_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STOCK_TRADE_TODAY_FIELD_DESC = new org.apache.thrift.protocol.TField("stockTradeToday", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTodayTrade_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addTodayTrade_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public String stockTradeToday; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      STOCK_TRADE_TODAY((short)2, "stockTradeToday");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // STOCK_TRADE_TODAY
            return STOCK_TRADE_TODAY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCK_TRADE_TODAY, new org.apache.thrift.meta_data.FieldMetaData("stockTradeToday", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTodayTrade_args.class, metaDataMap);
    }

    public addTodayTrade_args() {
    }

    public addTodayTrade_args(
      int strategyId,
      String stockTradeToday)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.stockTradeToday = stockTradeToday;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTodayTrade_args(addTodayTrade_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      if (other.isSetStockTradeToday()) {
        this.stockTradeToday = other.stockTradeToday;
      }
    }

    public addTodayTrade_args deepCopy() {
      return new addTodayTrade_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      this.stockTradeToday = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public addTodayTrade_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public String getStockTradeToday() {
      return this.stockTradeToday;
    }

    public addTodayTrade_args setStockTradeToday(String stockTradeToday) {
      this.stockTradeToday = stockTradeToday;
      return this;
    }

    public void unsetStockTradeToday() {
      this.stockTradeToday = null;
    }

    /** Returns true if field stockTradeToday is set (has been assigned a value) and false otherwise */
    public boolean isSetStockTradeToday() {
      return this.stockTradeToday != null;
    }

    public void setStockTradeTodayIsSet(boolean value) {
      if (!value) {
        this.stockTradeToday = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case STOCK_TRADE_TODAY:
        if (value == null) {
          unsetStockTradeToday();
        } else {
          setStockTradeToday((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case STOCK_TRADE_TODAY:
        return getStockTradeToday();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case STOCK_TRADE_TODAY:
        return isSetStockTradeToday();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTodayTrade_args)
        return this.equals((addTodayTrade_args)that);
      return false;
    }

    public boolean equals(addTodayTrade_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_stockTradeToday = true && this.isSetStockTradeToday();
      boolean that_present_stockTradeToday = true && that.isSetStockTradeToday();
      if (this_present_stockTradeToday || that_present_stockTradeToday) {
        if (!(this_present_stockTradeToday && that_present_stockTradeToday))
          return false;
        if (!this.stockTradeToday.equals(that.stockTradeToday))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_stockTradeToday = true && (isSetStockTradeToday());
      list.add(present_stockTradeToday);
      if (present_stockTradeToday)
        list.add(stockTradeToday);

      return list.hashCode();
    }

    @Override
    public int compareTo(addTodayTrade_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStockTradeToday()).compareTo(other.isSetStockTradeToday());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStockTradeToday()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockTradeToday, other.stockTradeToday);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTodayTrade_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stockTradeToday:");
      if (this.stockTradeToday == null) {
        sb.append("null");
      } else {
        sb.append(this.stockTradeToday);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTodayTrade_argsStandardSchemeFactory implements SchemeFactory {
      public addTodayTrade_argsStandardScheme getScheme() {
        return new addTodayTrade_argsStandardScheme();
      }
    }

    private static class addTodayTrade_argsStandardScheme extends StandardScheme<addTodayTrade_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTodayTrade_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOCK_TRADE_TODAY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stockTradeToday = iprot.readString();
                struct.setStockTradeTodayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTodayTrade_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        if (struct.stockTradeToday != null) {
          oprot.writeFieldBegin(STOCK_TRADE_TODAY_FIELD_DESC);
          oprot.writeString(struct.stockTradeToday);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addTodayTrade_argsTupleSchemeFactory implements SchemeFactory {
      public addTodayTrade_argsTupleScheme getScheme() {
        return new addTodayTrade_argsTupleScheme();
      }
    }

    private static class addTodayTrade_argsTupleScheme extends TupleScheme<addTodayTrade_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addTodayTrade_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetStockTradeToday()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStockTradeToday()) {
          oprot.writeString(struct.stockTradeToday);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addTodayTrade_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stockTradeToday = iprot.readString();
          struct.setStockTradeTodayIsSet(true);
        }
      }
    }

  }

  public static class addTodayTrade_result implements org.apache.thrift.TBase<addTodayTrade_result, addTodayTrade_result._Fields>, java.io.Serializable, Cloneable, Comparable<addTodayTrade_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTodayTrade_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTodayTrade_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addTodayTrade_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTodayTrade_result.class, metaDataMap);
    }

    public addTodayTrade_result() {
    }

    public addTodayTrade_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTodayTrade_result(addTodayTrade_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addTodayTrade_result deepCopy() {
      return new addTodayTrade_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addTodayTrade_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTodayTrade_result)
        return this.equals((addTodayTrade_result)that);
      return false;
    }

    public boolean equals(addTodayTrade_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addTodayTrade_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTodayTrade_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTodayTrade_resultStandardSchemeFactory implements SchemeFactory {
      public addTodayTrade_resultStandardScheme getScheme() {
        return new addTodayTrade_resultStandardScheme();
      }
    }

    private static class addTodayTrade_resultStandardScheme extends StandardScheme<addTodayTrade_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTodayTrade_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTodayTrade_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addTodayTrade_resultTupleSchemeFactory implements SchemeFactory {
      public addTodayTrade_resultTupleScheme getScheme() {
        return new addTodayTrade_resultTupleScheme();
      }
    }

    private static class addTodayTrade_resultTupleScheme extends TupleScheme<addTodayTrade_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addTodayTrade_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addTodayTrade_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class clearTodayTrade_args implements org.apache.thrift.TBase<clearTodayTrade_args, clearTodayTrade_args._Fields>, java.io.Serializable, Cloneable, Comparable<clearTodayTrade_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearTodayTrade_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField POSITION_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("positionNum", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearTodayTrade_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearTodayTrade_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public int positionNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      POSITION_NUM((short)2, "positionNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // POSITION_NUM
            return POSITION_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private static final int __POSITIONNUM_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.POSITION_NUM, new org.apache.thrift.meta_data.FieldMetaData("positionNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearTodayTrade_args.class, metaDataMap);
    }

    public clearTodayTrade_args() {
    }

    public clearTodayTrade_args(
      int strategyId,
      int positionNum)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.positionNum = positionNum;
      setPositionNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearTodayTrade_args(clearTodayTrade_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      this.positionNum = other.positionNum;
    }

    public clearTodayTrade_args deepCopy() {
      return new clearTodayTrade_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setPositionNumIsSet(false);
      this.positionNum = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public clearTodayTrade_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public int getPositionNum() {
      return this.positionNum;
    }

    public clearTodayTrade_args setPositionNum(int positionNum) {
      this.positionNum = positionNum;
      setPositionNumIsSet(true);
      return this;
    }

    public void unsetPositionNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONNUM_ISSET_ID);
    }

    /** Returns true if field positionNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPositionNum() {
      return EncodingUtils.testBit(__isset_bitfield, __POSITIONNUM_ISSET_ID);
    }

    public void setPositionNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONNUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case POSITION_NUM:
        if (value == null) {
          unsetPositionNum();
        } else {
          setPositionNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case POSITION_NUM:
        return getPositionNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case POSITION_NUM:
        return isSetPositionNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearTodayTrade_args)
        return this.equals((clearTodayTrade_args)that);
      return false;
    }

    public boolean equals(clearTodayTrade_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_positionNum = true;
      boolean that_present_positionNum = true;
      if (this_present_positionNum || that_present_positionNum) {
        if (!(this_present_positionNum && that_present_positionNum))
          return false;
        if (this.positionNum != that.positionNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_positionNum = true;
      list.add(present_positionNum);
      if (present_positionNum)
        list.add(positionNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(clearTodayTrade_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPositionNum()).compareTo(other.isSetPositionNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPositionNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionNum, other.positionNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearTodayTrade_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("positionNum:");
      sb.append(this.positionNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearTodayTrade_argsStandardSchemeFactory implements SchemeFactory {
      public clearTodayTrade_argsStandardScheme getScheme() {
        return new clearTodayTrade_argsStandardScheme();
      }
    }

    private static class clearTodayTrade_argsStandardScheme extends StandardScheme<clearTodayTrade_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearTodayTrade_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POSITION_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.positionNum = iprot.readI32();
                struct.setPositionNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearTodayTrade_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(POSITION_NUM_FIELD_DESC);
        oprot.writeI32(struct.positionNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearTodayTrade_argsTupleSchemeFactory implements SchemeFactory {
      public clearTodayTrade_argsTupleScheme getScheme() {
        return new clearTodayTrade_argsTupleScheme();
      }
    }

    private static class clearTodayTrade_argsTupleScheme extends TupleScheme<clearTodayTrade_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearTodayTrade_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetPositionNum()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetPositionNum()) {
          oprot.writeI32(struct.positionNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearTodayTrade_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.positionNum = iprot.readI32();
          struct.setPositionNumIsSet(true);
        }
      }
    }

  }

  public static class clearTodayTrade_result implements org.apache.thrift.TBase<clearTodayTrade_result, clearTodayTrade_result._Fields>, java.io.Serializable, Cloneable, Comparable<clearTodayTrade_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearTodayTrade_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearTodayTrade_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearTodayTrade_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearTodayTrade_result.class, metaDataMap);
    }

    public clearTodayTrade_result() {
    }

    public clearTodayTrade_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearTodayTrade_result(clearTodayTrade_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public clearTodayTrade_result deepCopy() {
      return new clearTodayTrade_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public clearTodayTrade_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearTodayTrade_result)
        return this.equals((clearTodayTrade_result)that);
      return false;
    }

    public boolean equals(clearTodayTrade_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(clearTodayTrade_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearTodayTrade_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearTodayTrade_resultStandardSchemeFactory implements SchemeFactory {
      public clearTodayTrade_resultStandardScheme getScheme() {
        return new clearTodayTrade_resultStandardScheme();
      }
    }

    private static class clearTodayTrade_resultStandardScheme extends StandardScheme<clearTodayTrade_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearTodayTrade_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearTodayTrade_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearTodayTrade_resultTupleSchemeFactory implements SchemeFactory {
      public clearTodayTrade_resultTupleScheme getScheme() {
        return new clearTodayTrade_resultTupleScheme();
      }
    }

    private static class clearTodayTrade_resultTupleScheme extends TupleScheme<clearTodayTrade_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearTodayTrade_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearTodayTrade_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateTodayBuy_args implements org.apache.thrift.TBase<updateTodayBuy_args, updateTodayBuy_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateTodayBuy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTodayBuy_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STOCK_TRADE_TODAY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("stockTradeTodayList", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTodayBuy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTodayBuy_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public String stockTradeTodayList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      STOCK_TRADE_TODAY_LIST((short)2, "stockTradeTodayList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // STOCK_TRADE_TODAY_LIST
            return STOCK_TRADE_TODAY_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCK_TRADE_TODAY_LIST, new org.apache.thrift.meta_data.FieldMetaData("stockTradeTodayList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTodayBuy_args.class, metaDataMap);
    }

    public updateTodayBuy_args() {
    }

    public updateTodayBuy_args(
      int strategyId,
      String stockTradeTodayList)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.stockTradeTodayList = stockTradeTodayList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTodayBuy_args(updateTodayBuy_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      if (other.isSetStockTradeTodayList()) {
        this.stockTradeTodayList = other.stockTradeTodayList;
      }
    }

    public updateTodayBuy_args deepCopy() {
      return new updateTodayBuy_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      this.stockTradeTodayList = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public updateTodayBuy_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public String getStockTradeTodayList() {
      return this.stockTradeTodayList;
    }

    public updateTodayBuy_args setStockTradeTodayList(String stockTradeTodayList) {
      this.stockTradeTodayList = stockTradeTodayList;
      return this;
    }

    public void unsetStockTradeTodayList() {
      this.stockTradeTodayList = null;
    }

    /** Returns true if field stockTradeTodayList is set (has been assigned a value) and false otherwise */
    public boolean isSetStockTradeTodayList() {
      return this.stockTradeTodayList != null;
    }

    public void setStockTradeTodayListIsSet(boolean value) {
      if (!value) {
        this.stockTradeTodayList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case STOCK_TRADE_TODAY_LIST:
        if (value == null) {
          unsetStockTradeTodayList();
        } else {
          setStockTradeTodayList((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case STOCK_TRADE_TODAY_LIST:
        return getStockTradeTodayList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case STOCK_TRADE_TODAY_LIST:
        return isSetStockTradeTodayList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTodayBuy_args)
        return this.equals((updateTodayBuy_args)that);
      return false;
    }

    public boolean equals(updateTodayBuy_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_stockTradeTodayList = true && this.isSetStockTradeTodayList();
      boolean that_present_stockTradeTodayList = true && that.isSetStockTradeTodayList();
      if (this_present_stockTradeTodayList || that_present_stockTradeTodayList) {
        if (!(this_present_stockTradeTodayList && that_present_stockTradeTodayList))
          return false;
        if (!this.stockTradeTodayList.equals(that.stockTradeTodayList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_stockTradeTodayList = true && (isSetStockTradeTodayList());
      list.add(present_stockTradeTodayList);
      if (present_stockTradeTodayList)
        list.add(stockTradeTodayList);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTodayBuy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStockTradeTodayList()).compareTo(other.isSetStockTradeTodayList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStockTradeTodayList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockTradeTodayList, other.stockTradeTodayList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTodayBuy_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stockTradeTodayList:");
      if (this.stockTradeTodayList == null) {
        sb.append("null");
      } else {
        sb.append(this.stockTradeTodayList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTodayBuy_argsStandardSchemeFactory implements SchemeFactory {
      public updateTodayBuy_argsStandardScheme getScheme() {
        return new updateTodayBuy_argsStandardScheme();
      }
    }

    private static class updateTodayBuy_argsStandardScheme extends StandardScheme<updateTodayBuy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTodayBuy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOCK_TRADE_TODAY_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stockTradeTodayList = iprot.readString();
                struct.setStockTradeTodayListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTodayBuy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        if (struct.stockTradeTodayList != null) {
          oprot.writeFieldBegin(STOCK_TRADE_TODAY_LIST_FIELD_DESC);
          oprot.writeString(struct.stockTradeTodayList);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTodayBuy_argsTupleSchemeFactory implements SchemeFactory {
      public updateTodayBuy_argsTupleScheme getScheme() {
        return new updateTodayBuy_argsTupleScheme();
      }
    }

    private static class updateTodayBuy_argsTupleScheme extends TupleScheme<updateTodayBuy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTodayBuy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetStockTradeTodayList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStockTradeTodayList()) {
          oprot.writeString(struct.stockTradeTodayList);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTodayBuy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stockTradeTodayList = iprot.readString();
          struct.setStockTradeTodayListIsSet(true);
        }
      }
    }

  }

  public static class updateTodayBuy_result implements org.apache.thrift.TBase<updateTodayBuy_result, updateTodayBuy_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateTodayBuy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTodayBuy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTodayBuy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTodayBuy_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTodayBuy_result.class, metaDataMap);
    }

    public updateTodayBuy_result() {
    }

    public updateTodayBuy_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTodayBuy_result(updateTodayBuy_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateTodayBuy_result deepCopy() {
      return new updateTodayBuy_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateTodayBuy_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTodayBuy_result)
        return this.equals((updateTodayBuy_result)that);
      return false;
    }

    public boolean equals(updateTodayBuy_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTodayBuy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTodayBuy_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTodayBuy_resultStandardSchemeFactory implements SchemeFactory {
      public updateTodayBuy_resultStandardScheme getScheme() {
        return new updateTodayBuy_resultStandardScheme();
      }
    }

    private static class updateTodayBuy_resultStandardScheme extends StandardScheme<updateTodayBuy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTodayBuy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTodayBuy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTodayBuy_resultTupleSchemeFactory implements SchemeFactory {
      public updateTodayBuy_resultTupleScheme getScheme() {
        return new updateTodayBuy_resultTupleScheme();
      }
    }

    private static class updateTodayBuy_resultTupleScheme extends TupleScheme<updateTodayBuy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTodayBuy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTodayBuy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addStockTradeNear5Days_args implements org.apache.thrift.TBase<addStockTradeNear5Days_args, addStockTradeNear5Days_args._Fields>, java.io.Serializable, Cloneable, Comparable<addStockTradeNear5Days_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addStockTradeNear5Days_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STOCK_TRADE_NEAR5_DAYS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("stockTradeNear5DaysList", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addStockTradeNear5Days_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addStockTradeNear5Days_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public String stockTradeNear5DaysList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      STOCK_TRADE_NEAR5_DAYS_LIST((short)2, "stockTradeNear5DaysList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // STOCK_TRADE_NEAR5_DAYS_LIST
            return STOCK_TRADE_NEAR5_DAYS_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCK_TRADE_NEAR5_DAYS_LIST, new org.apache.thrift.meta_data.FieldMetaData("stockTradeNear5DaysList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addStockTradeNear5Days_args.class, metaDataMap);
    }

    public addStockTradeNear5Days_args() {
    }

    public addStockTradeNear5Days_args(
      int strategyId,
      String stockTradeNear5DaysList)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.stockTradeNear5DaysList = stockTradeNear5DaysList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addStockTradeNear5Days_args(addStockTradeNear5Days_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      if (other.isSetStockTradeNear5DaysList()) {
        this.stockTradeNear5DaysList = other.stockTradeNear5DaysList;
      }
    }

    public addStockTradeNear5Days_args deepCopy() {
      return new addStockTradeNear5Days_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      this.stockTradeNear5DaysList = null;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public addStockTradeNear5Days_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public String getStockTradeNear5DaysList() {
      return this.stockTradeNear5DaysList;
    }

    public addStockTradeNear5Days_args setStockTradeNear5DaysList(String stockTradeNear5DaysList) {
      this.stockTradeNear5DaysList = stockTradeNear5DaysList;
      return this;
    }

    public void unsetStockTradeNear5DaysList() {
      this.stockTradeNear5DaysList = null;
    }

    /** Returns true if field stockTradeNear5DaysList is set (has been assigned a value) and false otherwise */
    public boolean isSetStockTradeNear5DaysList() {
      return this.stockTradeNear5DaysList != null;
    }

    public void setStockTradeNear5DaysListIsSet(boolean value) {
      if (!value) {
        this.stockTradeNear5DaysList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case STOCK_TRADE_NEAR5_DAYS_LIST:
        if (value == null) {
          unsetStockTradeNear5DaysList();
        } else {
          setStockTradeNear5DaysList((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case STOCK_TRADE_NEAR5_DAYS_LIST:
        return getStockTradeNear5DaysList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case STOCK_TRADE_NEAR5_DAYS_LIST:
        return isSetStockTradeNear5DaysList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addStockTradeNear5Days_args)
        return this.equals((addStockTradeNear5Days_args)that);
      return false;
    }

    public boolean equals(addStockTradeNear5Days_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_stockTradeNear5DaysList = true && this.isSetStockTradeNear5DaysList();
      boolean that_present_stockTradeNear5DaysList = true && that.isSetStockTradeNear5DaysList();
      if (this_present_stockTradeNear5DaysList || that_present_stockTradeNear5DaysList) {
        if (!(this_present_stockTradeNear5DaysList && that_present_stockTradeNear5DaysList))
          return false;
        if (!this.stockTradeNear5DaysList.equals(that.stockTradeNear5DaysList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_stockTradeNear5DaysList = true && (isSetStockTradeNear5DaysList());
      list.add(present_stockTradeNear5DaysList);
      if (present_stockTradeNear5DaysList)
        list.add(stockTradeNear5DaysList);

      return list.hashCode();
    }

    @Override
    public int compareTo(addStockTradeNear5Days_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStockTradeNear5DaysList()).compareTo(other.isSetStockTradeNear5DaysList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStockTradeNear5DaysList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockTradeNear5DaysList, other.stockTradeNear5DaysList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addStockTradeNear5Days_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stockTradeNear5DaysList:");
      if (this.stockTradeNear5DaysList == null) {
        sb.append("null");
      } else {
        sb.append(this.stockTradeNear5DaysList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addStockTradeNear5Days_argsStandardSchemeFactory implements SchemeFactory {
      public addStockTradeNear5Days_argsStandardScheme getScheme() {
        return new addStockTradeNear5Days_argsStandardScheme();
      }
    }

    private static class addStockTradeNear5Days_argsStandardScheme extends StandardScheme<addStockTradeNear5Days_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addStockTradeNear5Days_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOCK_TRADE_NEAR5_DAYS_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stockTradeNear5DaysList = iprot.readString();
                struct.setStockTradeNear5DaysListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addStockTradeNear5Days_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        if (struct.stockTradeNear5DaysList != null) {
          oprot.writeFieldBegin(STOCK_TRADE_NEAR5_DAYS_LIST_FIELD_DESC);
          oprot.writeString(struct.stockTradeNear5DaysList);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addStockTradeNear5Days_argsTupleSchemeFactory implements SchemeFactory {
      public addStockTradeNear5Days_argsTupleScheme getScheme() {
        return new addStockTradeNear5Days_argsTupleScheme();
      }
    }

    private static class addStockTradeNear5Days_argsTupleScheme extends TupleScheme<addStockTradeNear5Days_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addStockTradeNear5Days_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetStockTradeNear5DaysList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStockTradeNear5DaysList()) {
          oprot.writeString(struct.stockTradeNear5DaysList);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addStockTradeNear5Days_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stockTradeNear5DaysList = iprot.readString();
          struct.setStockTradeNear5DaysListIsSet(true);
        }
      }
    }

  }

  public static class addStockTradeNear5Days_result implements org.apache.thrift.TBase<addStockTradeNear5Days_result, addStockTradeNear5Days_result._Fields>, java.io.Serializable, Cloneable, Comparable<addStockTradeNear5Days_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addStockTradeNear5Days_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addStockTradeNear5Days_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addStockTradeNear5Days_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addStockTradeNear5Days_result.class, metaDataMap);
    }

    public addStockTradeNear5Days_result() {
    }

    public addStockTradeNear5Days_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addStockTradeNear5Days_result(addStockTradeNear5Days_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addStockTradeNear5Days_result deepCopy() {
      return new addStockTradeNear5Days_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addStockTradeNear5Days_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addStockTradeNear5Days_result)
        return this.equals((addStockTradeNear5Days_result)that);
      return false;
    }

    public boolean equals(addStockTradeNear5Days_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addStockTradeNear5Days_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addStockTradeNear5Days_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addStockTradeNear5Days_resultStandardSchemeFactory implements SchemeFactory {
      public addStockTradeNear5Days_resultStandardScheme getScheme() {
        return new addStockTradeNear5Days_resultStandardScheme();
      }
    }

    private static class addStockTradeNear5Days_resultStandardScheme extends StandardScheme<addStockTradeNear5Days_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addStockTradeNear5Days_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addStockTradeNear5Days_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addStockTradeNear5Days_resultTupleSchemeFactory implements SchemeFactory {
      public addStockTradeNear5Days_resultTupleScheme getScheme() {
        return new addStockTradeNear5Days_resultTupleScheme();
      }
    }

    private static class addStockTradeNear5Days_resultTupleScheme extends TupleScheme<addStockTradeNear5Days_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addStockTradeNear5Days_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addStockTradeNear5Days_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class clearNear5DaysTrade_args implements org.apache.thrift.TBase<clearNear5DaysTrade_args, clearNear5DaysTrade_args._Fields>, java.io.Serializable, Cloneable, Comparable<clearNear5DaysTrade_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearNear5DaysTrade_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearNear5DaysTrade_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearNear5DaysTrade_argsTupleSchemeFactory());
    }

    public int strategyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearNear5DaysTrade_args.class, metaDataMap);
    }

    public clearNear5DaysTrade_args() {
    }

    public clearNear5DaysTrade_args(
      int strategyId)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearNear5DaysTrade_args(clearNear5DaysTrade_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
    }

    public clearNear5DaysTrade_args deepCopy() {
      return new clearNear5DaysTrade_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public clearNear5DaysTrade_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearNear5DaysTrade_args)
        return this.equals((clearNear5DaysTrade_args)that);
      return false;
    }

    public boolean equals(clearNear5DaysTrade_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(clearNear5DaysTrade_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearNear5DaysTrade_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearNear5DaysTrade_argsStandardSchemeFactory implements SchemeFactory {
      public clearNear5DaysTrade_argsStandardScheme getScheme() {
        return new clearNear5DaysTrade_argsStandardScheme();
      }
    }

    private static class clearNear5DaysTrade_argsStandardScheme extends StandardScheme<clearNear5DaysTrade_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearNear5DaysTrade_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearNear5DaysTrade_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearNear5DaysTrade_argsTupleSchemeFactory implements SchemeFactory {
      public clearNear5DaysTrade_argsTupleScheme getScheme() {
        return new clearNear5DaysTrade_argsTupleScheme();
      }
    }

    private static class clearNear5DaysTrade_argsTupleScheme extends TupleScheme<clearNear5DaysTrade_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearNear5DaysTrade_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearNear5DaysTrade_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
      }
    }

  }

  public static class clearNear5DaysTrade_result implements org.apache.thrift.TBase<clearNear5DaysTrade_result, clearNear5DaysTrade_result._Fields>, java.io.Serializable, Cloneable, Comparable<clearNear5DaysTrade_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearNear5DaysTrade_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearNear5DaysTrade_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearNear5DaysTrade_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearNear5DaysTrade_result.class, metaDataMap);
    }

    public clearNear5DaysTrade_result() {
    }

    public clearNear5DaysTrade_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearNear5DaysTrade_result(clearNear5DaysTrade_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public clearNear5DaysTrade_result deepCopy() {
      return new clearNear5DaysTrade_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public clearNear5DaysTrade_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearNear5DaysTrade_result)
        return this.equals((clearNear5DaysTrade_result)that);
      return false;
    }

    public boolean equals(clearNear5DaysTrade_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(clearNear5DaysTrade_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearNear5DaysTrade_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearNear5DaysTrade_resultStandardSchemeFactory implements SchemeFactory {
      public clearNear5DaysTrade_resultStandardScheme getScheme() {
        return new clearNear5DaysTrade_resultStandardScheme();
      }
    }

    private static class clearNear5DaysTrade_resultStandardScheme extends StandardScheme<clearNear5DaysTrade_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearNear5DaysTrade_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearNear5DaysTrade_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearNear5DaysTrade_resultTupleSchemeFactory implements SchemeFactory {
      public clearNear5DaysTrade_resultTupleScheme getScheme() {
        return new clearNear5DaysTrade_resultTupleScheme();
      }
    }

    private static class clearNear5DaysTrade_resultTupleScheme extends TupleScheme<clearNear5DaysTrade_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearNear5DaysTrade_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearNear5DaysTrade_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryDays5Trade_args implements org.apache.thrift.TBase<queryDays5Trade_args, queryDays5Trade_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryDays5Trade_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryDays5Trade_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("seq", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryDays5Trade_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryDays5Trade_argsTupleSchemeFactory());
    }

    public int strategyId; // required
    public long seq; // required
    public int num; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId"),
      SEQ((short)2, "seq"),
      NUM((short)3, "num");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          case 2: // SEQ
            return SEQ;
          case 3: // NUM
            return NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private static final int __SEQ_ISSET_ID = 1;
    private static final int __NUM_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SEQ, new org.apache.thrift.meta_data.FieldMetaData("seq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryDays5Trade_args.class, metaDataMap);
    }

    public queryDays5Trade_args() {
    }

    public queryDays5Trade_args(
      int strategyId,
      long seq,
      int num)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.seq = seq;
      setSeqIsSet(true);
      this.num = num;
      setNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryDays5Trade_args(queryDays5Trade_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
      this.seq = other.seq;
      this.num = other.num;
    }

    public queryDays5Trade_args deepCopy() {
      return new queryDays5Trade_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      setSeqIsSet(false);
      this.seq = 0;
      setNumIsSet(false);
      this.num = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public queryDays5Trade_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public long getSeq() {
      return this.seq;
    }

    public queryDays5Trade_args setSeq(long seq) {
      this.seq = seq;
      setSeqIsSet(true);
      return this;
    }

    public void unsetSeq() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQ_ISSET_ID);
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return EncodingUtils.testBit(__isset_bitfield, __SEQ_ISSET_ID);
    }

    public void setSeqIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQ_ISSET_ID, value);
    }

    public int getNum() {
      return this.num;
    }

    public queryDays5Trade_args setNum(int num) {
      this.num = num;
      setNumIsSet(true);
      return this;
    }

    public void unsetNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    /** Returns true if field num is set (has been assigned a value) and false otherwise */
    public boolean isSetNum() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    public void setNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case SEQ:
        if (value == null) {
          unsetSeq();
        } else {
          setSeq((Long)value);
        }
        break;

      case NUM:
        if (value == null) {
          unsetNum();
        } else {
          setNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      case SEQ:
        return getSeq();

      case NUM:
        return getNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      case SEQ:
        return isSetSeq();
      case NUM:
        return isSetNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryDays5Trade_args)
        return this.equals((queryDays5Trade_args)that);
      return false;
    }

    public boolean equals(queryDays5Trade_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_num = true;
      boolean that_present_num = true;
      if (this_present_num || that_present_num) {
        if (!(this_present_num && that_present_num))
          return false;
        if (this.num != that.num)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_seq = true;
      list.add(present_seq);
      if (present_seq)
        list.add(seq);

      boolean present_num = true;
      list.add(present_num);
      if (present_num)
        list.add(num);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryDays5Trade_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeq()).compareTo(other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryDays5Trade_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("num:");
      sb.append(this.num);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryDays5Trade_argsStandardSchemeFactory implements SchemeFactory {
      public queryDays5Trade_argsStandardScheme getScheme() {
        return new queryDays5Trade_argsStandardScheme();
      }
    }

    private static class queryDays5Trade_argsStandardScheme extends StandardScheme<queryDays5Trade_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryDays5Trade_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEQ
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.seq = iprot.readI64();
                struct.setSeqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num = iprot.readI32();
                struct.setNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryDays5Trade_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SEQ_FIELD_DESC);
        oprot.writeI64(struct.seq);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_FIELD_DESC);
        oprot.writeI32(struct.num);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryDays5Trade_argsTupleSchemeFactory implements SchemeFactory {
      public queryDays5Trade_argsTupleScheme getScheme() {
        return new queryDays5Trade_argsTupleScheme();
      }
    }

    private static class queryDays5Trade_argsTupleScheme extends TupleScheme<queryDays5Trade_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryDays5Trade_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        if (struct.isSetSeq()) {
          optionals.set(1);
        }
        if (struct.isSetNum()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetSeq()) {
          oprot.writeI64(struct.seq);
        }
        if (struct.isSetNum()) {
          oprot.writeI32(struct.num);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryDays5Trade_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.seq = iprot.readI64();
          struct.setSeqIsSet(true);
        }
        if (incoming.get(2)) {
          struct.num = iprot.readI32();
          struct.setNumIsSet(true);
        }
      }
    }

  }

  public static class queryDays5Trade_result implements org.apache.thrift.TBase<queryDays5Trade_result, queryDays5Trade_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryDays5Trade_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryDays5Trade_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryDays5Trade_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryDays5Trade_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryDays5Trade_result.class, metaDataMap);
    }

    public queryDays5Trade_result() {
    }

    public queryDays5Trade_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryDays5Trade_result(queryDays5Trade_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryDays5Trade_result deepCopy() {
      return new queryDays5Trade_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryDays5Trade_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryDays5Trade_result)
        return this.equals((queryDays5Trade_result)that);
      return false;
    }

    public boolean equals(queryDays5Trade_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryDays5Trade_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryDays5Trade_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryDays5Trade_resultStandardSchemeFactory implements SchemeFactory {
      public queryDays5Trade_resultStandardScheme getScheme() {
        return new queryDays5Trade_resultStandardScheme();
      }
    }

    private static class queryDays5Trade_resultStandardScheme extends StandardScheme<queryDays5Trade_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryDays5Trade_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryDays5Trade_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryDays5Trade_resultTupleSchemeFactory implements SchemeFactory {
      public queryDays5Trade_resultTupleScheme getScheme() {
        return new queryDays5Trade_resultTupleScheme();
      }
    }

    private static class queryDays5Trade_resultTupleScheme extends TupleScheme<queryDays5Trade_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryDays5Trade_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryDays5Trade_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchStockResult_args implements org.apache.thrift.TBase<searchStockResult_args, searchStockResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchStockResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchStockResult_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField STOCK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stockCode", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchStockResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchStockResult_argsTupleSchemeFactory());
    }

    public int userId; // required
    public int strategyId; // required
    public String stockCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      STRATEGY_ID((short)2, "strategyId"),
      STOCK_CODE((short)3, "stockCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // STRATEGY_ID
            return STRATEGY_ID;
          case 3: // STOCK_CODE
            return STOCK_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __STRATEGYID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STOCK_CODE, new org.apache.thrift.meta_data.FieldMetaData("stockCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchStockResult_args.class, metaDataMap);
    }

    public searchStockResult_args() {
    }

    public searchStockResult_args(
      int userId,
      int strategyId,
      String stockCode)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      this.stockCode = stockCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchStockResult_args(searchStockResult_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.strategyId = other.strategyId;
      if (other.isSetStockCode()) {
        this.stockCode = other.stockCode;
      }
    }

    public searchStockResult_args deepCopy() {
      return new searchStockResult_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setStrategyIdIsSet(false);
      this.strategyId = 0;
      this.stockCode = null;
    }

    public int getUserId() {
      return this.userId;
    }

    public searchStockResult_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public searchStockResult_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public String getStockCode() {
      return this.stockCode;
    }

    public searchStockResult_args setStockCode(String stockCode) {
      this.stockCode = stockCode;
      return this;
    }

    public void unsetStockCode() {
      this.stockCode = null;
    }

    /** Returns true if field stockCode is set (has been assigned a value) and false otherwise */
    public boolean isSetStockCode() {
      return this.stockCode != null;
    }

    public void setStockCodeIsSet(boolean value) {
      if (!value) {
        this.stockCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      case STOCK_CODE:
        if (value == null) {
          unsetStockCode();
        } else {
          setStockCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case STRATEGY_ID:
        return getStrategyId();

      case STOCK_CODE:
        return getStockCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case STRATEGY_ID:
        return isSetStrategyId();
      case STOCK_CODE:
        return isSetStockCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchStockResult_args)
        return this.equals((searchStockResult_args)that);
      return false;
    }

    public boolean equals(searchStockResult_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      boolean this_present_stockCode = true && this.isSetStockCode();
      boolean that_present_stockCode = true && that.isSetStockCode();
      if (this_present_stockCode || that_present_stockCode) {
        if (!(this_present_stockCode && that_present_stockCode))
          return false;
        if (!this.stockCode.equals(that.stockCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      boolean present_stockCode = true && (isSetStockCode());
      list.add(present_stockCode);
      if (present_stockCode)
        list.add(stockCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchStockResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStockCode()).compareTo(other.isSetStockCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStockCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockCode, other.stockCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchStockResult_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stockCode:");
      if (this.stockCode == null) {
        sb.append("null");
      } else {
        sb.append(this.stockCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchStockResult_argsStandardSchemeFactory implements SchemeFactory {
      public searchStockResult_argsStandardScheme getScheme() {
        return new searchStockResult_argsStandardScheme();
      }
    }

    private static class searchStockResult_argsStandardScheme extends StandardScheme<searchStockResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchStockResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STOCK_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stockCode = iprot.readString();
                struct.setStockCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchStockResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        if (struct.stockCode != null) {
          oprot.writeFieldBegin(STOCK_CODE_FIELD_DESC);
          oprot.writeString(struct.stockCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchStockResult_argsTupleSchemeFactory implements SchemeFactory {
      public searchStockResult_argsTupleScheme getScheme() {
        return new searchStockResult_argsTupleScheme();
      }
    }

    private static class searchStockResult_argsTupleScheme extends TupleScheme<searchStockResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchStockResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetStrategyId()) {
          optionals.set(1);
        }
        if (struct.isSetStockCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
        if (struct.isSetStockCode()) {
          oprot.writeString(struct.stockCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchStockResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.stockCode = iprot.readString();
          struct.setStockCodeIsSet(true);
        }
      }
    }

  }

  public static class searchStockResult_result implements org.apache.thrift.TBase<searchStockResult_result, searchStockResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchStockResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchStockResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchStockResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchStockResult_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchStockResult_result.class, metaDataMap);
    }

    public searchStockResult_result() {
    }

    public searchStockResult_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchStockResult_result(searchStockResult_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public searchStockResult_result deepCopy() {
      return new searchStockResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public searchStockResult_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchStockResult_result)
        return this.equals((searchStockResult_result)that);
      return false;
    }

    public boolean equals(searchStockResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchStockResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchStockResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchStockResult_resultStandardSchemeFactory implements SchemeFactory {
      public searchStockResult_resultStandardScheme getScheme() {
        return new searchStockResult_resultStandardScheme();
      }
    }

    private static class searchStockResult_resultStandardScheme extends StandardScheme<searchStockResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchStockResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchStockResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchStockResult_resultTupleSchemeFactory implements SchemeFactory {
      public searchStockResult_resultTupleScheme getScheme() {
        return new searchStockResult_resultTupleScheme();
      }
    }

    private static class searchStockResult_resultTupleScheme extends TupleScheme<searchStockResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchStockResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchStockResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStrategyExtend_args implements org.apache.thrift.TBase<getStrategyExtend_args, getStrategyExtend_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStrategyExtend_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStrategyExtend_args");

    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStrategyExtend_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStrategyExtend_argsTupleSchemeFactory());
    }

    public int strategyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRATEGY_ID((short)1, "strategyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRATEGY_ID
            return STRATEGY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STRATEGYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStrategyExtend_args.class, metaDataMap);
    }

    public getStrategyExtend_args() {
    }

    public getStrategyExtend_args(
      int strategyId)
    {
      this();
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStrategyExtend_args(getStrategyExtend_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.strategyId = other.strategyId;
    }

    public getStrategyExtend_args deepCopy() {
      return new getStrategyExtend_args(this);
    }

    @Override
    public void clear() {
      setStrategyIdIsSet(false);
      this.strategyId = 0;
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public getStrategyExtend_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRATEGY_ID:
        return getStrategyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRATEGY_ID:
        return isSetStrategyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStrategyExtend_args)
        return this.equals((getStrategyExtend_args)that);
      return false;
    }

    public boolean equals(getStrategyExtend_args that) {
      if (that == null)
        return false;

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStrategyExtend_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStrategyExtend_args(");
      boolean first = true;

      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStrategyExtend_argsStandardSchemeFactory implements SchemeFactory {
      public getStrategyExtend_argsStandardScheme getScheme() {
        return new getStrategyExtend_argsStandardScheme();
      }
    }

    private static class getStrategyExtend_argsStandardScheme extends StandardScheme<getStrategyExtend_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStrategyExtend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStrategyExtend_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStrategyExtend_argsTupleSchemeFactory implements SchemeFactory {
      public getStrategyExtend_argsTupleScheme getScheme() {
        return new getStrategyExtend_argsTupleScheme();
      }
    }

    private static class getStrategyExtend_argsTupleScheme extends TupleScheme<getStrategyExtend_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStrategyExtend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrategyId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStrategyExtend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
      }
    }

  }

  public static class getStrategyExtend_result implements org.apache.thrift.TBase<getStrategyExtend_result, getStrategyExtend_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStrategyExtend_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStrategyExtend_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStrategyExtend_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStrategyExtend_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStrategyExtend_result.class, metaDataMap);
    }

    public getStrategyExtend_result() {
    }

    public getStrategyExtend_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStrategyExtend_result(getStrategyExtend_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getStrategyExtend_result deepCopy() {
      return new getStrategyExtend_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getStrategyExtend_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStrategyExtend_result)
        return this.equals((getStrategyExtend_result)that);
      return false;
    }

    public boolean equals(getStrategyExtend_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStrategyExtend_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStrategyExtend_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStrategyExtend_resultStandardSchemeFactory implements SchemeFactory {
      public getStrategyExtend_resultStandardScheme getScheme() {
        return new getStrategyExtend_resultStandardScheme();
      }
    }

    private static class getStrategyExtend_resultStandardScheme extends StandardScheme<getStrategyExtend_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStrategyExtend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStrategyExtend_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStrategyExtend_resultTupleSchemeFactory implements SchemeFactory {
      public getStrategyExtend_resultTupleScheme getScheme() {
        return new getStrategyExtend_resultTupleScheme();
      }
    }

    private static class getStrategyExtend_resultTupleScheme extends TupleScheme<getStrategyExtend_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStrategyExtend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStrategyExtend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findUserFollowStock_args implements org.apache.thrift.TBase<findUserFollowStock_args, findUserFollowStock_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUserFollowStock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserFollowStock_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUserFollowStock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUserFollowStock_argsTupleSchemeFactory());
    }

    public int userId; // required
    public int strategyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      STRATEGY_ID((short)2, "strategyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // STRATEGY_ID
            return STRATEGY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __STRATEGYID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserFollowStock_args.class, metaDataMap);
    }

    public findUserFollowStock_args() {
    }

    public findUserFollowStock_args(
      int userId,
      int strategyId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserFollowStock_args(findUserFollowStock_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.strategyId = other.strategyId;
    }

    public findUserFollowStock_args deepCopy() {
      return new findUserFollowStock_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setStrategyIdIsSet(false);
      this.strategyId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public findUserFollowStock_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getStrategyId() {
      return this.strategyId;
    }

    public findUserFollowStock_args setStrategyId(int strategyId) {
      this.strategyId = strategyId;
      setStrategyIdIsSet(true);
      return this;
    }

    public void unsetStrategyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
    public boolean isSetStrategyId() {
      return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
    }

    public void setStrategyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case STRATEGY_ID:
        if (value == null) {
          unsetStrategyId();
        } else {
          setStrategyId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case STRATEGY_ID:
        return getStrategyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case STRATEGY_ID:
        return isSetStrategyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserFollowStock_args)
        return this.equals((findUserFollowStock_args)that);
      return false;
    }

    public boolean equals(findUserFollowStock_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_strategyId = true;
      boolean that_present_strategyId = true;
      if (this_present_strategyId || that_present_strategyId) {
        if (!(this_present_strategyId && that_present_strategyId))
          return false;
        if (this.strategyId != that.strategyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_strategyId = true;
      list.add(present_strategyId);
      if (present_strategyId)
        list.add(strategyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findUserFollowStock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrategyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUserFollowStock_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strategyId:");
      sb.append(this.strategyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserFollowStock_argsStandardSchemeFactory implements SchemeFactory {
      public findUserFollowStock_argsStandardScheme getScheme() {
        return new findUserFollowStock_argsStandardScheme();
      }
    }

    private static class findUserFollowStock_argsStandardScheme extends StandardScheme<findUserFollowStock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserFollowStock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRATEGY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strategyId = iprot.readI32();
                struct.setStrategyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserFollowStock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI32(struct.strategyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserFollowStock_argsTupleSchemeFactory implements SchemeFactory {
      public findUserFollowStock_argsTupleScheme getScheme() {
        return new findUserFollowStock_argsTupleScheme();
      }
    }

    private static class findUserFollowStock_argsTupleScheme extends TupleScheme<findUserFollowStock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserFollowStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetStrategyId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetStrategyId()) {
          oprot.writeI32(struct.strategyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserFollowStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strategyId = iprot.readI32();
          struct.setStrategyIdIsSet(true);
        }
      }
    }

  }

  public static class findUserFollowStock_result implements org.apache.thrift.TBase<findUserFollowStock_result, findUserFollowStock_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUserFollowStock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserFollowStock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUserFollowStock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUserFollowStock_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserFollowStock_result.class, metaDataMap);
    }

    public findUserFollowStock_result() {
    }

    public findUserFollowStock_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserFollowStock_result(findUserFollowStock_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public findUserFollowStock_result deepCopy() {
      return new findUserFollowStock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findUserFollowStock_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserFollowStock_result)
        return this.equals((findUserFollowStock_result)that);
      return false;
    }

    public boolean equals(findUserFollowStock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findUserFollowStock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUserFollowStock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserFollowStock_resultStandardSchemeFactory implements SchemeFactory {
      public findUserFollowStock_resultStandardScheme getScheme() {
        return new findUserFollowStock_resultStandardScheme();
      }
    }

    private static class findUserFollowStock_resultStandardScheme extends StandardScheme<findUserFollowStock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserFollowStock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserFollowStock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserFollowStock_resultTupleSchemeFactory implements SchemeFactory {
      public findUserFollowStock_resultTupleScheme getScheme() {
        return new findUserFollowStock_resultTupleScheme();
      }
    }

    private static class findUserFollowStock_resultTupleScheme extends TupleScheme<findUserFollowStock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserFollowStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserFollowStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchStrategyBestStock_args implements org.apache.thrift.TBase<searchStrategyBestStock_args, searchStrategyBestStock_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchStrategyBestStock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchStrategyBestStock_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchStrategyBestStock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchStrategyBestStock_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchStrategyBestStock_args.class, metaDataMap);
    }

    public searchStrategyBestStock_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchStrategyBestStock_args(searchStrategyBestStock_args other) {
    }

    public searchStrategyBestStock_args deepCopy() {
      return new searchStrategyBestStock_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchStrategyBestStock_args)
        return this.equals((searchStrategyBestStock_args)that);
      return false;
    }

    public boolean equals(searchStrategyBestStock_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(searchStrategyBestStock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchStrategyBestStock_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchStrategyBestStock_argsStandardSchemeFactory implements SchemeFactory {
      public searchStrategyBestStock_argsStandardScheme getScheme() {
        return new searchStrategyBestStock_argsStandardScheme();
      }
    }

    private static class searchStrategyBestStock_argsStandardScheme extends StandardScheme<searchStrategyBestStock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchStrategyBestStock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchStrategyBestStock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchStrategyBestStock_argsTupleSchemeFactory implements SchemeFactory {
      public searchStrategyBestStock_argsTupleScheme getScheme() {
        return new searchStrategyBestStock_argsTupleScheme();
      }
    }

    private static class searchStrategyBestStock_argsTupleScheme extends TupleScheme<searchStrategyBestStock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchStrategyBestStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchStrategyBestStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class searchStrategyBestStock_result implements org.apache.thrift.TBase<searchStrategyBestStock_result, searchStrategyBestStock_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchStrategyBestStock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchStrategyBestStock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchStrategyBestStock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchStrategyBestStock_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchStrategyBestStock_result.class, metaDataMap);
    }

    public searchStrategyBestStock_result() {
    }

    public searchStrategyBestStock_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchStrategyBestStock_result(searchStrategyBestStock_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public searchStrategyBestStock_result deepCopy() {
      return new searchStrategyBestStock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public searchStrategyBestStock_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchStrategyBestStock_result)
        return this.equals((searchStrategyBestStock_result)that);
      return false;
    }

    public boolean equals(searchStrategyBestStock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchStrategyBestStock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchStrategyBestStock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchStrategyBestStock_resultStandardSchemeFactory implements SchemeFactory {
      public searchStrategyBestStock_resultStandardScheme getScheme() {
        return new searchStrategyBestStock_resultStandardScheme();
      }
    }

    private static class searchStrategyBestStock_resultStandardScheme extends StandardScheme<searchStrategyBestStock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchStrategyBestStock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchStrategyBestStock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchStrategyBestStock_resultTupleSchemeFactory implements SchemeFactory {
      public searchStrategyBestStock_resultTupleScheme getScheme() {
        return new searchStrategyBestStock_resultTupleScheme();
      }
    }

    private static class searchStrategyBestStock_resultTupleScheme extends TupleScheme<searchStrategyBestStock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchStrategyBestStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchStrategyBestStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findReportData_args implements org.apache.thrift.TBase<findReportData_args, findReportData_args._Fields>, java.io.Serializable, Cloneable, Comparable<findReportData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findReportData_args");

    private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LT_FIELD_DESC = new org.apache.thrift.protocol.TField("lt", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
    private static final org.apache.thrift.protocol.TField RT_FIELD_DESC = new org.apache.thrift.protocol.TField("rt", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findReportData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findReportData_argsTupleSchemeFactory());
    }

    public int day; // required
    public double lt; // required
    public double rt; // required
    public int num; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DAY((short)1, "day"),
      LT((short)2, "lt"),
      RT((short)3, "rt"),
      NUM((short)4, "num");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DAY
            return DAY;
          case 2: // LT
            return LT;
          case 3: // RT
            return RT;
          case 4: // NUM
            return NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DAY_ISSET_ID = 0;
    private static final int __LT_ISSET_ID = 1;
    private static final int __RT_ISSET_ID = 2;
    private static final int __NUM_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LT, new org.apache.thrift.meta_data.FieldMetaData("lt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.RT, new org.apache.thrift.meta_data.FieldMetaData("rt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findReportData_args.class, metaDataMap);
    }

    public findReportData_args() {
    }

    public findReportData_args(
      int day,
      double lt,
      double rt,
      int num)
    {
      this();
      this.day = day;
      setDayIsSet(true);
      this.lt = lt;
      setLtIsSet(true);
      this.rt = rt;
      setRtIsSet(true);
      this.num = num;
      setNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findReportData_args(findReportData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.day = other.day;
      this.lt = other.lt;
      this.rt = other.rt;
      this.num = other.num;
    }

    public findReportData_args deepCopy() {
      return new findReportData_args(this);
    }

    @Override
    public void clear() {
      setDayIsSet(false);
      this.day = 0;
      setLtIsSet(false);
      this.lt = 0.0;
      setRtIsSet(false);
      this.rt = 0.0;
      setNumIsSet(false);
      this.num = 0;
    }

    public int getDay() {
      return this.day;
    }

    public findReportData_args setDay(int day) {
      this.day = day;
      setDayIsSet(true);
      return this;
    }

    public void unsetDay() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAY_ISSET_ID);
    }

    /** Returns true if field day is set (has been assigned a value) and false otherwise */
    public boolean isSetDay() {
      return EncodingUtils.testBit(__isset_bitfield, __DAY_ISSET_ID);
    }

    public void setDayIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAY_ISSET_ID, value);
    }

    public double getLt() {
      return this.lt;
    }

    public findReportData_args setLt(double lt) {
      this.lt = lt;
      setLtIsSet(true);
      return this;
    }

    public void unsetLt() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LT_ISSET_ID);
    }

    /** Returns true if field lt is set (has been assigned a value) and false otherwise */
    public boolean isSetLt() {
      return EncodingUtils.testBit(__isset_bitfield, __LT_ISSET_ID);
    }

    public void setLtIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LT_ISSET_ID, value);
    }

    public double getRt() {
      return this.rt;
    }

    public findReportData_args setRt(double rt) {
      this.rt = rt;
      setRtIsSet(true);
      return this;
    }

    public void unsetRt() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RT_ISSET_ID);
    }

    /** Returns true if field rt is set (has been assigned a value) and false otherwise */
    public boolean isSetRt() {
      return EncodingUtils.testBit(__isset_bitfield, __RT_ISSET_ID);
    }

    public void setRtIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RT_ISSET_ID, value);
    }

    public int getNum() {
      return this.num;
    }

    public findReportData_args setNum(int num) {
      this.num = num;
      setNumIsSet(true);
      return this;
    }

    public void unsetNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    /** Returns true if field num is set (has been assigned a value) and false otherwise */
    public boolean isSetNum() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    public void setNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DAY:
        if (value == null) {
          unsetDay();
        } else {
          setDay((Integer)value);
        }
        break;

      case LT:
        if (value == null) {
          unsetLt();
        } else {
          setLt((Double)value);
        }
        break;

      case RT:
        if (value == null) {
          unsetRt();
        } else {
          setRt((Double)value);
        }
        break;

      case NUM:
        if (value == null) {
          unsetNum();
        } else {
          setNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DAY:
        return getDay();

      case LT:
        return getLt();

      case RT:
        return getRt();

      case NUM:
        return getNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DAY:
        return isSetDay();
      case LT:
        return isSetLt();
      case RT:
        return isSetRt();
      case NUM:
        return isSetNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findReportData_args)
        return this.equals((findReportData_args)that);
      return false;
    }

    public boolean equals(findReportData_args that) {
      if (that == null)
        return false;

      boolean this_present_day = true;
      boolean that_present_day = true;
      if (this_present_day || that_present_day) {
        if (!(this_present_day && that_present_day))
          return false;
        if (this.day != that.day)
          return false;
      }

      boolean this_present_lt = true;
      boolean that_present_lt = true;
      if (this_present_lt || that_present_lt) {
        if (!(this_present_lt && that_present_lt))
          return false;
        if (this.lt != that.lt)
          return false;
      }

      boolean this_present_rt = true;
      boolean that_present_rt = true;
      if (this_present_rt || that_present_rt) {
        if (!(this_present_rt && that_present_rt))
          return false;
        if (this.rt != that.rt)
          return false;
      }

      boolean this_present_num = true;
      boolean that_present_num = true;
      if (this_present_num || that_present_num) {
        if (!(this_present_num && that_present_num))
          return false;
        if (this.num != that.num)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_day = true;
      list.add(present_day);
      if (present_day)
        list.add(day);

      boolean present_lt = true;
      list.add(present_lt);
      if (present_lt)
        list.add(lt);

      boolean present_rt = true;
      list.add(present_rt);
      if (present_rt)
        list.add(rt);

      boolean present_num = true;
      list.add(present_num);
      if (present_num)
        list.add(num);

      return list.hashCode();
    }

    @Override
    public int compareTo(findReportData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDay()).compareTo(other.isSetDay());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDay()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, other.day);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLt()).compareTo(other.isSetLt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lt, other.lt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRt()).compareTo(other.isSetRt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rt, other.rt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findReportData_args(");
      boolean first = true;

      sb.append("day:");
      sb.append(this.day);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lt:");
      sb.append(this.lt);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rt:");
      sb.append(this.rt);
      first = false;
      if (!first) sb.append(", ");
      sb.append("num:");
      sb.append(this.num);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findReportData_argsStandardSchemeFactory implements SchemeFactory {
      public findReportData_argsStandardScheme getScheme() {
        return new findReportData_argsStandardScheme();
      }
    }

    private static class findReportData_argsStandardScheme extends StandardScheme<findReportData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findReportData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DAY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.day = iprot.readI32();
                struct.setDayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lt = iprot.readDouble();
                struct.setLtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.rt = iprot.readDouble();
                struct.setRtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num = iprot.readI32();
                struct.setNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findReportData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DAY_FIELD_DESC);
        oprot.writeI32(struct.day);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LT_FIELD_DESC);
        oprot.writeDouble(struct.lt);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RT_FIELD_DESC);
        oprot.writeDouble(struct.rt);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_FIELD_DESC);
        oprot.writeI32(struct.num);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findReportData_argsTupleSchemeFactory implements SchemeFactory {
      public findReportData_argsTupleScheme getScheme() {
        return new findReportData_argsTupleScheme();
      }
    }

    private static class findReportData_argsTupleScheme extends TupleScheme<findReportData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findReportData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDay()) {
          optionals.set(0);
        }
        if (struct.isSetLt()) {
          optionals.set(1);
        }
        if (struct.isSetRt()) {
          optionals.set(2);
        }
        if (struct.isSetNum()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDay()) {
          oprot.writeI32(struct.day);
        }
        if (struct.isSetLt()) {
          oprot.writeDouble(struct.lt);
        }
        if (struct.isSetRt()) {
          oprot.writeDouble(struct.rt);
        }
        if (struct.isSetNum()) {
          oprot.writeI32(struct.num);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findReportData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.day = iprot.readI32();
          struct.setDayIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lt = iprot.readDouble();
          struct.setLtIsSet(true);
        }
        if (incoming.get(2)) {
          struct.rt = iprot.readDouble();
          struct.setRtIsSet(true);
        }
        if (incoming.get(3)) {
          struct.num = iprot.readI32();
          struct.setNumIsSet(true);
        }
      }
    }

  }

  public static class findReportData_result implements org.apache.thrift.TBase<findReportData_result, findReportData_result._Fields>, java.io.Serializable, Cloneable, Comparable<findReportData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findReportData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findReportData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findReportData_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findReportData_result.class, metaDataMap);
    }

    public findReportData_result() {
    }

    public findReportData_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findReportData_result(findReportData_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public findReportData_result deepCopy() {
      return new findReportData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findReportData_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findReportData_result)
        return this.equals((findReportData_result)that);
      return false;
    }

    public boolean equals(findReportData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findReportData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findReportData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findReportData_resultStandardSchemeFactory implements SchemeFactory {
      public findReportData_resultStandardScheme getScheme() {
        return new findReportData_resultStandardScheme();
      }
    }

    private static class findReportData_resultStandardScheme extends StandardScheme<findReportData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findReportData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findReportData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findReportData_resultTupleSchemeFactory implements SchemeFactory {
      public findReportData_resultTupleScheme getScheme() {
        return new findReportData_resultTupleScheme();
      }
    }

    private static class findReportData_resultTupleScheme extends TupleScheme<findReportData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findReportData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findReportData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAllStrategyUser_args implements org.apache.thrift.TBase<findAllStrategyUser_args, findAllStrategyUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllStrategyUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllStrategyUser_args");

    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllStrategyUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllStrategyUser_argsTupleSchemeFactory());
    }

    public String time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TIME((short)1, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllStrategyUser_args.class, metaDataMap);
    }

    public findAllStrategyUser_args() {
    }

    public findAllStrategyUser_args(
      String time)
    {
      this();
      this.time = time;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllStrategyUser_args(findAllStrategyUser_args other) {
      if (other.isSetTime()) {
        this.time = other.time;
      }
    }

    public findAllStrategyUser_args deepCopy() {
      return new findAllStrategyUser_args(this);
    }

    @Override
    public void clear() {
      this.time = null;
    }

    public String getTime() {
      return this.time;
    }

    public findAllStrategyUser_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TIME:
        return getTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllStrategyUser_args)
        return this.equals((findAllStrategyUser_args)that);
      return false;
    }

    public boolean equals(findAllStrategyUser_args that) {
      if (that == null)
        return false;

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_time = true && (isSetTime());
      list.add(present_time);
      if (present_time)
        list.add(time);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllStrategyUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllStrategyUser_args(");
      boolean first = true;

      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllStrategyUser_argsStandardSchemeFactory implements SchemeFactory {
      public findAllStrategyUser_argsStandardScheme getScheme() {
        return new findAllStrategyUser_argsStandardScheme();
      }
    }

    private static class findAllStrategyUser_argsStandardScheme extends StandardScheme<findAllStrategyUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllStrategyUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllStrategyUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllStrategyUser_argsTupleSchemeFactory implements SchemeFactory {
      public findAllStrategyUser_argsTupleScheme getScheme() {
        return new findAllStrategyUser_argsTupleScheme();
      }
    }

    private static class findAllStrategyUser_argsTupleScheme extends TupleScheme<findAllStrategyUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllStrategyUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTime()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllStrategyUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class findAllStrategyUser_result implements org.apache.thrift.TBase<findAllStrategyUser_result, findAllStrategyUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllStrategyUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllStrategyUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllStrategyUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllStrategyUser_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllStrategyUser_result.class, metaDataMap);
    }

    public findAllStrategyUser_result() {
    }

    public findAllStrategyUser_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllStrategyUser_result(findAllStrategyUser_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public findAllStrategyUser_result deepCopy() {
      return new findAllStrategyUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findAllStrategyUser_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllStrategyUser_result)
        return this.equals((findAllStrategyUser_result)that);
      return false;
    }

    public boolean equals(findAllStrategyUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllStrategyUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllStrategyUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllStrategyUser_resultStandardSchemeFactory implements SchemeFactory {
      public findAllStrategyUser_resultStandardScheme getScheme() {
        return new findAllStrategyUser_resultStandardScheme();
      }
    }

    private static class findAllStrategyUser_resultStandardScheme extends StandardScheme<findAllStrategyUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllStrategyUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllStrategyUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllStrategyUser_resultTupleSchemeFactory implements SchemeFactory {
      public findAllStrategyUser_resultTupleScheme getScheme() {
        return new findAllStrategyUser_resultTupleScheme();
      }
    }

    private static class findAllStrategyUser_resultTupleScheme extends TupleScheme<findAllStrategyUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllStrategyUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllStrategyUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class incrDNALoopNum_args implements org.apache.thrift.TBase<incrDNALoopNum_args, incrDNALoopNum_args._Fields>, java.io.Serializable, Cloneable, Comparable<incrDNALoopNum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("incrDNALoopNum_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new incrDNALoopNum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new incrDNALoopNum_argsTupleSchemeFactory());
    }

    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(incrDNALoopNum_args.class, metaDataMap);
    }

    public incrDNALoopNum_args() {
    }

    public incrDNALoopNum_args(
      int userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public incrDNALoopNum_args(incrDNALoopNum_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public incrDNALoopNum_args deepCopy() {
      return new incrDNALoopNum_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public incrDNALoopNum_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof incrDNALoopNum_args)
        return this.equals((incrDNALoopNum_args)that);
      return false;
    }

    public boolean equals(incrDNALoopNum_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(incrDNALoopNum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("incrDNALoopNum_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class incrDNALoopNum_argsStandardSchemeFactory implements SchemeFactory {
      public incrDNALoopNum_argsStandardScheme getScheme() {
        return new incrDNALoopNum_argsStandardScheme();
      }
    }

    private static class incrDNALoopNum_argsStandardScheme extends StandardScheme<incrDNALoopNum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, incrDNALoopNum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, incrDNALoopNum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class incrDNALoopNum_argsTupleSchemeFactory implements SchemeFactory {
      public incrDNALoopNum_argsTupleScheme getScheme() {
        return new incrDNALoopNum_argsTupleScheme();
      }
    }

    private static class incrDNALoopNum_argsTupleScheme extends TupleScheme<incrDNALoopNum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, incrDNALoopNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, incrDNALoopNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class incrDNALoopNum_result implements org.apache.thrift.TBase<incrDNALoopNum_result, incrDNALoopNum_result._Fields>, java.io.Serializable, Cloneable, Comparable<incrDNALoopNum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("incrDNALoopNum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new incrDNALoopNum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new incrDNALoopNum_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(incrDNALoopNum_result.class, metaDataMap);
    }

    public incrDNALoopNum_result() {
    }

    public incrDNALoopNum_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public incrDNALoopNum_result(incrDNALoopNum_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public incrDNALoopNum_result deepCopy() {
      return new incrDNALoopNum_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public incrDNALoopNum_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof incrDNALoopNum_result)
        return this.equals((incrDNALoopNum_result)that);
      return false;
    }

    public boolean equals(incrDNALoopNum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(incrDNALoopNum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("incrDNALoopNum_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class incrDNALoopNum_resultStandardSchemeFactory implements SchemeFactory {
      public incrDNALoopNum_resultStandardScheme getScheme() {
        return new incrDNALoopNum_resultStandardScheme();
      }
    }

    private static class incrDNALoopNum_resultStandardScheme extends StandardScheme<incrDNALoopNum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, incrDNALoopNum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, incrDNALoopNum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class incrDNALoopNum_resultTupleSchemeFactory implements SchemeFactory {
      public incrDNALoopNum_resultTupleScheme getScheme() {
        return new incrDNALoopNum_resultTupleScheme();
      }
    }

    private static class incrDNALoopNum_resultTupleScheme extends TupleScheme<incrDNALoopNum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, incrDNALoopNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, incrDNALoopNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findDNALoopByUserId_args implements org.apache.thrift.TBase<findDNALoopByUserId_args, findDNALoopByUserId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findDNALoopByUserId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findDNALoopByUserId_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findDNALoopByUserId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findDNALoopByUserId_argsTupleSchemeFactory());
    }

    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findDNALoopByUserId_args.class, metaDataMap);
    }

    public findDNALoopByUserId_args() {
    }

    public findDNALoopByUserId_args(
      int userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findDNALoopByUserId_args(findDNALoopByUserId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public findDNALoopByUserId_args deepCopy() {
      return new findDNALoopByUserId_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public findDNALoopByUserId_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findDNALoopByUserId_args)
        return this.equals((findDNALoopByUserId_args)that);
      return false;
    }

    public boolean equals(findDNALoopByUserId_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findDNALoopByUserId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findDNALoopByUserId_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findDNALoopByUserId_argsStandardSchemeFactory implements SchemeFactory {
      public findDNALoopByUserId_argsStandardScheme getScheme() {
        return new findDNALoopByUserId_argsStandardScheme();
      }
    }

    private static class findDNALoopByUserId_argsStandardScheme extends StandardScheme<findDNALoopByUserId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findDNALoopByUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findDNALoopByUserId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findDNALoopByUserId_argsTupleSchemeFactory implements SchemeFactory {
      public findDNALoopByUserId_argsTupleScheme getScheme() {
        return new findDNALoopByUserId_argsTupleScheme();
      }
    }

    private static class findDNALoopByUserId_argsTupleScheme extends TupleScheme<findDNALoopByUserId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findDNALoopByUserId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findDNALoopByUserId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class findDNALoopByUserId_result implements org.apache.thrift.TBase<findDNALoopByUserId_result, findDNALoopByUserId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findDNALoopByUserId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findDNALoopByUserId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findDNALoopByUserId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findDNALoopByUserId_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findDNALoopByUserId_result.class, metaDataMap);
    }

    public findDNALoopByUserId_result() {
    }

    public findDNALoopByUserId_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findDNALoopByUserId_result(findDNALoopByUserId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public findDNALoopByUserId_result deepCopy() {
      return new findDNALoopByUserId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findDNALoopByUserId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findDNALoopByUserId_result)
        return this.equals((findDNALoopByUserId_result)that);
      return false;
    }

    public boolean equals(findDNALoopByUserId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findDNALoopByUserId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findDNALoopByUserId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findDNALoopByUserId_resultStandardSchemeFactory implements SchemeFactory {
      public findDNALoopByUserId_resultStandardScheme getScheme() {
        return new findDNALoopByUserId_resultStandardScheme();
      }
    }

    private static class findDNALoopByUserId_resultStandardScheme extends StandardScheme<findDNALoopByUserId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findDNALoopByUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findDNALoopByUserId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findDNALoopByUserId_resultTupleSchemeFactory implements SchemeFactory {
      public findDNALoopByUserId_resultTupleScheme getScheme() {
        return new findDNALoopByUserId_resultTupleScheme();
      }
    }

    private static class findDNALoopByUserId_resultTupleScheme extends TupleScheme<findDNALoopByUserId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findDNALoopByUserId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findDNALoopByUserId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
